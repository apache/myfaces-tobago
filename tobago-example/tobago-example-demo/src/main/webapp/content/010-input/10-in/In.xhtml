<?xml version="1.0" encoding="UTF-8"?>

<!--
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
-->

<ui:composition template="/main.xhtml"
                xmlns="http://www.w3.org/1999/xhtml"
                xmlns:tc="http://myfaces.apache.org/tobago/component"
                xmlns:ui="http://xmlns.jcp.org/jsf/facelets"
                xmlns:f="http://xmlns.jcp.org/jsf/core">

  <p>The <code class="language-markup">&lt;tc:in/&gt;</code> tag create a classic input field.</p>
  <tc:link label="Tag Library Documentation" image="#{request.contextPath}/image/feather-leaf.png"
           link="#{apiController.tobagoTld}/tc/in.html"/>
  <tc:section label="Basics">
    <p>In most cases, a label should be placed in front of every input field. Use the attribute
      <code>label</code>.</p>
    <demo-highlight language="markup">&lt;tc:in label="Input" value="Some Text"/&gt;</demo-highlight>
    <tc:in id="iNormal" label="Input" value="Some Text"/>
    <tc:in id="ireadonly" label="Read Only" readonly="true" value="Some Text"/>
    <tc:in id="i3" label="Disabled" disabled="true" value="Some Text"/>
    <tc:in id="i4" value="Input without a label"/>
  </tc:section>

  <tc:section label="Focus">
    <p>The following input field should be selected after reloading the page. Use the <code>focus</code> attribute.</p>
    <demo-highlight language="markup">&lt;tc:in label="Input (focus)" focus="true" value="Some Text"/&gt;</demo-highlight>
    <tc:in id="i5" label="Input (focus)" focus="true" value="Some Text"/>
  </tc:section>

  <tc:section label="Required">
    <p>An input field can be set as required with the <code>required</code> attribute.
      Such an input field must contain a value, otherwise a submit is not possible.
      Leave the field blank and press 'submit' to see the error message.</p>
    <demo-highlight language="markup">&lt;tc:in label="Input (required)" required="true"/></demo-highlight>
    <tc:in id="ireq" label="Input (required)" required="true" value="#{inController.requiredValue}"/>
    <tc:button label="Submit"/>
  </tc:section>

  <tc:section label="Help">
    <p>A help text can be added with the <code>help</code> attribute.</p>
    <demo-highlight language="markup">&lt;tc:in help="\#{inController.helpText}"/></demo-highlight>
    <tc:in help="#{inController.helpText}"/>
  </tc:section>

  <tc:section label="Password">
    <p>To create an input field for passwords, set the
      <code>password</code> attribute to 'true'. It will hide the text as shown in the following example.</p>
    <demo-highlight language="markup" id="c3">&lt;tc:in label="Password" password="true" value="password"/&gt;</demo-highlight>
    <tc:in id="i6" label="Password" password="true" value="password"/>
  </tc:section>

  <tc:section label="Placeholder">
    <p>A <code>placeholder</code> attribute can be used for explaining a user the meaning of a field.</p>
    <p>The text of the placeholder is only shown if the value is an empty string.</p>
    <demo-highlight language="markup">&lt;tc:in label="Placeholder" placeholder="Grey Text"/&gt;</demo-highlight>
    <tc:in id="i7" label="Placeholder" placeholder="Short description of the field." />
  </tc:section>

  <tc:section label="Autocomplete">
    <p>The <code>autocomplete</code> attribute can be used for explaining a user the meaning of a field.</p>

    <tc:in id="a1" label="on" autocomplete="true" />
    <tc:in id="a2" label="off" autocomplete="false" />
    <tc:in id="a3" label="name" autocomplete="name" />

    The values are documented in
    <tc:link label="MDN" image="bi-box-arrow-up-right"
             link="https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete#values"/>.
  </tc:section>

  <tc:section label="Ajax">
    <p>The output field in this example, displays the given value on the server.
      With <code class="language-markup">&lt;f:ajax render="outputAjax" listener="\#{inController.update}"/></code>,
      the output field will be rerendered, after the value has been changed.
      This is because <code>outputAjax</code> is the id of the <code>&lt;tc:out/></code> tag.
      and the default event for <code class="language-markup">&lt;tc:in/></code> is <code>change</code>.

      Additional, the <code>listener</code> attribute is set. The given method is called after the input field
      loose focus.</p>
    <tc:in id="inputAjax" label="On Change" value="#{inController.changeValue}">
      <f:facet name="before">AJAX</f:facet>
      <f:facet name="after">on change</f:facet>
      <f:ajax render="outputAjax" listener="#{inController.update}"/>
    </tc:in>
    <tc:out id="outputAjax" label="On Server" value="#{inController.changeValue}"/>
  </tc:section>
</ui:composition>
