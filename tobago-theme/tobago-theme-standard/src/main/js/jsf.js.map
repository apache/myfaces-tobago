{"version":3,"sources":["webpack://jsf.js_next_gen/./src/main/typescript/api/Jsf.ts","webpack://jsf.js_next_gen/./src/main/typescript/ext/monadish/DomQuery.ts","webpack://jsf.js_next_gen/./src/main/typescript/ext/monadish/Lang.ts","webpack://jsf.js_next_gen/./src/main/typescript/ext/monadish/Monad.ts","webpack://jsf.js_next_gen/./src/main/typescript/ext/monadish/SourcesCollectors.ts","webpack://jsf.js_next_gen/./src/main/typescript/ext/monadish/Stream.ts","webpack://jsf.js_next_gen/./src/main/typescript/ext/monadish/XmlQuery.ts","webpack://jsf.js_next_gen/./src/main/typescript/ext/monadish/index.ts","webpack://jsf.js_next_gen/./src/main/typescript/impl/AjaxImpl.ts","webpack://jsf.js_next_gen/./src/main/typescript/impl/PushImpl.ts","webpack://jsf.js_next_gen/./src/main/typescript/impl/core/Const.ts","webpack://jsf.js_next_gen/./src/main/typescript/impl/core/ImplTypes.ts","webpack://jsf.js_next_gen/./src/main/typescript/impl/i18n/Messages.ts","webpack://jsf.js_next_gen/./src/main/typescript/impl/util/Assertions.ts","webpack://jsf.js_next_gen/./src/main/typescript/impl/util/AsyncQueue.ts","webpack://jsf.js_next_gen/./src/main/typescript/impl/util/ExtDomQuery.ts","webpack://jsf.js_next_gen/./src/main/typescript/impl/util/Lang.ts","webpack://jsf.js_next_gen/./src/main/typescript/impl/xhrCore/ErrorData.ts","webpack://jsf.js_next_gen/./src/main/typescript/impl/xhrCore/EventData.ts","webpack://jsf.js_next_gen/./src/main/typescript/impl/xhrCore/RequestDataResolver.ts","webpack://jsf.js_next_gen/./src/main/typescript/impl/xhrCore/ResonseDataResolver.ts","webpack://jsf.js_next_gen/./src/main/typescript/impl/xhrCore/Response.ts","webpack://jsf.js_next_gen/./src/main/typescript/impl/xhrCore/ResponseProcessor.ts","webpack://jsf.js_next_gen/./src/main/typescript/impl/xhrCore/XhrFormData.ts","webpack://jsf.js_next_gen/./src/main/typescript/impl/xhrCore/XhrRequest.ts","webpack://jsf.js_next_gen/webpack/bootstrap","webpack://jsf.js_next_gen/webpack/startup"],"names":["jsf","push","ajax","specversion","implversion","separatorchar","Implementation","getSeparatorChar","getProjectStage","getViewState","formElement","getClientWindow","rootNode","request","element","event","options","response","context","addOnError","errorFunc","addOnEvent","eventFunc","util","chain","source","funcs","init","socketClientId","uri","channel","onopen","onmessage","onclose","behaviorScripts","autoconnect","PushImpl","open","close","myfaces","ab","eventName","execute","render","Submittables","trim","Lang","objToArray","isString","equalsIgnoreCase","name","defaultVal","val","this","get","orElse","values","length","getAttribute","value","cnt","setAttribute","getClass","ElementAttribute","fromNullable","valueKey","ValueEmbedder","DEFAULT_JSF_WHITELIST","src","indexOf","pos","_limits","Optional","isAbsent","foundElement","DomQuery","querySelectorAll","getAsElem","allElems","getIf","isTag","tagName","nodeName","toLowerCase","isPresent","absent","Stream","of","allMatch","el","checked","newChecked","eachElem","querySelectorAllDeep","queryStr","found","queryRes","shadowRoots","shadowRoot","shadowRes","attr","disabled","removeAttribute","item","childNodeArr","concat","childNodes","asArray","LazyStream","filter","map","byId","collect","ArrayCollector","selector","document","_querySelectorAllDeep","_querySelectorAll","deep","byIdDeep","byTagName","globalEval","code","nonce","fromMarkup","markup","doc","implementation","createHTMLDocument","lowerMarkup","documentElement","innerHTML","startsWithTag","str","tag1","join","tag2","dummyPlaceHolder","createElement","html","detach","index","defaults","filesFromElem","files","presentRunnable","call","ifPresentLazy","delete","node","parentNode","removeChild","nodes","res","foundNodes","selectors","split","cnt2","levelSelector","id","includeRoot","subItems","reduce","reduction","defaultValue","hasClass","clazz","hasIt","classList","contains","addClass","add","removeClass","remove","isMultipartCandidate","stream","firstElem","isCandidate","first","inval","innerHtml","dispatchEvent","evt","elem","retArr","inVal","_mozMatchesSelector","toMatch","prot","matchesSelector","mozMatchesSelector","msMatchesSelector","oMatchesSelector","webkitMatchesSelector","s","matches","window","ownerDocument","i","filterSelector","matched","selectorStage","nodeSelector","func","len","each","reArr","head","getElementsByTagName","script","type","newScriptElement","appendChild","appendTo","orElseLazy","theItem","loadScriptEval","defer","charSet","xhr","XMLHttpRequest","setRequestHeader","send","onload","responseData","setTimeout","responseText","replace","onerror","data","Error","insertAfter","existingItem","existingElement","nextSibling","toInsertParams","insertElem","insertBefore","elseValue","parents","retSet","Set","lowerTagName","resolveItem","has","host","copyAttrs","sourceItem","sourceNode","attributes","resolveAttributeHolder","attrName","ret","outerHTML","runEmbeddedScripts","runEmbeddedCss","focusElementId","activeElement","caretPosition","getCaretPosition","toReplace","firstInsert","replaced","replaceChild","insertAdditionalItems","slice","runScripts","runCss","focusElement","setCaretPosition","whilteListed","finalScripts","equi","execScrpt","itemType","evalText","text","innerText","go","substring","flatMap","sort","node1","node2","compareDocumentPosition","e","console","error","message","description","applyStyle","style","newSS","styleSheet","sheet","cssText","createTextNode","forEach","child","execCss","click","fireEvent","addEventListener","listener","removeEventListener","nodeType","eventClass","createEvent","initEvent","synthetic","createEventObject","textContent","joinstr","text1","text2","encodeFormElement","toMerge","Config","target","shallowCopy","elemType","selectElem","selectedIndex","uLen","u","selected","elementOption","append","SELECT","BUTTON","RESET","SUBMIT","IMAGE","CHECKBOX","RADIO","inputValue","lazyStream","reduced","subNodes","from","to","Math","min","limits","end","hasNext","isLimitsReached","isEndOfArray","next","reset","attachShadow","params","mode","shadowElement","mapped","hasShadow","ctrl","caretPos","selection","focus","createRange","moveStart","setSelectiongRange","DomQueryCollector","DQ","ws","test","charAt","it","arguments","String","saveResolve","resolverProducer","result","saveResolveLazy","strToArray","splitter","obj","offset","pack","Array","prototype","destination","finalDest","assertType","probe","theType","isFunc","Function","objAssign","TypeError","Object","assign","theArgs","nextSource","nextKey","hasOwnProperty","_value","fn","Monad","currentPos","key","currKey","keyVal","arrPos","arrayIndex","getIfPresent","match","toJson","JSON","stringify","start","parseInt","resolve","resolver","rootElem","newVal","alternative","ConfigEntry","root","ofAssoc","AssocArrayCollector","shallowMerge","other","overwrite","withAppend","isArray","noKeys","keys","lastKey","pathExists","buildPath","finalKeyArrPos","retVal","apply","appendIf","condition","assignIf","setVal","parentVal","parentPos","alloc","arr","length1","length2","tempVal","dataPos","ArrayStreamDataSource","filterFunc","parent","filteredNext","inputDataSource","FilteredStreamDatasource","mapFunc","MappedStreamDataSource","resolveCurrentNext","resolveNextNext","activeDataSource","FlatMapStreamDataSource","finalValue","FormData","FormDataCollector","QueryFormDataCollector","formData","item1","item2","QueryFormStringCollector","ofDataSource","dataSource","onElem","strmR","startVal","val1","last","anyMatch","noneMatch","comparator","newArr","collector","ofStreamDataSource","isOverLimits","nextFilter","max","t","stop","value1","value2","el1","el2","docType","xml","DOMParser","parser","ActiveXObject","async","parseFromString","contentType","loadXML","isXMLParserError","toString","serialized","XMLSerializer","constructor","serializeToString","parserErrorText","parseXML","txt","XMLQuery","parseHTML","fromString","parseType","XQ","ProjectStages","BlockFilter","getMessage","ExtLang","getGlobalConfig","assert","Assertions","eventQueue","errorQueue","resolveProjectStateFromURL","foundStage","ExtDomquery","searchJsfJsFor","sendError","errorData","localHandler","errorCallback","alert","displayError","remapDefaultConstants","targetConfig","targetKey","userValues","issuingForm","issuingElementId","iterValues","processed","IDENT_NONE","IDENT_ALL","IDENT_FORM","IDENT_THIS","resolveGlobalConfig","MYFACES","config","requestQueue","separator","projectStage","resolveAndExecute","sourceCode","opts","mappedOpts","resolveDefaults","resolvedEvent","elementId","requestCtx","internalCtx","windowId","isResetValues","assertRequestIntegrity","P_WINDOW_ID","CTX_PARAM_PASS_THR","P_EVT","SOURCE","ON_EVENT","onevent","ON_ERROR","requestOptions","targetContext","sourceElementId","form","resolveForm","P_PARTIAL_SOURCE","P_AJAX","P_RESET_VALUES","CTX_PARAM_SRC_FRM_ID","CTX_PARAM_SRC_CTL_ID","CTX_PARAM_TR_TYPE","REQ_TYPE_POST","clientWindow","P_CLIENT_WINDOW","assignClientWindowId","CTX_PARAM_EXECUTE","P_EXECUTE","RENDER","P_RENDER","assignRender","delay","resolveDelay","timeout","resolveTimeout","queueHandler","addRequestToQueue","Response","processResponse","errorListener","eventListener","sendEvent","stdErrorHandler","exception","clearRequestQueue","ErrorData","fromClient","cleanup","ALTERED","INIT","formWindowId","body","TAG_FORM","XhrFormData","reqCtx","respPassThr","AsynchronouseQueue","enqueue","XhrRequest","URL_PROTOCOL","location","protocol","sockets","components","clientIdsByTokens","resolveFunction","WebSocket","channelToken","substr","Socket","url","base","hostname","port","getBaseURL","getSocket","reconnectAttempts","socket","readyState","bindCallbacks","clientIds","onmmessage","parse","getElementById","functions","j","splice","reason","REASON_EXPIRED","MAX_RECONNECT_ATTEMPTS","RECONNECT_INTERVAL","PARTIAL_ID","P_VIEWSTATE","P_VIEWROOT","P_VIEWHEAD","P_VIEWBODY","EMPTY_FUNC","freeze","EMPTY_STR","EMPTY_MAP","HTML_VIEWSTATE","WINDOW_ID","ERROR","EVENT","BEGIN","COMPLETE","SUCCESS","STATUS","ERROR_NAME","ERROR_MESSAGE","RESPONSE_TEXT","RESPONSE_XML","HTTPERROR","EMPTY_RESPONSE","MALFORMEDXML","SERVER_ERROR","CLIENT_ERROR","TIMEOUT_EVENT","CTX_PARAM_MF_INTERNAL","CTX_PARAM_DELAY","CTX_PARAM_TIMEOUT","CTX_PARAM_RST","STAGE_DEVELOPMENT","CONTENT_TYPE","HEAD_FACES_REQ","REQ_ACCEPT","VAL_AJAX","ENCODED_URL","REQ_TYPE_GET","STATE_EVT_BEGIN","STATE_EVT_TIMEOUT","STATE_EVT_COMPLETE","URL_ENCODED","MULTIPART","NO_TIMEOUT","STD_ACCEPT","TAG_HEAD","TAG_BODY","TAG_BEFORE","TAG_AFTER","TAG_ATTR","SEL_VIEWSTATE_ELEM","SEL_CLIENT_WINDOW_ELEM","SEL_RESPONSE_XML","PHASE_PROCESS_RESPONSE","ERR_NO_PARTIAL_RESPONSE","ATTR_URL","ATTR_NAME","ATTR_VALUE","ATTR_ID","RESP_PARTIAL","CMD_CHANGES","CMD_UPDATE","CMD_DELETE","CMD_INSERT","CMD_EVAL","CMD_ERROR","CMD_ATTRIBUTES","CMD_EXTENSION","CMD_REDIRECT","UPDATE_FORMS","UPDATE_ELEMS","SEL_SCRIPTS_STYLES","MF_NONE","APPLIED_VST","APPLIED_CLIENT_WINDOW","UNKNOWN","viewStatePos","nameSpace","StateHolder","Messages","MSG_TEST","MSG_DEV_MODE","MSG_AFFECTED_CLASS","MSG_AFFECTED_METHOD","MSG_ERROR_NAME","MSG_ERROR_MESSAGE","MSG_SERVER_ERROR_NAME","MSG_ERROR_DESC","MSG_ERROR_NO","MSG_ERROR_LINENO","ERR_FORM","ERR_VIEWSTATE","ERR_TRANSPORT","ERR_EVT_PASS","ERR_CONSTRUCT","ERR_MALFORMEDXML","ERR_SOURCE_FUNC","ERR_EV_OR_UNKNOWN","ERR_SOURCE_NOSTR","ERR_SOURCE_DEF_NULL","ERR_MUST_STRING","ERR_REF_OR_ID","ERR_PARAM_GENERIC","ERR_PARAM_STR","ERR_PARAM_STR_RE","ERR_PARAM_MIXMAPS","ERR_MUST_BE_PROVIDED","ERR_MUST_BE_PROVIDED1","ERR_REPLACE_EL","ERR_EMPTY_RESPONSE","ERR_ITEM_ID_NOTFOUND","ERR_PPR_IDREQ","ERR_PPR_INSERTBEFID","ERR_PPR_INSERTBEFID_1","ERR_PPR_INSERTBEFID_2","ERR_PPR_DELID","ERR_PPR_UNKNOWNCID","ERR_NO_VIEWROOTATTR","ERR_NO_HEADATTR","ERR_RED_URL","ERR_REQ_FAILED_UNKNOWN","ERR_REQU_FAILED","makeException","msg","caller","title","raiseError","assertFunction","assertUrlExists","assertValidXMLResponse","responseXML","finalTitle","finalName","finalMessage","runnableQueue","delayTimeout","clearTimeout","appendElement","dequeue","shift","currentlyRunning","runEntry","isEmpty","catch","then","callForNextElementToProcess","cancel","fetchWindowIdFromURL","href","results","RegExp","exec","curScript","currentScript","nonceScript","rexp","search","decodeURIComponent","ExtDQ","installedLocale","defaultMessage","templateParams","param","callerCls","callFunc","getLanguage","language","navigator","languages","failSaveResolve","failSaveExecute","keyValToStr","delimiter","configName","getForm","queryElem","eventTarget","getEventTarget","formId","foundForm","assertFormExists","getLocalOrGlobalConfig","localOptions","ErrorType","errorName","errorMessage","responseCode","status","typeDetails","serverErrorName","serverErrorMessage","stack","fromHttpConnection","HTTP_ERROR","fromGeneric","errorCode","errorType","getMsg","fromServerError","EventData","createFromRequest","eventData","sourceId","resolveWindowId","requestContext","responseContext","funcName","srcFormElement","elements","action","sourceForm","ajaxType","resolveTargetUrl","configId","getCfg","finalEvent","srcElement","deepCopy","resetValues","externalContext","internalContext","elemId","resolveSourceElementId","sourceFormId","forms","req","resolveContexts","resolveResponseXML","responseProcessor","ResponseProcessor","SEL_SUB_TAGS","redirect","ALLOWED_TAGS","processViewState","processClientWindow","storeState","cdataBlock","cDATAAsString","replaceViewRoot","replaceHead","replaceBody","update","handleElementUpdate","processUpdateTag","eval","insertWithSubtags","insert","processInsert","processChangesTag","processPartialTag","fixViewStates","fixClientWindow","done","shadowDocument","shadowHead","storeForEval","shadowBody","shadowInnerHTML","resultingBody","updateForms","storeForPostProcessing","mergedErrorData","hasResponseXML","redirectUrl","before","after","insertNodes","insertId","isViewStateNode","state","isClientWindowNode","updateElems","affectedForms","affectedForms2","appendViewStateToForms","appendClientWindowToForms","eventHandler","viewState","assignState","newViewStateElement","newViewState","toBeEvaled","storeForUpdate","separatorChar","partialIdsArray","encode","fileInputs","assignEncodedString","handleFormSource","applyFileInputs","fetchInput","getFileInputs","inputExists","applyInput","resolveSubmitIdentifier","executes","rootElment","encodeSubmittableFields","applyViewState","encoded","keyValueEntries","assignString","line","toFormData","identifier","defaultStr","encodeURIComponent","targetBuf","parentItem","partialIds","toEncode","deepElements","xhrObject","stopProgress","catchFuncs","thenFunc","registerXhrCallbacks","reject","ignoreErr","isMultipartRequest","passThroughParams","resolveFinalUrl","sendRequest","handleError","abort","inputVal","catchFunc","finally","onabort","onAbort","ontimeout","onTimeout","onSuccess","onloadend","onDone","onError","handleMalFormedXML","evtType","resolveHandlerFunc","isPost","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__"],"mappings":"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","file":"jsf.js","sourcesContent":["/* Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n///<reference types='../../types/typedefs'/>\n\nimport {Implementation} from \"../impl/AjaxImpl\";\nimport {PushImpl} from \"../impl/PushImpl\";\n\ndeclare type Context = { [key: string]: any };\n\nexport module jsf {\n    \"use strict\";\n\n    /*\n     * Version of the implementation for the jsf.js.\n     * <p />\n     * as specified within the jsf specifications jsf.html:\n     * <ul>\n     * <li>left two digits major release number</li>\n     * <li>middle two digits minor spec release number</li>\n     * <li>right two digits bug release number</li>\n     * </ul>\n     * @constant\n     */\n    export var specversion = 220000;\n    /**\n     * Implementation version as specified within the jsf specification.\n     * <p />\n     * A number increased with every implementation version\n     * and reset by moving to a new spec release number\n     *\n     * @constant\n     */\n    export var implversion = 0;\n\n    /**\n     * SeparatorChar as defined by UINamingContainer.getNamingContainerSeparatorChar()\n     * @type {Char}\n     */\n    export var separatorchar = getSeparatorChar();\n\n    /**\n     * This method is responsible for the return of a given project stage as defined\n     * by the jsf specification.\n     * <p/>\n     * Valid return values are:\n     * <ul>\n     *     <li>&quot;Production&quot;</li>\n     *     <li>&quot;Development&quot;</li>\n     *     <li>&quot;SystemTest&quot;</li>\n     *     <li>&quot;UnitTest&quot;</li>\n     * </li>\n     *\n     * @return {String} the current project state emitted by the server side method:\n     * <i>javax.faces.application.Application.getProjectStage()</i>\n     */\n    export function getProjectStage(): string {\n        return Implementation.getProjectStage();\n    }\n\n    /**\n     * collect and encode data for a given form element (must be of type form)\n     * find the javax.faces.ViewState element and encode its value as well!\n     * return a concatenated string of the encoded values!\n     *\n     * @throws an exception in case of the given element not being of type form!\n     * https://issues.apache.org/jira/browse/MYFACES-2110\n     */\n    export function getViewState(formElement: Element | string): string {\n        return Implementation.getViewState(formElement);\n    }\n\n    /**\n     * returns the window identifier for the given node / window\n     * @return the window identifier or null if none is found\n     * @param rootNode\n     */\n    export function getClientWindow(rootNode?: Element | string): string {\n        return Implementation.getClientWindow(rootNode);\n    }\n\n    //private helper functions\n    function getSeparatorChar() {\n        return Implementation.getSeparatorChar();\n    }\n\n\n    export module ajax {\n        \"use strict\";\n\n        /**\n         * this function has to send the ajax requests\n         *\n         * following requestInternal conditions must be met:\n         * <ul>\n         *  <li> the requestInternal must be sent asynchronously! </li>\n         *  <li> the requestInternal must be a POST!!! requestInternal </li>\n         *  <li> the requestInternal url must be the form action attribute </li>\n         *  <li> all requests must be queued with a client side requestInternal queue to ensure the requestInternal ordering!</li>\n         * </ul>\n         *\n         * @param {String|Node} element: any dom element no matter being it html or jsf, from which the event is emitted\n         * @param {EVENT} event: any javascript event supported by that object\n         * @param {Map} options : map of options being pushed into the ajax cycle\n         */\n        export function request(element: Element, event?: Event, options?: Context) {\n            Implementation.request(element, event, options)\n            //Implementation.getInstance().requestInternal(element, event, options);\n        }\n\n        /**\n         * response handler\n         * @param request the request object having triggered this response\n         * @param context the request context\n         *\n         * TODO add info on what can be in the context\n         */\n        export function response(request: XMLHttpRequest, context?: Context) {\n            Implementation.response(request, context);\n        }\n\n        /**\n         * Adds an error handler to our global error queue.\n         * the error handler must be of the format <i>function errorListener(&lt;errorData&gt;)</i>\n         * with errorData being of following format:\n         * <ul>\n         *     <li> errorData.type : &quot;error&quot;</li>\n         *     <li> errorData.status : the error status message</li>\n         *     <li> errorData.serverErrorName : the server error name in case of a server error</li>\n         *     <li> errorData.serverErrorMessage : the server error message in case of a server error</li>\n         *     <li> errorData.source  : the issuing source element which triggered the requestInternal </li>\n         *     <li> eventData.responseCode: the response code (aka http requestInternal response code, 401 etc...) </li>\n         *     <li> eventData.responseText: the requestInternal response text </li>\n         *     <li> eventData.responseXML: the requestInternal response xml </li>\n         * </ul>\n         *\n         * @param {function} errorListener error handler must be of the format <i>function errorListener(&lt;errorData&gt;)</i>\n         */\n        export function addOnError(errorFunc: (data: ErrorData) => void) {\n            Implementation.addOnError(<any>errorFunc);\n        }\n\n        /**\n         * Adds a global event listener to the ajax event queue. The event listener must be a function\n         * of following format: <i>function eventListener(&lt;eventData&gt;)</i>\n         *\n         * @param {function} eventListener event must be of the format <i>function eventListener(&lt;eventData&gt;)</i>\n         */\n        export function addOnEvent(eventFunc: (data: EventData) => void) {\n            Implementation.addOnEvent(<any>eventFunc);\n        }\n    }\n\n    export module util {\n\n        /**\n         * varargs function which executes a chain of code (functions or any other code)\n         *\n         * if any of the code returns false, the execution\n         * is terminated prematurely skipping the rest of the code!\n         *\n         * @param {DomNode} source, the callee object\n         * @param {Event} event, the event object of the callee event triggering this function\n         * @param funcs ... arbitrary array of functions or strings\n         * @returns true if the chain has succeeded false otherwise\n         */\n        export function chain(source, event, ...funcs: Array<Function | string>): boolean {\n            return Implementation.chain(source, event, ...funcs);\n        }\n    }\n\n    export module push {\n        /**\n         * @param {function} onopen The function to be invoked when the web socket is opened.\n         * @param {function} onmessage The function to be invoked when a message is received.\n         * @param {function} onclose The function to be invoked when the web socket is closed.\n         * @param {boolean} autoconnect Whether or not to immediately open the socket. Defaults to <code>false</code>.\n         */\n        export function init(socketClientId: string,\n                    uri: string,\n                    channel: string,\n                    onopen: Function,\n                    onmessage: Function,\n                    onclose: Function,\n                    behaviorScripts: any,\n                    autoconnect: boolean) {\n            PushImpl.init(socketClientId, uri, channel, onopen, onmessage, onclose, behaviorScripts, autoconnect);\n        }\n\n        /**\n         * Open the web socket on the given channel.\n         * @param {string} channel The name of the web socket channel.\n         * @throws {Error} When channel is unknown.\n         */\n        export function open(socketClientId: string) {\n            PushImpl.open(socketClientId);\n        }\n\n        /**\n         * Close the web socket on the given channel.\n         * @param {string} channel The name of the web socket channel.\n         * @throws {Error} When channel is unknown.\n         */\n        export function close(socketClientId: string) {\n            PushImpl.close(socketClientId);\n        }\n\n    }\n\n    //We hook the old namespace system into our npm system\n    //if (\"undefined\" == window.jsf) {\n    //    window.jsf = jsf;\n    //}\n\n\n}\n\n\n\n//fullfill the window contract\nexport module myfaces {\n\n    /**\n     * AB function similar to mojarra and Primefaces\n     * not part of the spec but a convenience accessor method\n     * Code provided by Thomas Andraschko\n     *\n     * @param source the event source\n     * @param event the event\n     * @param eventName event name for java.javax.faces.behavior.evemnt\n     * @param execute execute list as passed down in jsf.ajax.request\n     * @param render\n     * @param options\n     */\n    export function ab(source: Element, event: Event, eventName: string, execute: string, render: string, options: Context = {}) {\n        if (eventName) {\n            options[\"javax.faces.behavior.event\"] = eventName;\n        }\n        if (execute) {\n            options[\"execute\"] = execute;\n        }\n        if (render) {\n            options[\"render\"] = render;\n        }\n\n        jsf.ajax.request(source, event, options);\n    }\n}\n\n\n","/* Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Config, Optional, ValueEmbedder} from \"./Monad\";\nimport {XMLQuery} from \"./XmlQuery\";\nimport {IStream, LazyStream, Stream} from \"./Stream\";\nimport {ArrayCollector, ICollector, IStreamDataSource} from \"./SourcesCollectors\";\nimport {Lang} from \"./Lang\";\nimport trim = Lang.trim;\nimport objToArray = Lang.objToArray;\nimport isString = Lang.isString;\nimport equalsIgnoreCase = Lang.equalsIgnoreCase;\n\n\n/**\n *\n *        // - submit checkboxes and radio inputs only if checked\n if ((tagName != \"select\" && elemType != \"button\"\n && elemType != \"reset\" && elemType != \"submit\" && elemType != \"image\")\n && ((elemType != \"checkbox\" && elemType != \"radio\"\n */\n\nenum Submittables {\n    SELECT = \"select\",\n    BUTTON = \"button\",\n    SUBMIT = \"submit\",\n    RESET = \"reset\",\n    IMAGE = \"image\",\n    RADIO = \"radio\",\n    CHECKBOX = \"checkbox\"\n\n}\n\n// @ts-ignore supression needed here due to fromnullable\nexport class ElementAttribute extends ValueEmbedder<string> {\n\n    constructor(private element: DomQuery, private name: string, private defaultVal: string = null) {\n        super(element, name);\n    }\n\n    get value(): string {\n        let val: Element[] = this.element.get(0).orElse(...[]).values;\n        if (!val.length) {\n            return this.defaultVal;\n        }\n        return val[0].getAttribute(this.name);\n    }\n\n    set value(value: string) {\n        let val: Element[] = this.element.get(0).orElse(...[]).values;\n        for (let cnt = 0; cnt < val.length; cnt++) {\n            val[cnt].setAttribute(this.name, value);\n        }\n        val[0].setAttribute(this.name, value);\n    }\n\n    protected getClass(): any {\n        return ElementAttribute;\n    }\n\n    static fromNullable(value?: any, valueKey: string = \"value\"): ElementAttribute {\n        return new ElementAttribute(value, valueKey);\n    }\n\n}\n\n/**\n * small helper for the specialized jsf case\n * @param src\n * @constructor\n */\nconst DEFAULT_JSF_WHITELIST = (src: string) => {\n    return (src.indexOf(\"ln=scripts\") == -1 &&\n        src.indexOf(\"ln=javax.faces\") == -1) ||\n        (src.indexOf(\"/jsf.js\") == -1 &&\n            src.indexOf(\"/jsf-uncompressed.js\") == -1);\n};\n\ninterface IDomQuery {\n    /**\n     * reads the first element if it exists and returns an optional\n     */\n    readonly value: Optional<Element>;\n    /**\n     * All elements as array\n     */\n    readonly values: Element[];\n    /**\n     * returns the id as settable value (See also ValueEmbedder)\n     */\n    readonly id: ValueEmbedder<string>;\n    /**\n     * returns the length of embedded nodes (top level)\n     */\n    readonly length: number;\n    /**\n     * the tag name of the first element\n     */\n    readonly tagName: Optional<string>;\n    /**\n     * the node name of the first element\n     */\n    readonly nodeName: Optional<string>;\n    /**\n     * the type of the first element\n     */\n    readonly type: Optional<string>;\n    /**\n     * The name as changeable value\n     */\n    readonly name: ValueEmbedder<string>;\n    /**\n     * The the value in case of inputs as changeable value\n     */\n    readonly inputValue: ValueEmbedder<string | boolean>;\n    /**\n     * the underlying form elements as domquery object\n     */\n    readonly elements: DomQuery;\n    /**\n     * settable flag for disabled\n     */\n    disabled: boolean;\n    /**\n     * The child nodes of this node collection as readonly attribute\n     */\n    readonly childNodes: DomQuery;\n    /**\n     * an early stream representation for this DomQuery\n     */\n    readonly stream: Stream<DomQuery>;\n    /**\n     * lazy stream representation for this DomQuery\n     */\n    readonly lazyStream: LazyStream<DomQuery>;\n    /**\n     * transform this node collection to an array\n     */\n    readonly asArray: Array<DomQuery>;\n\n    /**\n     * returns true if the elements have the tag *tagName* as tag embedded (highest level)\n     * @param tagName\n     */\n    isTag(tagName: string): boolean;\n\n    /**\n     * returns the nth element as domquery\n     * from the internal elements\n     * note if you try to reach a non existing element position\n     * you will get back an absent entry\n     *\n     * @param index the nth index\n     */\n    get(index: number): DomQuery;\n\n    /**\n     * returns the nth element as optional of an Element object\n     * @param index the number from the index\n     * @param defaults the default value if the index is overrun default Optional.absent\n     */\n    getAsElem(index: number, defaults: Optional<any>): Optional<Element>;\n\n    /**\n     * returns the value array< of all elements\n     */\n    allElems(): Array<Element>;\n\n    /**\n     * absent no values reached?\n     */\n    isAbsent(): boolean;\n\n    /**\n     * should make the code clearer\n     * note if you pass a function\n     * this refers to the active dopmquery object\n     */\n    isPresent(presentRunnable ?: (elem ?: DomQuery) => void): boolean;\n\n    /**\n     * should make the code clearer\n     * note if you pass a function\n     * this refers to the active dopmquery object\n     *\n     *\n     * @param presentRunnable\n     */\n    ifPresentLazy(presentRunnable: (elem ?: DomQuery) => void): DomQuery;\n\n    /**\n     * remove all affected nodes from this query object from the dom tree\n     */\n    delete(): void;\n\n    /**\n     * query selector all on the existing dom query object\n     *\n     * @param selector the standard selector\n     * @return a DomQuery with the results\n     */\n    querySelectorAll(selector): DomQuery;\n\n    /**\n     * core byId method\n     * @param id the id to search for\n     * @param includeRoot also match the root element?\n     */\n    byId(id: string, includeRoot?: boolean): DomQuery;\n\n    /**\n     * same as byId just for the tag name\n     * @param tagName\n     * @param includeRoot\n     */\n    byTagName(tagName: string, includeRoot ?: boolean): DomQuery;\n\n    /**\n     * attr accessor, usage myQuery.attr(\"class\").value = \"bla\"\n     * or let value myQuery.attr(\"class\").value\n     * @param attr the attribute to set\n     * @param defaultValue the default value in case nothing is presented (defaults to null)\n     */\n    attr(attr: string, defaultValue: string): ElementAttribute;\n\n    /**\n     * hasclass, checks for an existing class in the class attributes\n     *\n     * @param clazz the class to search for\n     */\n    hasClass(clazz: string): boolean;\n\n    /**\n     * appends a class string if not already in the element(s)\n     *\n     * @param clazz the style class to append\n     */\n    addClass(clazz: string): DomQuery;\n\n    /**\n     * remove the style class if in the class definitions\n     *\n     * @param clazz\n     */\n    removeClass(clazz: string): DomQuery;\n\n    /**\n     * checks whether we have a multipart element in our children\n     */\n    isMultipartCandidate(): boolean;\n\n    /**\n     * innerHtml equivalkent\n     * equivalent to jqueries html\n     * as setter the html is set and the\n     * DomQuery is given back\n     * as getter the html string is returned\n     *\n     * @param inval\n     */\n    html(inval?: string): DomQuery | Optional<string>;\n\n    /**\n     * dispatch event on all children\n     * just a delegated dispatchevent from the standard\n     * dom working on all queried elements in the monad level\n     *\n     * @param evt the event to be dispatched\n     */\n    dispatchEvent(evt: Event): DomQuery;\n\n    /**\n     * easy node traversal, you can pass\n     * a set of node selectors which are joined as direct childs\n     *\n     * not the rootnodes are not in the getIf, those are always the child nodes\n     *\n     * @param nodeSelector\n     */\n    getIf(...nodeSelector: Array<string>): DomQuery;\n\n    /**\n     * iterate over each element and perform something on the element\n     * (Dom element is passed instead of DomQuery)\n     * @param func\n     */\n    eachElem(func: (item: Element, cnt?: number) => any): DomQuery;\n\n    /**\n     * perform an operation on the first element\n     * returns a DomQuery on the first element only\n     * @param func\n     */\n    firstElem(func: (item: Element, cnt?: number) => any): DomQuery;\n\n    /**\n     * same as eachElem, but a DomQuery object is passed down\n     *\n     * @param func\n     */\n    each(func: (item: DomQuery, cnt?: number) => any): DomQuery;\n\n    /**\n     * returns a new dom query containing only the first element max\n     *\n     * @param func a an optional callback function to perform an operation on the first element\n     */\n    first(func: (item: DomQuery, cnt?: number) => any): DomQuery;\n\n    /**\n     * filter function which filters a subset\n     *\n     * @param func\n     */\n    filter(func: (item: DomQuery) => boolean): DomQuery;\n\n    /**\n     * global eval head appendix method\n     * no other methods are supported anymore\n     * @param code the code to be evaled\n     * @param  nonce optional  nonce key for higher security\n     */\n    globalEval(code: string, nonce ?: string): DomQuery;\n\n    /**\n     * detaches a set of nodes from their parent elements\n     * in a browser independend manner\n     * @param {Object} items the items which need to be detached\n     * @return {Array} an array of nodes with the detached dom nodes\n     */\n    detach(): DomQuery;\n\n    /**\n     * appends the current set of elements\n     * to the element or first element passed via elem\n     * @param elem\n     */\n    appendTo(elem: DomQuery): void;\n\n    /**\n     * loads and evals a script from a source uri\n     *\n     * @param src the source to be loaded and evaled\n     * @param defer in miliseconds execution default (0 == no defer)\n     * @param charSet\n     */\n    loadScriptEval(src: string, defer: number, charSet: string): void;\n\n    /**\n     * insert toInsert after the current element\n     *\n     * @param toInsert an array of DomQuery objects\n     */\n    insertAfter(...toInsert: Array<DomQuery>): DomQuery;\n\n    /**\n     * inserts the elements before the current element\n     *\n     * @param toInsert\n     */\n    insertBefore(...toInsert: Array<DomQuery>): DomQuery;\n\n    /**\n     * in case the domquery is pointing to nothing the else value is taken into consideration\n     * als alternative\n     *\n     * @param elseValue the else value\n     */\n    orElse(...elseValue: any): DomQuery;\n\n    /**\n     * the same with lazy evaluation for cases where getting the else value\n     * is a heavy operation\n     *\n     * @param func the else provider function\n     */\n    orElseLazy(func: () => any): DomQuery;\n\n    /**\n     * all parents with TagName\n     * @param tagName\n     */\n    parents(tagName: string): DomQuery;\n\n    /**\n     * copy all attributes of sourceItem to this DomQuery items\n     *\n     * @param sourceItem the source item to copy over (can be another domquery or a parsed XML Query item)\n     */\n    copyAttrs(sourceItem: DomQuery | XMLQuery): DomQuery;\n\n    /**\n     * outerhtml convenience method\n     * browsers only support innerHTML but\n     * for instance for your jsf.js we have a full\n     * replace pattern which needs outerHTML processing\n     *\n     * @param markup\n     * @param runEmbeddedScripts\n     * @param runEmbeddedCss\n     */\n    outerHTML(markup: string, runEmbeddedScripts ?: boolean, runEmbeddedCss ?: boolean): DomQuery;\n\n    /**\n     * Run through the given nodes in the DomQuery execute the inline scripts\n     * @param whilteListed: optional whitelist function which can filter out script tags which are not processed\n     * defaults to the standard jsf.js exclusion (we use this code for myfaces)\n     */\n    runScripts(whilteListed: (val: string) => boolean): DomQuery;\n\n    /**\n     * runs the embedded css\n     */\n    runCss(): DomQuery;\n\n    /**\n     * fires a click event on the underlying dom elements\n     */\n    click(): DomQuery;\n\n    /**\n     * adds an event listener\n     *\n     * @param type\n     * @param listener\n     * @param options\n     */\n    addEventListener(type: string, listener: (evt: Event) => void, options?: boolean | EventListenerOptions): DomQuery;\n\n    /**\n     * removes an event listener\n     *\n     * @param type\n     * @param listener\n     * @param options\n     */\n    removeEventListener(type: string, listener: (evt: Event) => void, options?: boolean | EventListenerOptions): DomQuery;\n\n    /**\n     * fires an event\n     */\n    fireEvent(eventName: string): void;\n\n    /*\n     * pushes  in optionally a new textContent, and/or returns the current text content\n     */\n    textContent(joinstr?: string): string;\n\n    /*\n     * pushes  in optionally a new innerText, and/or returns the current innerText\n     */\n    innerText(joinstr?: string): string;\n\n    /**\n     * encodes all input elements properly into respective\n     * config entries, this can be used\n     * for legacy systems, for newer usecases, use the\n     * HTML5 Form class which all newer browsers provide\n     *\n     * @param toMerge optional config which can be merged in\n     * @return a copy pf\n     */\n    encodeFormElement(toMerge): Config;\n\n    /**\n     * fetches the subnodes from ... to..\n     * @param from\n     * @param to\n     */\n    subNodes(from: number, to?: number): DomQuery;\n\n\n    /**\n     * attach shadow elements\n     * 1:1 mapping from attach shadow\n     *\n     * @param modeParams\n     */\n    attachShadow(modeParams: { [key: string]: string }): DomQuery\n}\n\n/**\n * Monadic DomNode representation, ala jquery\n * This is a thin wrapper over querySelectorAll\n * to get slim monadic support\n * to reduce implementation code on the users side.\n * This is vital for frameworks which want to rely on\n * plain dom but still do not want to lose\n * the reduced code footprint of querying dom trees and traversing\n * by using functional patterns.\n *\n * Also a few convenience methods are added to reduce\n * the code footprint of standard dom processing\n * operations like eval\n *\n * TODO add jquery fallback support, since it is supported\n * in most older systems\n * Note parts of this code still stem from the Dom.js I have written 10 years\n * ago, those parts look a little bit ancient and will be replaced over time.\n *\n */\nexport class DomQuery implements IDomQuery, IStreamDataSource<DomQuery> {\n\n    static absent = new DomQuery();\n\n    private rootNode: Array<Element> = [];\n\n    pos = -1;\n\n    constructor(...rootNode: Array<Element | ShadowRoot | DomQuery | Document | Array<any> | string>) {\n\n        if (Optional.fromNullable(rootNode).isAbsent() || !rootNode.length) {\n            return;\n        } else {\n            //we need to flatten out the arrays\n\n            for (let cnt = 0; cnt < rootNode.length; cnt++) {\n                if (isString(rootNode[cnt])) {\n                    let foundElement = DomQuery.querySelectorAll(<string>rootNode[cnt]);\n                    if (!foundElement.isAbsent()) {\n                        rootNode.push(...foundElement.values)\n                    }\n                } else if (rootNode[cnt] instanceof DomQuery) {\n                    this.rootNode.push(...(<any>rootNode[cnt]).values);\n                } else {\n                    this.rootNode.push(<any>rootNode[cnt]);\n                }\n            }\n        }\n    }\n\n    /**\n     * returns the first element\n     */\n    get value(): Optional<Element> {\n        return this.getAsElem(0);\n    }\n\n    get values(): Element[] {\n        return this.allElems();\n    }\n\n    /**\n     * returns the id of the first element\n     */\n    get id(): ValueEmbedder<string> {\n        return new ElementAttribute(this.get(0), \"id\");\n    }\n\n    /**\n     * length of the entire query set\n     */\n    get length(): number {\n        return this.rootNode.length\n    }\n\n    /**\n     * convenience method for tagName\n     */\n    get tagName(): Optional<string> {\n        return <Optional<string>>this.getAsElem(0).getIf(\"tagName\");\n    }\n\n    /**\n     * convenience method for nodeName\n     */\n    get nodeName(): Optional<string> {\n        return <Optional<string>>this.getAsElem(0).getIf(\"nodeName\");\n    }\n\n    isTag(tagName: string): boolean {\n        return !this.isAbsent()\n            && (this.nodeName.orElse(\"__none___\")\n                    .value.toLowerCase() == tagName.toLowerCase()\n                || this.tagName.orElse(\"__none___\")\n                    .value.toLowerCase() == tagName.toLowerCase()\n            )\n    }\n\n    /**\n     * convenience property for type\n     *\n     * returns null in case of no type existing otherwise\n     * the type of the first element\n     */\n    get type(): Optional<string> {\n        return this.getAsElem(0).getIf(\"type\");\n    }\n\n    /**\n     * convenience property for name\n     *\n     * returns null in case of no type existing otherwise\n     * the name of the first element\n     */\n    get name(): ValueEmbedder<string> {\n        return new ValueEmbedder(this.getAsElem(0).value, \"name\");\n    }\n\n    /**\n     * convenience property for value\n     *\n     * returns null in case of no type existing otherwise\n     * the value of the first element\n     */\n    get inputValue(): ValueEmbedder<string | boolean> {\n        if (this.getAsElem(0).getIf(\"value\").isPresent()) {\n            return new ValueEmbedder<string>(this.getAsElem(0).value);\n        } else {\n            return <any>ValueEmbedder.absent;\n        }\n    }\n\n    get checked(): boolean {\n        return Stream.of(...this.values).allMatch(el => !!(<any>el).checked);\n    }\n\n    set checked(newChecked: boolean) {\n        this.eachElem(el => (<any>el).checked = newChecked);\n    }\n\n    get elements(): DomQuery {\n        //a simple querySelectorAll should suffice\n        return this.querySelectorAll(\"input, checkbox, select, textarea, fieldset\");\n    }\n\n    get deepElements(): DomQuery {\n        let elemStr = \"input, select, textarea, checkbox, fieldset\";\n        return this.querySelectorAllDeep(elemStr);\n    }\n\n    /**\n     * a deep search which treats the single isolated shadow doms\n     * separately and runs the query on earch shadow dom\n     * @param queryStr\n     */\n    querySelectorAllDeep(queryStr: string): DomQuery {\n        let found: Array<DomQuery> = [];\n        let queryRes = this.querySelectorAll(queryStr);\n        if(queryRes.length) {\n            found.push(queryRes);\n        }\n        let shadowRoots = this.querySelectorAll(\"*\").shadowRoot;\n        if(shadowRoots.length) {\n            let shadowRes = shadowRoots.querySelectorAllDeep(queryStr);\n            if(shadowRes.length) {\n                found.push(shadowRes);\n            }\n        }\n        return new DomQuery(...found);\n    }\n\n\n\n    /**\n     * todo align this api with the rest of the apis\n     */\n    get disabled(): boolean {\n        return this.attr(\"disabled\").isPresent();\n    }\n\n    set disabled(disabled: boolean) {\n        // this.attr(\"disabled\").value = disabled + \"\";\n        if (!disabled) {\n            this.removeAttribute(\"disabled\");\n        } else {\n            this.attr(\"disabled\").value = \"disabled\";\n        }\n\n    }\n\n    removeAttribute(name: string) {\n        this.eachElem(item => item.removeAttribute(name));\n    }\n\n    get childNodes(): DomQuery {\n        let childNodeArr: Array<Element> = [];\n        this.eachElem((item: Element) => {\n            childNodeArr = childNodeArr.concat(objToArray(item.childNodes));\n        });\n        return new DomQuery(...childNodeArr);\n    }\n\n    /**\n     * binding into stream\n     */\n    get stream(): Stream<DomQuery> {\n        return new Stream<DomQuery>(...this.asArray);\n    }\n\n    /**\n     * fetches a lazy stream representation\n     * lazy should be applied if you have some filters etc\n     * in between, this can reduce the number of post filter operations\n     * and ram usage\n     * significantly because the operations are done lazily and stop\n     * once they hit a dead end.\n     */\n    get lazyStream(): LazyStream<DomQuery> {\n        return LazyStream.of(...this.asArray);\n    }\n\n    get asArray(): Array<DomQuery> {\n        //filter not supported by IE11\n        return [].concat(LazyStream.of(...this.rootNode).filter(item => item != null)\n            .map(item => DomQuery.byId(item)).collect(new ArrayCollector()));\n    }\n\n    get asNodeArray(): Array<DomQuery> {\n        return [].concat(Stream.of(this.rootNode).filter(item => item != null).collect(new ArrayCollector()));\n    }\n\n\n    static querySelectorAllDeep(selector: string) {\n        return new DomQuery(document).querySelectorAllDeep(selector);\n    }\n    /**\n     * easy query selector all producer\n     *\n     * @param selector the selector\n     * @returns a results dom query object\n     */\n    static querySelectorAll(selector: string): DomQuery {\n        if (selector.indexOf(\"/shadow/\") != -1) {\n            return new DomQuery(document)._querySelectorAllDeep(selector);\n        } else {\n            return new DomQuery(document)._querySelectorAll(selector);\n        }\n\n    }\n\n    /**\n     * byId producer\n     *\n     * @param selector id\n     * @return a DomQuery containing the found elements\n     */\n    static byId(selector: string | DomQuery | Element, deep = false): DomQuery {\n        if (isString(selector)) {\n            return (!deep) ? new DomQuery(document).byId(<string>selector) : new DomQuery(document).byIdDeep(<string>selector);\n        } else {\n            return new DomQuery(<any>selector);\n        }\n    }\n\n    /**\n     * byTagName producer\n     *\n     * @param selector name\n     * @return a DomQuery containing the found elements\n     */\n    static byTagName(selector: string | DomQuery | Element): DomQuery {\n        if (isString(selector)) {\n            return new DomQuery(document).byTagName(<string>selector);\n        } else {\n            return new DomQuery(<any>selector);\n        }\n    }\n\n    static globalEval(code: string, nonce?: string): DomQuery {\n        return new DomQuery(document).globalEval(code, nonce);\n    }\n\n    /**\n     * builds the ie nodes properly in a placeholder\n     * and bypasses a non script insert bug that way\n     * @param markup the marku code\n     */\n    static fromMarkup(markup: string): DomQuery {\n\n        //https://developer.mozilla.org/de/docs/Web/API/DOMParser license creative commons\n        const doc = document.implementation.createHTMLDocument(\"\");\n        markup = trim(markup);\n        let lowerMarkup = markup.toLowerCase();\n        if (lowerMarkup.indexOf('<!doctype') != -1 ||\n            lowerMarkup.indexOf('<html') != -1 ||\n            lowerMarkup.indexOf('<head') != -1 || //TODO proper regexps here to avoid embedded tags with same element names to be triggered\n            lowerMarkup.indexOf('<body') != -1) {\n            doc.documentElement.innerHTML = markup;\n            return new DomQuery(doc.documentElement);\n        } else {\n            let startsWithTag = function (str: string, tagName: string) {\n                let tag1 = [\"<\", tagName, \">\"].join(\"\");\n                let tag2 = [\"<\", tagName, \" \"].join(\"\");\n                return (str.indexOf(tag1) == 0) || (str.indexOf(tag2) == 0);\n            };\n\n            let dummyPlaceHolder = new DomQuery(document.createElement(\"div\"));\n\n            //table needs special treatment due to the browsers auto creation\n            if (startsWithTag(lowerMarkup, \"thead\") || startsWithTag(lowerMarkup, \"tbody\")) {\n                dummyPlaceHolder.html(`<table>${markup}</table>`);\n                return dummyPlaceHolder.querySelectorAll(\"table\").get(0).childNodes.detach();\n            } else if (startsWithTag(lowerMarkup, \"tfoot\")) {\n                dummyPlaceHolder.html(`<table><thead></thead><tbody><tbody${markup}</table>`);\n                return dummyPlaceHolder.querySelectorAll(\"table\").get(2).childNodes.detach();\n            } else if (startsWithTag(lowerMarkup, \"tr\")) {\n                dummyPlaceHolder.html(`<table><tbody>${markup}</tbody></table>`);\n                return dummyPlaceHolder.querySelectorAll(\"tbody\").get(0).childNodes.detach();\n            } else if (startsWithTag(lowerMarkup, \"td\")) {\n                dummyPlaceHolder.html(`<table><tbody><tr>${markup}</tr></tbody></table>`);\n                return dummyPlaceHolder.querySelectorAll(\"tr\").get(0).childNodes.detach();\n            }\n\n            dummyPlaceHolder.html(markup);\n            return dummyPlaceHolder.childNodes.detach();\n        }\n\n    }\n\n    /**\n     * returns the nth element as domquery\n     * from the internal elements\n     * note if you try to reach a non existing element position\n     * you will get back an absent entry\n     *\n     * @param index the nth index\n     */\n    get(index: number): DomQuery {\n        return (index < this.rootNode.length) ? new DomQuery(this.rootNode[index]) : DomQuery.absent;\n    }\n\n    /**\n     * returns the nth element as optional of an Element object\n     * @param index the number from the index\n     * @param defaults the default value if the index is overrun default Optional.absent\n     */\n    getAsElem(index: number, defaults: Optional<any> = Optional.absent): Optional<Element> {\n        return (index < this.rootNode.length) ? Optional.fromNullable(this.rootNode[index]) : defaults;\n    }\n\n    /**\n     * returns the files from a given elmement\n     * @param index\n     */\n    filesFromElem(index: number): Array<any> {\n        return (index < this.rootNode.length) ? (<any>this.rootNode[index])?.files ?  (<any>this.rootNode[index]).files : [] : [];\n    }\n\n    /**\n     * returns the value array< of all elements\n     */\n    allElems(): Array<Element> {\n        return this.rootNode;\n    }\n\n    /**\n     * absent no values reached?\n     */\n    isAbsent(): boolean {\n        return this.length == 0;\n    }\n\n    /**\n     * should make the code clearer\n     * note if you pass a function\n     * this refers to the active dopmquery object\n     */\n    isPresent(presentRunnable ?: (elem ?: DomQuery) => void): boolean {\n        let absent = this.isAbsent();\n        if (!absent && presentRunnable) {\n            presentRunnable.call(this, this)\n        }\n        return !absent;\n    }\n\n    /**\n     * should make the code clearer\n     * note if you pass a function\n     * this refers to the active dopmquery object\n     *\n     *\n     * @param presentRunnable\n     */\n    ifPresentLazy(presentRunnable: (elem ?: DomQuery) => void = function () {\n    }): DomQuery {\n        this.isPresent.call(this, presentRunnable);\n        return this;\n    }\n\n    /**\n     * remove all affected nodes from this query object from the dom tree\n     */\n    delete() {\n        this.eachElem((node: Element) => {\n            if (node.parentNode) {\n                node.parentNode.removeChild(node);\n            }\n        });\n    }\n\n    querySelectorAll(selector): DomQuery {\n        //We could merge both methods, but for now this is more readable\n        if (selector.indexOf(\"/shadow/\") != -1) {\n            return this._querySelectorAllDeep(selector);\n        } else {\n            return this._querySelectorAll(selector);\n        }\n    }\n\n    /**\n     * query selector all on the existing dom queryX object\n     *\n     * @param selector the standard selector\n     * @return a DomQuery with the results\n     */\n    private _querySelectorAll(selector): DomQuery {\n        if (!this?.rootNode?.length) {\n            return this;\n        }\n        let nodes = [];\n        for (let cnt = 0; cnt < this.rootNode.length; cnt++) {\n            if (!this.rootNode[cnt]?.querySelectorAll) {\n                continue;\n            }\n            let res = this.rootNode[cnt].querySelectorAll(selector);\n            nodes = nodes.concat(objToArray(res));\n        }\n\n        return new DomQuery(...nodes);\n    }\n\n\n    /*deep with a selector and a peudo /shadow/ marker to break into the next level*/\n    private _querySelectorAllDeep(selector): DomQuery {\n        if (!this?.rootNode?.length) {\n            return this;\n        }\n\n        let nodes = [];\n        let foundNodes: DomQuery = new DomQuery(...this.rootNode);\n        let selectors = selector.split(/\\/shadow\\//);\n\n        for (let cnt2 = 0; cnt2 < selectors.length; cnt2++) {\n            if (selectors[cnt2] == \"\") {\n                continue;\n            }\n            let levelSelector = selectors[cnt2];\n            foundNodes = foundNodes.querySelectorAll(levelSelector);\n            if (cnt2 < selectors.length - 1) {\n                foundNodes = foundNodes.shadowRoot;\n            }\n        }\n\n        return foundNodes;\n    }\n\n    /**\n     * core byId method\n     * @param id the id to search for\n     * @param includeRoot also match the root element?\n     */\n    byId(id: string, includeRoot?: boolean): DomQuery {\n        let res: Array<DomQuery> = [];\n        if (includeRoot) {\n            res = res.concat(\n                LazyStream.of(...(this?.rootNode || []))\n                    .filter(item => id == item.id)\n                    .map(item => new DomQuery(item))\n                    .collect(new ArrayCollector())\n            );\n        }\n\n        //for some strange kind of reason the # selector fails\n        //on hidden elements we use the attributes match selector\n        //that works\n        res = res.concat(this.querySelectorAll(`[id=\"${id}\"]`));\n        return new DomQuery(...res);\n    }\n\n\n    byIdDeep(id: string, includeRoot?: boolean): DomQuery {\n        let res: Array<DomQuery> = [];\n        if (includeRoot) {\n            res = res.concat(\n                LazyStream.of(...(this?.rootNode || []))\n                    .filter(item => id == item.id)\n                    .map(item => new DomQuery(item))\n                    .collect(new ArrayCollector())\n            );\n        }\n\n        let subItems = this.querySelectorAllDeep(`[id=\"${id}\"]`);\n        if(subItems.length) {\n            res.push(subItems);\n        }\n\n        return new DomQuery(...res);\n    }\n\n    /**\n     * same as byId just for the tag name\n     * @param tagName\n     * @param includeRoot\n     */\n    byTagName(tagName: string, includeRoot ?: boolean, deep ?: boolean): DomQuery {\n        let res: Array<Element | DomQuery> = [];\n        if (includeRoot) {\n            res = <any> LazyStream.of(...(this?.rootNode ?? []))\n                .filter(element => element?.tagName == tagName)\n                .reduce<Array<Element | DomQuery>>((reduction: any, item: Element) => reduction.concat([item]), res)\n                .orElse(res).value;\n        }\n\n        (deep) ? res.push(this.querySelectorAllDeep(tagName)) : res.push(this.querySelectorAll(tagName));\n        return new DomQuery(...res);\n    }\n\n    /**\n     * attr accessor, usage myQuery.attr(\"class\").value = \"bla\"\n     * or let value myQuery.attr(\"class\").value\n     * @param attr the attribute to set\n     * @param defaultValue the default value in case nothing is presented (defaults to null)\n     */\n    attr(attr: string, defaultValue: string = null): ElementAttribute {\n        return new ElementAttribute(this, attr, defaultValue);\n    }\n\n    /**\n     * hasclass, checks for an existing class in the class attributes\n     *\n     * @param clazz the class to search for\n     */\n    hasClass(clazz: string) {\n        let hasIt = false;\n        this.eachElem(node => {\n            hasIt = node.classList.contains(clazz);\n            if (hasIt) {\n                return false;\n            }\n        });\n        return hasIt;\n    }\n\n    /**\n     * appends a class string if not already in the element(s)\n     *\n     * @param clazz the style class to append\n     */\n    addClass(clazz: string): DomQuery {\n        this.eachElem(item => item.classList.add(clazz))\n        return this;\n    }\n\n    /**\n     * remove the style class if in the class definitions\n     *\n     * @param clazz\n     */\n    removeClass(clazz: string): DomQuery {\n        this.eachElem(item => item.classList.remove(clazz));\n        return this;\n    }\n\n    /**\n     * checks whether we have a multipart element in our children\n     * or are one\n     */\n    isMultipartCandidate(deep = false): boolean {\n        let isCandidate = (item: DomQuery): boolean => {\n            if(item.length == 0) {\n                return false;\n            }\n            if(item.length == 1) {\n                if ((<string>item.tagName.get(\"booga\").value).toLowerCase() == \"input\" &&\n                    (<string>item.attr(\"type\")?.value || \"\").toLowerCase() == \"file\") {\n                    return true;\n                }\n                if (deep) {\n                    return this.querySelectorAllDeep(\"input[type='file']\").firstElem().isPresent();\n                } else {\n                    return this.querySelectorAll(\"input[type='file']\").firstElem().isPresent();\n                }\n            }\n            return item.isMultipartCandidate(deep);\n        };\n        let ret = this.stream.filter(item => isCandidate(item)).first().isPresent();\n\n        return ret;\n    }\n\n\n\n    /**\n     * innerHtml equivalkent\n     * equivalent to jqueries html\n     * as setter the html is set and the\n     * DomQuery is given back\n     * as getter the html string is returned\n     *\n     * @param inval\n     */\n    html(inval?: string): DomQuery | Optional<string> {\n        if (Optional.fromNullable(inval).isAbsent()) {\n            return this.isPresent() ? Optional.fromNullable(this.innerHtml) : Optional.absent;\n        }\n        this.innerHtml = inval;\n\n        return this;\n    }\n\n    /**\n     * Standard dispatch event method, delegated from node\n     */\n    dispatchEvent(evt: Event): DomQuery {\n        this.eachElem(elem => elem.dispatchEvent(evt));\n        return this;\n    }\n\n    set innerHtml(inVal: string) {\n        this.eachElem(elem => elem.innerHTML = inVal);\n    }\n\n    get innerHtml(): string {\n        let retArr = [];\n        this.eachElem(elem => retArr.push(elem.innerHTML));\n        return retArr.join(\"\");\n    }\n\n    //source: https://developer.mozilla.org/en-US/docs/Web/API/Element/matches\n    //code snippet license: https://creativecommons.org/licenses/by-sa/2.5/\n    private _mozMatchesSelector(toMatch: Element, selector: string): boolean {\n        let prot: { [key: string]: Function } = (<any>toMatch);\n        let matchesSelector: Function = prot.matchesSelector ||\n            prot.mozMatchesSelector ||\n            prot.msMatchesSelector ||\n            prot.oMatchesSelector ||\n            prot.webkitMatchesSelector ||\n            function (s: string) {\n                let matches: NodeListOf<HTMLElement> = (document || (<any>window).ownerDocument).querySelectorAll(s),\n                    i = matches.length;\n                while (--i >= 0 && matches.item(i) !== toMatch) {\n                }\n                return i > -1;\n            };\n        return matchesSelector.call(toMatch, selector);\n    }\n\n    /**\n     * filters the current dom query elements\n     * upon a given selector\n     *\n     * @param selector\n     */\n    filterSelector(selector: string): DomQuery {\n        let matched = [];\n\n        this.eachElem(item => {\n            if (this._mozMatchesSelector(item, selector)) {\n                matched.push(item)\n            }\n        });\n        return new DomQuery(...matched);\n    }\n\n    matchesSelector(selector: string): boolean {\n        this.eachElem(item => {\n            if (!this._mozMatchesSelector(item, selector)) {\n                return false;\n            }\n        });\n        return true;\n    }\n\n    /**\n     * easy node traversal, you can pass\n     * a set of node selectors which are joined as direct childs\n     *\n     * not the rootnodes are not in the getIf, those are always the child nodes\n     *\n     * @param nodeSelector\n     */\n    getIf(...nodeSelector: Array<string>): DomQuery {\n\n        let selectorStage: DomQuery = this.childNodes;\n        for (let cnt = 0; cnt < nodeSelector.length; cnt++) {\n            selectorStage = selectorStage.filterSelector(nodeSelector[cnt]);\n            if (selectorStage.isAbsent()) {\n                return selectorStage;\n            }\n        }\n        return selectorStage;\n    }\n\n    eachElem(func: (item: Element, cnt?: number) => any): DomQuery {\n\n        for (let cnt = 0, len = this.rootNode.length; cnt < len; cnt++) {\n            if (func(this.rootNode[cnt], cnt) === false) {\n                break;\n            }\n        }\n        return this;\n    }\n\n    firstElem(func: (item: Element, cnt?: number) => any = item => item): DomQuery {\n        if (this.rootNode.length > 1) {\n            func(this.rootNode[0], 0);\n        }\n        return this;\n    }\n\n    each(func: (item: DomQuery, cnt?: number) => any): DomQuery {\n        Stream.of(...this.rootNode)\n            .each((item, cnt) => {\n                //we could use a filter, but for the best performance we dont\n                if (item == null) {\n                    return;\n                }\n                return func(DomQuery.byId(item), cnt);\n            });\n\n        return this;\n    }\n\n    /**\n     * returns a new dom query containing only the first element max\n     *\n     * @param func a an optional callback function to perform an operation on the first element\n     */\n    first(func: (item: DomQuery, cnt?: number) => any = (item) => item): DomQuery {\n        if (this.rootNode.length >= 1) {\n            func(this.get(0), 0);\n            return this.get(0);\n        }\n        return this;\n    }\n\n    /**\n     * filter function which filters a subset\n     *\n     * @param func\n     */\n    filter(func: (item: DomQuery) => boolean): DomQuery {\n        let reArr: Array<DomQuery> = [];\n        this.each((item: DomQuery) => {\n            func(item) ? reArr.push(item) : null;\n        });\n        return new DomQuery(...<any>reArr);\n    }\n\n    //TODO append prepend\n\n    /**\n     * global eval head appendix method\n     * no other methods are supported anymore\n     * @param code the code to be evaled\n     * @param  nonce optional  nonce key for higher security\n     */\n    globalEval(code: string, nonce ?: string): DomQuery {\n        let head = document.getElementsByTagName(\"head\")[0] || document.documentElement;\n        let script = document.createElement(\"script\");\n        if (nonce) {\n            script.setAttribute(\"nonce\", nonce);\n        }\n        script.type = \"text/javascript\";\n        script.innerHTML = code;\n        let newScriptElement = head.appendChild(script);\n        head.removeChild(newScriptElement);\n        return this;\n    }\n\n    /**\n     * detaches a set of nodes from their parent elements\n     * in a browser independend manner\n     * @param {Object} items the items which need to be detached\n     * @return {Array} an array of nodes with the detached dom nodes\n     */\n    detach(): DomQuery {\n        this.eachElem((item: Element) => {\n            item.parentNode.removeChild(item);\n        });\n        return this;\n    }\n\n    /**\n     * appends the current set of elements\n     * to the element or first element passed via elem\n     * @param elem\n     */\n    appendTo(elem: DomQuery) {\n        this.eachElem((item) => {\n            let value1: Element = <Element>elem.getAsElem(0).orElseLazy(() => {\n                return {\n                    appendChild: (theItem: any) => {\n                    }\n                }\n            }).value;\n            value1.appendChild(item);\n        });\n    }\n\n    /**\n     * loads and evals a script from a source uri\n     *\n     * @param src the source to be loaded and evaled\n     * @param defer in miliseconds execution default (0 == no defer)\n     * @param charSet\n     */\n    loadScriptEval(src: string, defer: number = 0, charSet: string = \"utf-8\") {\n        let xhr = new XMLHttpRequest();\n        xhr.open(\"GET\", src, false);\n\n        if (charSet) {\n            xhr.setRequestHeader(\"Content-Type\", \"application/x-javascript; charset:\" + charSet);\n        }\n\n        xhr.send(null);\n\n        xhr.onload = (responseData: any) => {\n            //defer also means we have to process after the ajax response\n            //has been processed\n            //we can achieve that with a small timeout, the timeout\n            //triggers after the processing is done!\n            if (!defer) {\n                this.globalEval(xhr.responseText.replace(\"\\n\", \"\\r\\n\") + \"\\r\\n//@ sourceURL=\" + src);\n            } else {\n                //TODO not ideal we maybe ought to move to something else here\n                //but since it is not in use yet, it is ok\n                setTimeout(() => {\n                    this.globalEval(xhr.responseText + \"\\r\\n//@ sourceURL=\" + src);\n                }, defer);\n            }\n        };\n\n        xhr.onerror = (data: any) => {\n            throw Error(data);\n        };\n        //since we are synchronous we do it after not with onReadyStateChange\n\n        return this;\n    }\n\n    insertAfter(...toInsertParams: Array<DomQuery>): DomQuery {\n\n        this.each(existingItem => {\n            let existingElement = existingItem.getAsElem(0).value;\n            let rootNode = existingElement.parentNode;\n            for (let cnt = 0; cnt < toInsertParams.length; cnt++) {\n                let nextSibling: Element = <any>existingElement.nextSibling;\n                toInsertParams[cnt].eachElem(insertElem => {\n                    if (nextSibling) {\n                        rootNode.insertBefore(insertElem, nextSibling);\n                        existingElement = nextSibling;\n                    } else {\n                        rootNode.appendChild(insertElem);\n                    }\n                });\n\n            }\n        });\n\n        let res = [];\n        res.push(this);\n        res = res.concat(toInsertParams);\n        return new DomQuery(...res);\n    }\n\n    insertBefore(...toInsertParams: Array<DomQuery>): DomQuery {\n        this.each(existingItem => {\n            let existingElement = existingItem.getAsElem(0).value;\n            let rootNode = existingElement.parentNode;\n            for (let cnt = 0; cnt < toInsertParams.length; cnt++) {\n                toInsertParams[cnt].eachElem(insertElem => {\n                    rootNode.insertBefore(insertElem, existingElement);\n                });\n            }\n        });\n        let res = [];\n        res.push(this);\n        res = res.concat(toInsertParams);\n        return new DomQuery(...res);\n    }\n\n    orElse(...elseValue: any): DomQuery {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            return new DomQuery(...elseValue);\n        }\n    }\n\n    orElseLazy(func: () => any): DomQuery {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            return new DomQuery(func());\n        }\n    }\n\n    parents(tagName: string): DomQuery {\n        const retSet: Set<Element> = new Set();\n        const retArr: Array<Element> = [];\n        const lowerTagName = tagName.toLowerCase();\n\n        let resolveItem = (item: Element) => {\n            if ((item.tagName || \"\").toLowerCase() == lowerTagName && !retSet.has(item)) {\n                retSet.add(item);\n                retArr.push(item);\n            }\n        };\n\n        this.eachElem((item: Element) => {\n            while (item.parentNode || (<any> item).host) {\n                item = <Element>item?.parentNode ?? (<any>item)?.host;\n\n                resolveItem(item);\n                //nested forms not possible, performance shortcut\n                if (tagName == \"form\" && retArr.length) {\n                    return false;\n                }\n            }\n        });\n\n        return new DomQuery(...retArr);\n    }\n\n    copyAttrs(sourceItem: DomQuery | XMLQuery): DomQuery {\n        sourceItem.eachElem((sourceNode: Element) => {\n            let attrs: Array<Attr> = objToArray(sourceNode.attributes);\n            for (let item of attrs) {\n                let value: string = item.value;\n                let name: string = item.name;\n\n                switch (name) {\n                    case \"id\":\n                        this.id.value = value;\n                        break;\n                    case \"disabled\":\n                        this.resolveAttributeHolder(\"disabled\").disabled = value;\n                        break;\n                    case \"checked\":\n                        this.resolveAttributeHolder(\"checked\").checked = value;\n                        break;\n                    default:\n                        this.attr(name).value = value;\n                }\n            }\n        });\n        return this;\n    }\n\n    /**\n     * resolves an attribute holder compared\n     * @param attrName the attribute name\n     */\n    private resolveAttributeHolder(attrName: string = \"value\"): HTMLFormElement | any {\n        let ret = [];\n        ret[attrName] = null;\n        return (attrName in this.getAsElem(0).value) ?\n            this.getAsElem(0).value :\n            ret;\n    }\n\n    /**\n     * outerhtml convenience method\n     * browsers only support innerHTML but\n     * for instance for your jsf.js we have a full\n     * replace pattern which needs outerHTML processing\n     *\n     * @param markup\n     * @param runEmbeddedScripts\n     * @param runEmbeddedCss\n     */\n    outerHTML(markup: string, runEmbeddedScripts ?: boolean, runEmbeddedCss ?: boolean, deep = false): DomQuery {\n        if (this.isAbsent()) {\n            return;\n        }\n\n        let focusElementId = document?.activeElement?.id;\n        let caretPosition = (focusElementId) ? DomQuery.getCaretPosition(document.activeElement) : null;\n        let nodes = DomQuery.fromMarkup(markup);\n        let res = [];\n        let toReplace = this.getAsElem(0).value;\n        let firstInsert = nodes.get(0);\n        let parentNode = toReplace.parentNode;\n        let replaced = firstInsert.getAsElem(0).value;\n        parentNode.replaceChild(replaced, toReplace);\n        res.push(new DomQuery(replaced));\n        //no replacement possible\n        if (this.isAbsent()) {\n            return this;\n        }\n\n        let insertAdditionalItems = [];\n\n        if (nodes.length > 1) {\n            insertAdditionalItems = insertAdditionalItems.concat(...nodes.values.slice(1));\n            res.push(DomQuery.byId(replaced).insertAfter(new DomQuery(...insertAdditionalItems)));\n        }\n\n        if (runEmbeddedScripts) {\n            this.runScripts();\n        }\n        if (runEmbeddedCss) {\n            this.runCss();\n        }\n\n        let focusElement = DomQuery.byId(focusElementId);\n        if (focusElementId && focusElement.isPresent() &&\n            caretPosition != null && \"undefined\" != typeof caretPosition) {\n            focusElement.eachElem(item => DomQuery.setCaretPosition(item, caretPosition));\n        }\n\n        return nodes;\n    }\n\n    /**\n     * Run through the given nodes in the DomQuery execute the inline scripts\n     * @param whilteListed: optional whitelist function which can filter out script tags which are not processed\n     * defaults to the standard jsf.js exclusion (we use this code for myfaces)\n     */\n    runScripts(whilteListed: (val: string) => boolean = DEFAULT_JSF_WHITELIST): DomQuery {\n        let finalScripts = [],\n            equi = equalsIgnoreCase,\n            execScrpt = (item) => {\n                let tagName = item.tagName;\n                let itemType = item.type || \"\";\n                if (tagName && equi(tagName, \"script\") &&\n                    (itemType === \"\" || equi(itemType, \"text/javascript\") ||\n                        equi(itemType, \"javascript\") ||\n                        equi(itemType, \"text/ecmascript\") ||\n                        equi(itemType, \"ecmascript\"))) {\n                    let src = item.getAttribute('src');\n                    if ('undefined' != typeof src\n                        && null != src\n                        && src.length > 0\n                    ) {\n                        //we have to move this into an inner if because chrome otherwise chokes\n                        //due to changing the and order instead of relying on left to right\n                        //if jsf.js is already registered we do not replace it anymore\n                        if (whilteListed(src)) {\n                            if (finalScripts.length) {\n                                //script source means we have to eval the existing\n                                //scripts before running the include\n                                this.globalEval(finalScripts.join(\"\\n\"));\n\n                                finalScripts = [];\n                            }\n                            this.loadScriptEval(src, 0, \"UTF-8\");\n                        }\n\n                    } else {\n                        // embedded script auto eval\n                        //TODO this probably needs to be changed due to our new parsing structures\n                        //probably not needed anymore\n                        let evalText = trim(item.text || item.innerText || item.innerHTML);\n                        let go = true;\n\n                        while (go) {\n                            go = false;\n                            if (evalText.substring(0, 4) == \"<!--\") {\n                                evalText = evalText.substring(4);\n                                go = true;\n                            }\n                            if (evalText.substring(0, 4) == \"//<!--\") {\n                                evalText = evalText.substring(6);\n                                go = true;\n                            }\n                            if (evalText.substring(0, 11) == \"//<![CDATA[\") {\n                                evalText = evalText.substring(11);\n                                go = true;\n                            }\n                        }\n                        // we have to run the script under a global context\n                        //we store the script for less calls to eval\n                        finalScripts.push(evalText);\n\n                    }\n                }\n            };\n        try {\n            let scriptElements = new DomQuery(this.filterSelector(\"script\"), this.querySelectorAll(\"script\"));\n            //script execution order by relative pos in their dom tree\n            scriptElements.stream\n                .flatMap(item => Stream.of(item.values))\n                .sort((node1, node2) => node1.compareDocumentPosition(node2) - 3) //preceding 2, following == 4)\n                .each(item => execScrpt(item));\n\n            if (finalScripts.length) {\n                this.globalEval(finalScripts.join(\"\\n\"));\n            }\n        } catch (e) {\n            if (window.console && window.console.error) {\n                //not sure if we\n                //should use our standard\n                //error mechanisms here\n                //because in the head appendix\n                //method only a console\n                //error would be raised as well\n                console.error(e.message || e.description);\n            }\n        } finally {\n            //the usual ie6 fix code\n            //the IE6 garbage collector is broken\n            //nulling closures helps somewhat to reduce\n            //mem leaks, which are impossible to avoid\n            //at this browser\n            execScrpt = null;\n        }\n        return this;\n    }\n\n    runCss(): DomQuery {\n\n        const applyStyle = (item: Element, style: string) => {\n                let newSS: HTMLStyleElement = document.createElement(\"style\");\n                document.getElementsByTagName(\"head\")[0].appendChild(newSS);\n\n                let styleSheet = newSS.sheet ?? (<any>newSS).styleSheet;\n\n                newSS.setAttribute(\"rel\", item.getAttribute(\"rel\") ?? \"stylesheet\");\n                newSS.setAttribute(\"type\", item.getAttribute(\"type\") ?? \"text/css\");\n\n                if (styleSheet?.cssText ?? false) {\n                    styleSheet.cssText = style;\n                } else {\n                    newSS.appendChild(document.createTextNode(style));\n                }\n            },\n\n            execCss = (item: Element) => {\n                const tagName = item.tagName;\n                if (tagName && equalsIgnoreCase(tagName, \"link\") && equalsIgnoreCase(item.getAttribute(\"type\"), \"text/css\")) {\n                    applyStyle(item, \"@import url('\" + item.getAttribute(\"href\") + \"');\");\n                } else if (tagName && equalsIgnoreCase(tagName, \"style\") && equalsIgnoreCase(item.getAttribute(\"type\"), \"text/css\")) {\n                    let innerText = [];\n                    //compliant browsers know child nodes\n                    let childNodes: NodeList = item.childNodes;\n                    if (childNodes) {\n                        childNodes.forEach(child => innerText.push((<Element>child).innerHTML || (<CharacterData>child).data));\n                        //non compliant ones innerHTML\n                    } else if (item.innerHTML) {\n                        innerText.push(item.innerHTML);\n                    }\n\n                    applyStyle(item, innerText.join(\"\"));\n                }\n            };\n\n        const scriptElements: DomQuery = new DomQuery(this.filterSelector(\"link, style\"), this.querySelectorAll(\"link, style\"));\n\n        scriptElements.stream\n            .flatMap(item => Stream.of(item.values))\n            .sort((node1, node2) => node1.compareDocumentPosition(node2) - 3)\n            .each(item => execCss(item));\n\n        return this;\n    }\n\n    /**\n     * fires a click event on the underlying dom elements\n     */\n    click(): DomQuery {\n        this.fireEvent(\"click\");\n        return this;\n    }\n\n    addEventListener(type: string, listener: (evt: Event) => void, options?: boolean | EventListenerOptions): DomQuery {\n        this.eachElem((node: Element) => node.addEventListener(type, listener, options));\n        return this;\n    }\n\n    removeEventListener(type: string, listener: (evt: Event) => void, options?: boolean | EventListenerOptions): DomQuery {\n        this.eachElem((node: Element) => node.removeEventListener(type, listener, options));\n        return this;\n    }\n\n    /**\n     * fires an event\n     */\n    fireEvent(eventName: string) {\n        this.eachElem((node: Element) => {\n            let doc;\n            if (node.ownerDocument) {\n                doc = node.ownerDocument;\n            } else if (node.nodeType == 9) {\n                // the node may be the document itself, nodeType 9 = DOCUMENT_NODE\n                doc = node;\n            } else {\n                throw new Error(\"Invalid node passed to fireEvent: \" + node.id);\n            }\n\n            if (node.dispatchEvent) {\n                // Gecko-style approach (now the standard) takes more work\n                let eventClass = \"\";\n\n                // Different events have different event classes.\n                // If this switch statement can't map an eventName to an eventClass,\n                // the event firing is going to fail.\n                switch (eventName) {\n                    case \"click\": // Dispatching of 'click' appears to not work correctly in Safari. Use 'mousedown' or 'mouseup' instead.\n                    case \"mousedown\":\n                    case \"mouseup\":\n                        eventClass = \"MouseEvents\";\n                        break;\n\n                    case \"focus\":\n                    case \"change\":\n                    case \"blur\":\n                    case \"select\":\n                        eventClass = \"HTMLEvents\";\n                        break;\n\n                    default:\n                        throw \"fireEvent: Couldn't find an event class for event '\" + eventName + \"'.\";\n                        break;\n                }\n                let event = doc.createEvent(eventClass);\n                event.initEvent(eventName, true, true); // All events created as bubbling and cancelable.\n\n                event.synthetic = true; // allow detection of synthetic events\n                // The second parameter says go ahead with the default action\n                node.dispatchEvent(event);\n            } else if ((<any>node).fireEvent) {\n                // IE-old school style, you can drop this if you don't need to support IE8 and lower\n                let event = doc.createEventObject();\n                event.synthetic = true; // allow detection of synthetic events\n                (<any>node).fireEvent(\"on\" + eventName, event);\n            }\n        })\n    }\n\n    textContent(joinstr: string = \"\"): string {\n        return this.stream\n            .map((value: DomQuery) => {\n                let item = value.getAsElem(0).orElseLazy(() => {\n                    return <any>{\n                        textContent: \"\"\n                    };\n                }).value;\n                return (<any>item).textContent || \"\";\n            })\n            .reduce((text1, text2) => text1 + joinstr + text2, \"\").value;\n    }\n\n    innerText(joinstr: string = \"\"): string {\n        return this.stream\n            .map((value: DomQuery) => {\n                let item = value.getAsElem(0).orElseLazy(() => {\n                    return <any>{\n                        innerText: \"\"\n                    };\n                }).value;\n                return (<any>item).innerText || \"\";\n            })\n            .reduce((text1, text2) => [text1, text2].join(joinstr), \"\").value;\n\n    }\n\n    /**\n     * encodes all input elements properly into respective\n     * config entries, this can be used\n     * for legacy systems, for newer usecases, use the\n     * HTML5 Form class which all newer browsers provide\n     *\n     * @param toMerge optional config which can be merged in\n     * @return a copy pf\n     */\n    encodeFormElement(toMerge = new Config({})): Config {\n\n        //browser behavior no element name no encoding (normal submit fails in that case)\n        //https://issues.apache.org/jira/browse/MYFACES-2847\n        if (this.name.isAbsent()) {\n            return;\n        }\n\n        //lets keep it sideffects free\n        let target = toMerge.shallowCopy;\n\n        this.each((element: DomQuery) => {\n            if (element.name.isAbsent()) {//no name, no encoding\n                return;\n            }\n            let name = element.name.value;\n            let tagName = element.tagName.orElse(\"__none__\").value.toLowerCase();\n            let elemType = element.type.orElse(\"__none__\").value.toLowerCase();\n\n            elemType = elemType.toLowerCase();\n\n            // routine for all elements\n            // rules:\n            // - process only inputs, textareas and selects\n            // - elements muest have attribute \"name\"\n            // - elements must not be disabled\n            if (((tagName == \"input\" || tagName == \"textarea\" || tagName == \"select\") &&\n                (name != null && name != \"\")) && !element.disabled) {\n\n                // routine for select elements\n                // rules:\n                // - if select-one and value-Attribute exist => \"name=value\"\n                // (also if value empty => \"name=\")\n                // - if select-one and value-Attribute don't exist =>\n                // \"name=DisplayValue\"\n                // - if select multi and multple selected => \"name=value1&name=value2\"\n                // - if select and selectedIndex=-1 don't submit\n                if (tagName == \"select\") {\n                    // selectedIndex must be >= 0 sein to be submittet\n                    let selectElem: HTMLSelectElement = <HTMLSelectElement>element.getAsElem(0).value;\n                    if (selectElem.selectedIndex >= 0) {\n                        let uLen = selectElem.options.length;\n                        for (let u = 0; u < uLen; u++) {\n                            // find all selected options\n                            //let subBuf = [];\n                            if (selectElem.options[u].selected) {\n                                let elementOption = selectElem.options[u];\n                                target.append(name).value = (elementOption.getAttribute(\"value\") != null) ?\n                                    elementOption.value : elementOption.text;\n                            }\n                        }\n                    }\n                }\n\n                // routine for remaining elements\n                // rules:\n                // - don't submit no selects (processed above), buttons, reset buttons, submit buttons,\n                // - submit checkboxes and radio inputs only if checked\n                if (\n                    (\n                        tagName != Submittables.SELECT &&\n                        elemType != Submittables.BUTTON &&\n                        elemType != Submittables.RESET &&\n                        elemType != Submittables.SUBMIT &&\n                        elemType != Submittables.IMAGE\n                    ) && (\n                        (\n                            elemType != Submittables.CHECKBOX && elemType != Submittables.RADIO) ||\n                        element.checked\n                    )\n                ) {\n                    let files: any = (<any>element.value).value?.files ?? [];\n                    if (files?.length) {\n                        //xhr level2\n                        target.append(name).value = files[0];\n                    } else {\n                        target.append(name).value = element.inputValue.value;\n                    }\n                }\n\n            }\n        });\n\n        return target;\n    }\n\n    get cDATAAsString(): string {\n        let cDataBlock = [];\n        let TYPE_CDATA_BLOCK = 4;\n\n        let res: any = this.lazyStream.flatMap(item => {\n            return item.childNodes.stream\n        }).filter(item => {\n            return item?.value?.value?.nodeType == TYPE_CDATA_BLOCK;\n        }).reduce((reduced: Array<any>, item: DomQuery) => {\n            reduced.push((<any>item?.value?.value)?.data ?? \"\");\n            return reduced;\n        }, []).value;\n\n        // response may contain several blocks\n        return res.join(\"\");\n    }\n\n    subNodes(from: number, to?: number): DomQuery {\n        if (Optional.fromNullable(to).isAbsent()) {\n            to = this.length;\n        }\n        return new DomQuery(...this.rootNode.slice(from, Math.min(to, this.length)));\n    }\n\n    //TODO this part probably will be removed\n    //because we can stream from an array stream directly into the dom query\n    _limits = -1;\n\n    limits(end: number): IStream<DomQuery> {\n        this._limits = end;\n        return <any>this;\n    }\n\n    //-- internally exposed methods needed for the interconnectivity\n    hasNext() {\n        let isLimitsReached = this._limits != -1 && this.pos >= this._limits - 1;\n        let isEndOfArray = this.pos >= this.values.length - 1;\n        return !(isLimitsReached ||\n            isEndOfArray);\n    }\n\n    next(): DomQuery {\n        if (!this.hasNext()) {\n            return null;\n        }\n        this.pos++;\n        return new DomQuery(this.values[this.pos]);\n    }\n\n    reset() {\n        this.pos = -1;\n    }\n\n    attachShadow(params: { [key: string]: string } = {mode: \"open\"}): DomQuery {\n        let shadowRoots: DomQuery[] = [];\n        this.eachElem((item: Element) => {\n            let shadowElement: DomQuery;\n            if ((<any>item)?.attachShadow) {\n                shadowElement = DomQuery.byId((<any>item).attachShadow(params));\n                shadowRoots.push(shadowElement);\n            } else {\n                throw new Error(\"Shadow dom creation not supported by the browser, please use a shim, to gain this functionality\");\n            }\n        });\n        return new DomQuery(...shadowRoots);\n    }\n\n    /**\n     * returns the embedded shadow elements\n     */\n    get shadowElements(): DomQuery {\n        let shadowElements = this.querySelectorAll(\"*\")\n            .filter(item => item.hasShadow);\n\n\n        let mapped: Array<ShadowRoot> = (shadowElements.allElems() || []).map(element => element.shadowRoot);\n        return new DomQuery(...mapped);\n    }\n\n    get shadowRoot(): DomQuery {\n        let shadowRoots = [];\n        for (let cnt = 0; cnt < this.rootNode.length; cnt++) {\n            if (this.rootNode[cnt].shadowRoot) {\n                shadowRoots.push(this.rootNode[cnt].shadowRoot);\n            }\n        }\n        return new DomQuery(...shadowRoots);\n    }\n\n    get hasShadow(): boolean {\n        for (let cnt = 0; cnt < this.rootNode.length; cnt++) {\n            if (this.rootNode[cnt].shadowRoot) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    //from\n    // http://blog.vishalon.net/index.php/javascript-getting-and-setting-caret-position-in-textarea/\n    static getCaretPosition(ctrl: any) {\n        let caretPos = 0;\n\n        try {\n            if ((<any>document)?.selection) {\n                ctrl.focus();\n                let selection = (<any>document).selection.createRange();\n                //the selection now is start zero\n                selection.moveStart('character', -ctrl.value.length);\n                //the caretposition is the selection start\n                caretPos = selection.text.length;\n            }\n        } catch (e) {\n            //now this is ugly, but not supported input types throw errors for selectionStart\n            //just in case someone dumps this code onto unsupported browsers\n        }\n        return caretPos;\n    }\n\n    /**\n     * sets the caret position\n     *\n     * @param ctrl the control to set the caret position to\n     * @param pos the position to set\n     *\n     * note if the control does not have any selectable and focusable behavior\n     * calling this method does nothing (silent fail)\n     *\n     */\n    static setCaretPosition(ctrl: any, pos: number) {\n        ctrl?.focus ? ctrl?.focus() : null;\n        //the selection range is our caret position\n\n        ctrl?.setSelectiongRange ? ctrl?.setSelectiongRange(pos, pos) : null;\n    }\n\n\n}\n\n/**\n * Various collectors\n * which can be used in conjunction with Streams\n */\n\n/**\n * A collector which bundles a full dom query stream into a single dom query element\n *\n * This connects basically our stream back into DomQuery\n */\nexport class DomQueryCollector implements ICollector<DomQuery, DomQuery> {\n\n    data: DomQuery[] = [];\n\n    collect(element: DomQuery) {\n        this.data.push(element);\n    }\n\n    get finalValue(): DomQuery {\n        return new DomQuery(...this.data);\n    }\n}\n\n/**\n * abbreviation for DomQuery\n */\nexport const DQ = DomQuery;\nexport type DQ = DomQuery;\n","/* Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Optional} from \"./Monad\";\n\n/**\n * Lang helpers crossported from the apache myfaces project\n */\nexport module Lang {\n    \n\n    //should be in lang, but for now here to avoid recursive imports, not sure if typescript still has a problem with those\n    /**\n     * helper function to savely resolve anything\n     * this is not an elvis operator, it resolves\n     * a value without exception in a tree and if\n     * it is not resolvable then an optional of\n     * a default value is restored or Optional.empty\n     * if none is given\n     *\n     * usage\n     * <code>\n     *     let var: Optiona<string> = saveResolve(() => a.b.c.d.e, \"foobaz\")\n     * </code>\n     *\n     * @param resolverProducer a lambda which can produce the value\n     * @param defaultValue an optional default value if the producer failes to produce anything\n     * @returns an Optional of the produced value\n     */\n    export function saveResolve<T>(resolverProducer: () => T, defaultValue: T = null): Optional<T> {\n        try {\n            let result = resolverProducer();\n            return Optional.fromNullable(result ?? defaultValue);\n        } catch (e) {\n            return Optional.absent;\n        }\n    }\n\n    export function saveResolveLazy<T>(resolverProducer: () => T, defaultValue: () => T = null): Optional<T> {\n        try {\n            let result = resolverProducer();\n            return Optional.fromNullable(result ?? defaultValue());\n        } catch (e) {\n            return Optional.absent;\n        }\n    }\n\n    /**\n     * String to array function performs a string to array transformation\n     * @param {String} it the string which has to be changed into an array\n     * @param {RegExp} splitter our splitter reglar expression\n     * @return a trimmed array of the splitted string\n     */\n    export function strToArray(it: string, splitter: string | RegExp = /\\./gi): Array<string> {\n\n        let ret = [];\n        it.split(splitter).forEach((element => {\n            ret.push(trim(element));\n        }));\n        return ret;\n    }\n\n    /**\n     * hyperfast trim\n     * http://blog.stevenlevithan.com/archives/faster-trim-javascript\n     * crossported from dojo\n     */\n    export function trim(str: string): string {\n        str = str.replace(/^\\s\\s*/, '');\n        let ws = /\\s/, i = str.length;\n\n        while (ws.test(str.charAt(--i))) {\n            //do nothing\n        }\n        return str.slice(0, i + 1);\n    }\n\n    /**\n     * generic object arrays like dom definitions to array conversion method which\n     * transforms any object to something array like\n     * @param obj\n     * @param offset\n     * @param pack\n     * @returns an array converted from the object\n     */\n    export function objToArray<T>(obj: any, offset: number = 0, pack: Array<T> = []): Array<T> {\n        if ((obj ?? \"__undefined__\") == \"__undefined__\") {\n            return pack ?? null;\n        }\n        //since offset is numeric we cannot use the shortcut due to 0 being false\n        //special condition array delivered no offset no pack\n        if ((<any>obj) instanceof Array && !offset && !pack) return obj;\n\n        return pack.concat(Array.prototype.slice.call(obj, offset));\n    }\n\n    /**\n     * equalsIgnoreCase, case insensitive comparison of two strings\n     *\n     * @param source\n     * @param destination\n     */\n    export function equalsIgnoreCase(source?: string, destination?: string): boolean {\n        let finalSource = source ?? \"___no_value__\";\n        let finalDest = destination ?? \"___no_value__\";\n\n        //in any other case we do a strong string comparison\n        return finalSource.toLowerCase() === finalDest.toLowerCase();\n    }\n\n    /**\n     * runtime type assertion\n     *\n     * @param probe the probe to be tested for a type\n     * @param theType the type to be tested for\n     */\n    export function assertType(probe: any, theType: any): boolean {\n        return isString(theType) ? typeof probe == theType : probe instanceof theType;\n    }\n\n    /**\n     * Backported from dojo\n     * a failsafe string determination method\n     * (since in javascript String != \"\" typeof alone fails!)\n     * @param it {|Object|} the object to be checked for being a string\n     * @return true in case of being a string false otherwise\n     */\n    export function isString(it?: any): boolean {\n        //\tsummary:\n        //\t\tReturn true if it is a String\n        return !!arguments.length && it != null && (typeof it == \"string\" || it instanceof String); // Boolean\n    }\n\n    export function isFunc(it: any): boolean {\n        return it instanceof Function || typeof it === \"function\";\n    }\n\n    // code from https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\n    // license https://creativecommons.org/licenses/by-sa/2.5/\n    export function objAssign(target: any, ...theArgs: any) { // .length of function is 2\n        if (target == null) { // TypeError if undefined or null\n            throw new TypeError('Cannot convert undefined or null to object');\n        }\n\n        let to = Object(target);\n        if((<any>Object).assign) {\n            theArgs.forEach(item => (<any>Object).assign(to, item));\n            return to;\n        }\n\n        theArgs.forEach(item => {\n            let nextSource = item;\n            if (nextSource != null) { // Skip over if undefined or null\n                for (let nextKey in nextSource) {\n                    // Avoid bugs when hasOwnProperty is shadowed\n                    if (Object.prototype.hasOwnProperty.call(nextSource, nextKey)) {\n                        to[nextKey] = nextSource[nextKey];\n                    }\n                }\n            }\n        });\n        return to;\n    }\n}\n\n","/* Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * A module which keeps  basic monadish like definitions in place without any sidedependencies to other modules.\n * Useful if you need the functions in another library to keep its dependencies down\n */\n\n/*IMonad definitions*/\n\nimport {Lang} from \"./Lang\";\nimport {AssocArrayCollector} from \"./SourcesCollectors\";\nimport {Stream} from \"./Stream\";\nimport objAssign = Lang.objAssign;\n\n/**\n * IFunctor interface,\n * defines an interface which allows to map a functor\n * via a first order function to another functor\n */\nexport interface IFunctor<T> {\n    map<R>(fn: (data: T) => R): IFunctor<R>;\n}\n\n/**\n * IMonad definition, basically a functor with a flaptmap implementation (flatmap reduces all nested monads after a\n * function call f into a monad with the nesting level of 1\n *\n * flatmap flats nested Monads into a IMonad of the deepest nested implementation\n */\nexport interface IMonad<T, M extends IMonad<any, any>> extends IFunctor<T> {\n    flatMap<T, M>(f: (T) => M): IMonad<any, any>;\n}\n\n/**\n * a stateful functor which holds a value upn which a\n * function can be applied\n *\n * as value holder of type T\n */\nexport interface IIdentity<T> extends IFunctor<T> {\n    readonly value: T;\n}\n\n/**\n *  custom value holder definition, since we are not pure functional\n *  but iterative we have structures which allow the assignment of a value\n *  also not all structures are sideffect free\n */\nexport interface IValueHolder<T> {\n    value: T | Array<T>;\n}\n\n/**\n * Implementation of a monad\n * (Sideffect free), no write allowed directly on the monads\n * value state\n */\nexport class Monad<T> implements IMonad<T, Monad<any>>, IValueHolder<T> {\n    constructor(value: T) {\n        this._value = value;\n    }\n\n    protected _value: T;\n\n    get value(): T {\n        return this._value;\n    }\n\n    map<R>(fn?: (data: T) => R): Monad<R> {\n        if (!fn) {\n            fn = (inval: any) => <R>inval;\n        }\n        let result: R = fn(this.value);\n        return new Monad(result);\n    }\n\n    flatMap<R>(fn?: (data: T) => R): Monad<any> {\n        let mapped: Monad<any> = this.map(fn);\n        while (mapped?.value instanceof Monad) {\n            mapped = mapped.value\n        }\n        return mapped;\n    }\n\n}\n\n/**\n * optional implementation, an optional is basically an implementation of a Monad with additional syntactic\n * sugar on top\n * (Sideeffect free, since value assignment is not allowed)\n * */\nexport class Optional<T> extends Monad<T> {\n\n    /*default value for absent*/\n    static absent = Optional.fromNullable(null);\n\n    constructor(value: T) {\n        super(value);\n    }\n\n    get value(): T {\n        if (this._value instanceof Monad) {\n            return this._value.flatMap().value\n        }\n        return this._value;\n    }\n\n    static fromNullable<T>(value?: T): Optional<T> {\n        return new Optional(value);\n    }\n\n    /*syntactic sugar for absent and present checks*/\n    isAbsent(): boolean {\n        return \"undefined\" == typeof this.value || null == this.value;\n    }\n\n    /**\n     * any value present\n     */\n    isPresent(presentRunnable ?: (val ?: Monad<T>) => void): boolean {\n        let absent = this.isAbsent();\n        if (!absent && presentRunnable) {\n            presentRunnable.call(this, this)\n        }\n        return !absent;\n    }\n\n    ifPresentLazy(presentRunnable: (val ?: Monad<T>) => void = () => {\n    }): Monad<T> {\n        this.isPresent.call(this, presentRunnable);\n        return this;\n    }\n\n    orElse(elseValue: any): Optional<any> {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            //shortcut\n            if (elseValue == null) {\n                return Optional.absent;\n            }\n            return this.flatMap(() => elseValue);\n        }\n    }\n\n    /**\n     * lazy, passes a function which then is lazily evaluated\n     * instead of a direct value\n     * @param func\n     */\n    orElseLazy(func: () => any): Optional<any> {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            return this.flatMap(func);\n        }\n    }\n\n    /*\n     * we need to implement it to fullfill the contract, although it is used only internally\n     * all values are flattened when accessed anyway, so there is no need to call this methiod\n     */\n    flatMap<R>(fn?: (data: T) => R): Optional<any> {\n        let val = super.flatMap(fn);\n        if (!(val instanceof Optional)) {\n            return Optional.fromNullable(val.value);\n        }\n\n        return <Optional<any>>val.flatMap();\n    }\n\n    /*\n     * elvis operation, take care, if you use this you lose typesafety and refactoring\n     * capabilites, unfortunately typesceript does not allow to have its own elvis operator\n     * this is some syntactic sugar however which is quite useful*/\n    getIf<R>(...key: string[]): Optional<R> {\n\n        let currentPos: Optional<any> = this;\n        for (let cnt = 0; cnt < key.length; cnt++) {\n            let currKey = this.keyVal(key[cnt]);\n            let arrPos = this.arrayIndex(key[cnt]);\n\n            if (currKey === \"\" && arrPos >= 0) {\n                currentPos = this.getClass().fromNullable(!(currentPos.value instanceof Array) ? null : (currentPos.value.length < arrPos ? null : currentPos.value[arrPos]));\n                if (currentPos.isAbsent()) {\n                    return currentPos;\n                }\n                continue;\n            } else if (currKey && arrPos >= 0) {\n                if (currentPos.getIfPresent(currKey).isAbsent()) {\n                    return currentPos;\n                }\n                currentPos = (currentPos.getIfPresent(currKey).value instanceof Array) ? this.getClass().fromNullable(currentPos.getIfPresent(currKey).value[arrPos]) : this.getClass().absent;\n                if (currentPos.isAbsent()) {\n                    return currentPos;\n                }\n                continue;\n\n            } else {\n                currentPos = currentPos.getIfPresent(currKey);\n            }\n            if (currentPos.isAbsent()) {\n                return currentPos;\n            } else if (arrPos > -1) {\n                currentPos = this.getClass().fromNullable(currentPos.value[arrPos]);\n            }\n        }\n        let retVal = currentPos;\n\n        return retVal;\n    }\n\n    /**\n     * simple match, if the first order function call returns\n     * true then there is a match, if the value is not present\n     * it never matches\n     *\n     * @param fn the first order function performing the match\n     */\n    match(fn: (item: T) => boolean): boolean {\n        if (this.isAbsent()) {\n            return false\n        }\n        return fn(this.value);\n    }\n\n    /**\n     * convenience function to flatmap the internal value\n     * and replace it with a default in case of being absent\n     *\n     * @param defaultVal\n     * @returns {Optional<any>}\n     */\n    get<R>(defaultVal: any = Optional.absent): Optional<R> {\n        if (this.isAbsent()) {\n            return this.getClass().fromNullable(defaultVal).flatMap();\n        }\n\n        return this.getClass().fromNullable(this.value).flatMap();\n    }\n\n    toJson(): string {\n        return JSON.stringify(this.value);\n    }\n\n    /**\n     * helper to override several implementations in a more fluent way\n     * by having a getClass operation we can avoid direct calls into the constructor or\n     * static methods and do not have to implement several methods which rely on the type\n     * of \"this\"\n     * @returns {Monadish.Optional}\n     */\n    protected getClass(): any {\n        return Optional;\n    }\n\n    /*helper method for getIf with array access aka <name>[<indexPos>]*/\n    protected arrayIndex(key: string): number {\n        let start = key.indexOf(\"[\");\n        let end = key.indexOf(\"]\");\n        if (start >= 0 && end > 0 && start < end) {\n            return parseInt(key.substring(start + 1, end));\n        } else {\n            return -1;\n        }\n    }\n\n    /*helper method for getIf with array access aka <name>[<indexPos>]*/\n    protected keyVal(key: string): string {\n        let start = key.indexOf(\"[\");\n\n        if (start >= 0) {\n            return key.substring(0, start);\n        } else {\n            return key;\n        }\n    }\n\n    /**\n     * additional syntactic sugar which is not part of the usual optional implementation\n     * but makes life easier, if you want to sacrifice typesafety and refactoring\n     * capabilities in typescript\n     */\n    getIfPresent<R>(key: string): Optional<R> {\n        if (this.isAbsent()) {\n            return this.getClass().absent;\n        }\n        return this.getClass().fromNullable(this.value[key]).flatMap();\n    }\n\n    /**\n     * elvis like typesafe functional save resolver\n     * a typesafe option for getIfPresent\n     *\n     * usage myOptional.resolve(value => value.subAttr.subAttr2).orElseLazy(....)\n     * if this is resolvable without any errors an Optional with the value is returned\n     * if not, then an Optional absent is returned, also if you return Optional absent\n     * it is flatmapped into absent\n     *\n     * @param resolver the resolver function, can throw any arbitrary errors, int  the error case\n     * the resolution goes towards absent\n     */\n    resolve<V>(resolver: (item: T) => V): Optional<V> {\n        if (this.isAbsent()) {\n            return Optional.absent;\n        }\n        try {\n            return Optional.fromNullable(resolver(this.value))\n        } catch (e) {\n            return Optional.absent;\n        }\n    }\n\n}\n\n// --------------------- From here onwards we break out the sideffects free limits ------------\n\n/**\n * ValueEmbedder is the writeable version\n * of optional, it basically is a wrappber\n * around a construct which has a state\n * and can be written to.\n *\n * For the readonly version see Optional\n */\nexport class ValueEmbedder<T> extends Optional<T> implements IValueHolder<T> {\n\n    /*default value for absent*/\n    static absent = ValueEmbedder.fromNullable(null);\n\n    protected key: string;\n\n    constructor(rootElem: any, valueKey: string = \"value\") {\n        super(rootElem);\n\n        this.key = valueKey;\n    }\n\n    get value(): T {\n        return this._value ? <T>this._value[this.key] : null;\n    }\n\n    set value(newVal: T) {\n        if (!this._value) {\n            return;\n        }\n        this._value[this.key] = newVal\n    }\n\n    orElse(elseValue: any): Optional<any> {\n        let alternative = {};\n        alternative[this.key] = elseValue;\n        return this.isPresent() ? this : new ValueEmbedder(alternative, this.key);\n    }\n\n    orElseLazy(func: () => any): Optional<any> {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            let alternative = {};\n            alternative[this.key] = func();\n            return new ValueEmbedder(alternative, this.key);\n        }\n    }\n\n    /**\n     * helper to override several implementations in a more fluent way\n     * by having a getClass operation we can avoid direct calls into the constructor or\n     * static methods and do not have to implement several methods which rely on the type\n     * of \"this\"\n     * @returns {Monadish.Optional}\n     */\n    protected getClass(): any {\n        return ValueEmbedder;\n    }\n\n    static fromNullable<T>(value?: any, valueKey: string = \"value\"): ValueEmbedder<T> {\n        return new ValueEmbedder(value, valueKey);\n    }\n\n}\n\n/**\n * specialized value embedder\n * for our Configuration\n */\nclass ConfigEntry<T> extends ValueEmbedder<T> {\n\n    /*default value for absent*/\n    static absent = ConfigEntry.fromNullable(null);\n\n    /**\n     * arrayed value positions\n     */\n    arrPos: number;\n\n    constructor(rootElem: any, key: any, arrPos?: number) {\n        super(rootElem, key);\n\n        this.arrPos = arrPos ?? -1;\n    }\n\n    get value() {\n        if (this.key == \"\" && this.arrPos >= 0) {\n            return this._value[this.arrPos];\n        } else if (this.key && this.arrPos >= 0) {\n            return this._value[this.key][this.arrPos];\n        }\n        return this._value[this.key];\n    }\n\n    set value(val: T) {\n        if (this.key == \"\" && this.arrPos >= 0) {\n            this._value[this.arrPos] = val;\n            return;\n        } else if (this.key && this.arrPos >= 0) {\n            this._value[this.key][this.arrPos] = val;\n            return;\n        }\n        this._value[this.key] = val;\n    }\n}\n\n/**\n * Config, basically an optional wrapper for a json structure\n * (not sideeffect free, since we can alter the internal config state\n * without generating a new config), not sure if we should make it sideffect free\n * since this would swallow a lot of performane and ram\n */\nexport class Config extends Optional<any> {\n    constructor(root: any) {\n        super(root);\n    }\n\n    get shallowCopy(): Config {\n        return new Config(Stream.ofAssoc(this.value).collect(new AssocArrayCollector()));\n    }\n\n    get deepCopy(): Config {\n        return new Config(objAssign({}, this.value));\n    }\n\n    static fromNullable<T>(value?: any): Config {\n        return new Config(value);\n    }\n\n    /**\n     * simple merge for the root configs\n     */\n    shallowMerge(other: Config, overwrite = true, withAppend = false) {\n        for (let key in other.value) {\n            if (overwrite || !(key in this.value)) {\n                if (!withAppend) {\n                    this.assign(key).value = other.getIf(key).value;\n                } else {\n                    if (Array.isArray(other.getIf(key).value)) {\n                        Stream.of(...other.getIf(key).value).each(item => this.append(key).value = item);\n                    } else {\n                        this.append(key).value = other.getIf(key).value;\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * assigns a single value as array, or appends it\n     * to an existing value mapping a single value to array\n     *\n     *\n     * usage myConfig.append(\"foobaz\").value = \"newValue\"\n     *       myConfig.append(\"foobaz\").value = \"newValue2\"\n     *\n     * resulting in myConfig.foobaz == [\"newValue, newValue2\"]\n     *\n     * @param keys\n     */\n    append(...keys): IValueHolder<any> {\n        let noKeys = keys.length < 1;\n        if (noKeys) {\n            return;\n        }\n\n        let lastKey = keys[keys.length - 1];\n        let currKey, finalKey = this.keyVal(lastKey);\n\n        let pathExists = this.getIf(...keys).isPresent();\n        this.buildPath(keys);\n\n        let finalKeyArrPos = this.arrayIndex(lastKey);\n        if (finalKeyArrPos > -1) {\n            throw Error(\"Append only possible on non array properties, use assign on indexed data\");\n        }\n        let value = <any>this.getIf(...keys).value;\n        if (!Array.isArray(value)) {\n            value = this.assign(...keys).value = [value];\n        }\n        if (pathExists) {\n            value.push({});\n        }\n        finalKeyArrPos = value.length - 1;\n\n        let retVal = new ConfigEntry(keys.length == 1 ? this.value : this.getIf.apply(this, keys.slice(0, keys.length - 1)).value,\n            lastKey, finalKeyArrPos\n        );\n\n        return retVal;\n    }\n\n    appendIf(condition: boolean, ...keys): IValueHolder<any> {\n        if (!condition) {\n            return {value: null};\n        }\n        return this.append(...keys);\n    }\n\n    assign(...keys): IValueHolder<any> {\n        if (keys.length < 1) {\n            return;\n        }\n\n        this.buildPath(keys);\n\n        let currKey = this.keyVal(keys[keys.length - 1]);\n        let arrPos = this.arrayIndex(keys[keys.length - 1]);\n        let retVal = new ConfigEntry(keys.length == 1 ? this.value : this.getIf.apply(this, keys.slice(0, keys.length - 1)).value,\n            currKey, arrPos\n        );\n\n        return retVal;\n    }\n\n    assignIf(condition: boolean, ...keys: Array<any>): IValueHolder<any> {\n        return condition ? this.assign(...keys) : {value: null};\n    }\n\n    getIf(...keys: Array<string>): Config {\n        return this.getClass().fromNullable(super.getIf.apply(this, keys).value);\n    }\n\n    get(defaultVal: any): Config {\n        return this.getClass().fromNullable(super.get(defaultVal).value);\n    }\n\n    //empties the current config entry\n    delete(key: string): Config {\n        if (key in this.value) {\n            delete this.value[key];\n        }\n        return this;\n    }\n\n    toJson(): any {\n        return JSON.stringify(this.value);\n    }\n\n    protected getClass(): any {\n        return Config;\n    }\n\n    private setVal(val: any) {\n        this._value = val;\n    }\n\n    /**\n     * builds the config path\n     *\n     * @param keys a sequential array of keys containing either a key name or an array reference name[<index>]\n     */\n    private buildPath(keys: Array<any>): Config {\n        let val = this;\n        let parentVal = this.getClass().fromNullable(null);\n        let parentPos = -1;\n        let alloc = function (arr: Array<any>, length: number) {\n            let length1 = arr.length;\n            let length2 = length1 + length;\n            for (let cnt = length1; cnt < length2; cnt++) {\n                arr.push({});\n            }\n        };\n\n        for (let cnt = 0; cnt < keys.length; cnt++) {\n            let currKey = this.keyVal(keys[cnt]);\n            let arrPos = this.arrayIndex(keys[cnt]);\n\n            if (currKey === \"\" && arrPos >= 0) {\n\n                val.setVal((val.value instanceof Array) ? val.value : []);\n                alloc(val.value, arrPos + 1);\n                if (parentPos >= 0) {\n                    parentVal.value[parentPos] = val.value;\n                }\n                parentVal = val;\n                parentPos = arrPos;\n                val = this.getClass().fromNullable(val.value[arrPos]);\n                continue;\n            }\n\n            let tempVal = <Config>val.getIf(currKey);\n            if (arrPos == -1) {\n                if (tempVal.isAbsent()) {\n                    tempVal = <Config>this.getClass().fromNullable(val.value[currKey] = {});\n                } else {\n                    val = <any>tempVal;\n                }\n            } else {\n                let arr = (tempVal.value instanceof Array) ? tempVal.value : [];\n                alloc(arr, arrPos + 1);\n                val.value[currKey] = arr;\n                tempVal = this.getClass().fromNullable(arr[arrPos]);\n            }\n            parentVal = val;\n            parentPos = arrPos;\n            val = <any>tempVal;\n        }\n\n        return this;\n    }\n}\n\n\n","/* Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {IStream, Stream, StreamMapper} from \"./Stream\";\nimport {DomQuery} from \"./DomQuery\";\n\n/**\n * Every data source wich feeds data into the lazy stream\n * or stream generally must implement this interface\n *\n * It is basically an iteratable to the core\n */\nexport interface IStreamDataSource<T> {\n\n    /**\n     * @returns true if additional data is present\n     */\n    hasNext(): boolean;\n\n    /**\n     * false if not\n     */\n    next(): T;\n\n    /**\n     * resets the position to the beginning\n     */\n    reset(): void;\n}\n\n/**\n * A collector, needs to be implemented\n */\nexport interface ICollector<T, S> {\n    /**\n     * this method basically takes a single stream element\n     * and does something with it (collecting it one way or the other\n     * in most cases)\n     *\n     * @param element\n     */\n    collect(element: T);\n\n    /**\n     * the final result after all the collecting is done\n     */\n    finalValue: S;\n}\n\n/**\n * implementation of iteratable on top of array\n */\nexport class ArrayStreamDataSource<T> implements IStreamDataSource<T> {\n    value: Array<T>;\n    dataPos = -1;\n\n    constructor(...value: Array<T>) {\n        this.value = value;\n    }\n\n    hasNext(): boolean {\n        return this.value.length - 1 > this.dataPos;\n    }\n\n    next(): T {\n        this.dataPos++;\n        return this.value[this.dataPos];\n    }\n\n    reset() {\n        this.dataPos = -1;\n    }\n}\n\n/**\n * an intermediate data source wich prefilters\n * incoming stream data\n * and lets only the data out which\n * passes the filter function check\n */\nexport class FilteredStreamDatasource<T> implements IStreamDataSource<T> {\n\n    filterFunc: (T) => boolean;\n    inputDataSource: IStreamDataSource<T>;\n\n    filteredNext: T = null;\n\n    constructor(filterFunc: (T) => boolean, parent: IStreamDataSource<T>) {\n        this.filterFunc = filterFunc;\n        this.inputDataSource = parent;\n    }\n\n    /**\n     * in order to filter we have to make a look ahead until the\n     * first next allowed element\n     * hence we prefetch the element and then\n     * serve it via next\n     */\n    hasNext(): boolean {\n        while (this.filteredNext == null && this.inputDataSource.hasNext()) {\n            let next: T = <T>this.inputDataSource.next();\n            if (this.filterFunc(next)) {\n                this.filteredNext = next;\n                return true;\n            } else {\n                this.filteredNext = null;\n            }\n        }\n        return this.filteredNext != null;\n\n    }\n\n    /**\n     * serve the next element\n     */\n    next(): T {\n        let ret = this.filteredNext;\n        this.filteredNext = null;\n        //We have to call hasNext, to roll another\n        //prefetch in case someone runs next\n        //sequentially without calling hasNext\n        this.hasNext();\n        return ret;\n    }\n\n    reset(): void {\n        this.filteredNext = null;\n        this.inputDataSource.reset();\n    }\n}\n\n/**\n * an intermediate datasource which maps the items from\n * one into another\n */\nexport class MappedStreamDataSource<T, S> implements IStreamDataSource<S> {\n\n    mapFunc: (T) => S;\n    inputDataSource: IStreamDataSource<T>;\n\n    constructor(mapFunc: (T) => S, parent: IStreamDataSource<T>) {\n        this.mapFunc = mapFunc;\n        this.inputDataSource = parent;\n    }\n\n    hasNext(): boolean {\n        return this.inputDataSource.hasNext();\n    }\n\n    next(): S {\n        return this.mapFunc(this.inputDataSource.next());\n    }\n\n    reset(): void {\n        this.inputDataSource.reset();\n    }\n}\n\n/**\n * Same for flatmap to deal with element -> stream mappings\n */\nexport class FlatMapStreamDataSource<T, S> implements IStreamDataSource<S> {\n\n    mapFunc: StreamMapper<T>;\n\n    inputDataSource: IStreamDataSource<T>;\n\n    /**\n     * the currently active stream\n     * coming from an incoming element\n     * once the end of this one is reached\n     * it is swapped out by another one\n     * from the next element\n     */\n    activeDataSource: IStreamDataSource<S>;\n\n    constructor(func: StreamMapper<T>, parent: IStreamDataSource<T>) {\n        this.mapFunc = func;\n        this.inputDataSource = parent;\n    }\n\n    hasNext(): boolean {\n        return this.resolveCurrentNext() || this.resolveNextNext();\n    }\n\n    private resolveCurrentNext() {\n        let next = false;\n        if (this.activeDataSource) {\n            next = this.activeDataSource.hasNext();\n        }\n        return next;\n    }\n\n    private resolveNextNext() {\n        let next = false;\n        while (!next && this.inputDataSource.hasNext()) {\n            let mapped =  this.mapFunc(this.inputDataSource.next());\n            if(Array.isArray(mapped)) {\n                this.activeDataSource = new ArrayStreamDataSource(...mapped);\n            } else {\n                this.activeDataSource = mapped;\n            }\n            next = this.activeDataSource.hasNext();\n        }\n        return next;\n    }\n\n    next(): S {\n        return this.activeDataSource.next();\n    }\n\n    reset(): void {\n        this.inputDataSource.reset();\n    }\n}\n\n/**\n * For the time being we only need one collector\n * a collector which collects a stream back into arrays\n */\nexport class ArrayCollector<S> implements ICollector<S, Array<S>> {\n    private data: Array<S> = [];\n\n    collect(element: S) {\n        this.data.push(element);\n    }\n\n    get finalValue(): Array<S> {\n        return this.data;\n    }\n}\n\n/**\n * collects an assoc stream back to an assoc array\n */\nexport class AssocArrayCollector<S> implements ICollector<[string, S] | string, {[key:string]:S}> {\n\n    finalValue: {[key:string]:any} = {};\n\n    collect(element: [string, S] | string) {\n        this.finalValue[element[0] ?? <string>element] = element[1] ?? true;\n    }\n}\n\n/**\n * Form data collector for key value pair streams\n */\nexport class FormDataCollector implements ICollector<{ key: string, value: any }, FormData> {\n    finalValue: FormData = new FormData();\n\n    collect(element: { key: string; value: any }) {\n        this.finalValue.append(element.key, element.value);\n    }\n}\n\n/**\n * Form data collector for DomQuery streams\n */\nexport class QueryFormDataCollector implements ICollector<DomQuery, FormData> {\n    finalValue: FormData = new FormData();\n\n    collect(element: DomQuery) {\n        let toMerge = element.encodeFormElement();\n        if (toMerge.isPresent()) {\n            this.finalValue.append(element.name.value, toMerge.get(element.name).value);\n        }\n    }\n}\n\n/**\n * Encoded String collector from dom query streams\n */\nexport class QueryFormStringCollector implements ICollector<DomQuery, string> {\n\n    formData: [[string, string]] = <any>[];\n\n    collect(element: DomQuery) {\n        let toMerge = element.encodeFormElement();\n        if (toMerge.isPresent()) {\n            Stream.of(...toMerge.value).each(item => {\n                this.formData.push([element.name.value, item]);\n            });\n        }\n    }\n\n    get finalValue(): string {\n        return Stream.of(...this.formData)\n            .map<string>(keyVal => keyVal.join(\"=\"))\n            .reduce((item1, item2) => [item1, item2].join(\"&\"))\n            .orElse(\"\").value;\n    }\n}","/* Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/*\n * A small stream implementation\n */\nimport {IMonad, IValueHolder, Optional} from \"./Monad\";\nimport {\n    ArrayCollector,\n    ArrayStreamDataSource,\n    FilteredStreamDatasource, FlatMapStreamDataSource,\n    ICollector,\n    IStreamDataSource,\n    MappedStreamDataSource\n} from \"./SourcesCollectors\";\n\n/*\n * some typedefs to make the code more reabable\n */\nexport type StreamMapper<T> = (data: T) => IStreamDataSource<any>;\nexport type ArrayMapper<T> = (data: T) => Array<any>;\nexport type IteratableConsumer<T> = (data: T, pos ?: number) => void | boolean;\nexport type Reducable<T, V> = (val1: T | V, val2: T) => V;\nexport type Matchable<T> = (data: T) => boolean;\nexport type Mappable<T, R> = (data: T) => R;\nexport type Comparator<T> = (el1: T, el2: T) => number;\n\n/**\n * Generic interface defining a stream\n */\nexport interface IStream<T> {\n    /**\n     * Perform the operation fn on a single element in the stream at a time\n     * then pass the stream over for further processing\n     * This is basically an intermediate point in the stream\n     * with further processing happening later, do not use\n     * this method to gather data or iterate over all date for processing\n     * (for the second case each has to be used)\n     *\n     * @param fn the processing function, if it returns false, further processing is stopped\n     */\n    onElem(fn: IteratableConsumer<T>): IStream<T>;\n\n    /**\n     * Iterate over all elements in the stream and do some processing via fn\n     *\n     * @param fn takes a single element and if it returns false\n     * then further processing is stopped\n     */\n    each(fn: IteratableConsumer<T>): void;\n\n    /**\n     * maps a single element into another via fn\n     * @param fn function which takes one element in and returns another\n     */\n    map<R>(fn?: Mappable<T, R>): IStream<R>;\n\n    /**\n     * Takes an element in and returns a set of something\n     * the set then is flatted into a single stream to be further processed\n     *\n     * @param fn\n     */\n    flatMap<R>(fn?: StreamMapper<T> | ArrayMapper<T>): IStream<R>;\n\n    /**\n     * filtering, takes an element in and is processed by fn.\n     * If it returns false then further processing on this element is skipped\n     * if it returns true it is passed down the chain.\n     *\n     * @param fn\n     */\n    filter(fn?: Matchable<T>): IStream<T>;\n\n    /**\n     * functional reduce... takes two elements in the stream and reduces to\n     * one from left to right\n     *\n     * @param fn the reduction function for instance (val1,val2) => val1l+val2\n     * @param startVal an optional starting value, if provided the the processing starts with this element\n     * and further goes down into the stream, if not, then the first two elements are taken as reduction starting point\n     */\n    reduce<V>(fn: Reducable<T, V>, startVal: T | V): Optional<T | V>;\n\n    /**\n     * returns the first element in the stream is given as Optional\n     */\n    first(): Optional<T>;\n\n    /**\n     * Returns the last stream element (note in endless streams without filtering and limiting you will never reach that\n     * point hence producing an endless loop)\n     */\n    last(): Optional<T>;\n\n    /**\n     * returns true if there is at least one element where a call fn(element) produces true\n     *\n     * @param fn\n     */\n    anyMatch(fn: Matchable<T>): boolean;\n\n    /**\n     * returns true if all elmements produce true on a call to fn(element)\n     *\n     * @param fn\n     */\n    allMatch(fn: Matchable<T>): boolean;\n\n    /**\n     * returns true if no elmements produce true on a call to fn(element)\n     *\n     * @param fn\n     */\n    noneMatch(fn: Matchable<T>): boolean;\n\n    /**\n     * Collect the elements with a collector given\n     * There are a number of collectors provided\n     *\n     * @param collector\n     */\n    collect(collector: ICollector<T, any>): any;\n\n    /**\n     * sort on the stream, this is a special case\n     * of an endpoint, so your data which is fed in needs\n     * to be limited otherwise it will fail\n     * it still returns a stream for further processing\n     *\n     * @param comparator\n     */\n    sort(comparator: Comparator<T>): IStream<T>;\n\n    /**\n     * Limits the stream to a certain number of elements\n     *\n     * @param end the limit of the stream\n     */\n    limits(end: number): IStream<T>;\n\n    /**\n     * returns the stream collected into an array (90% use-case abbreviation\n     */\n    value: Array<T>;\n}\n\n/**\n * A simple typescript based reimplementation of streams\n *\n * This is the early eval version\n * for a lazy eval version check, LazyStream, which is api compatible\n * to this implementation, however with the benefit of being able\n * to provide infinite data sources and generic data providers, the downside\n * is, it might be a tad slower in some situations\n */\nexport class Stream<T> implements IMonad<T, Stream<any>>, IValueHolder<Array<T>>, IStream<T> {\n\n    value: Array<T>;\n    _limits = -1;\n\n    private pos = -1;\n\n    constructor(...value: T[]) {\n        this.value = value;\n    }\n\n    static of<T>(...data: Array<T>): Stream<T> {\n        return new Stream<T>(...data);\n    }\n\n    static ofAssoc<T>(data: { [key: string]: T }): Stream<[string, T]> {\n        return this.of(...Object.keys(data)).map(key => [key, data[key]]);\n    }\n\n    static ofDataSource<T>(dataSource: IStreamDataSource<T>) {\n        let value: T[] = [];\n        while (dataSource.hasNext()) {\n            value.push(dataSource.next());\n        }\n\n        return new Stream(...value);\n    }\n\n    limits(end: number): Stream<T> {\n        this._limits = end;\n        return this;\n    }\n\n    onElem(fn: (data: T, pos ?: number) => void | boolean): Stream<T> {\n        for (let cnt = 0; cnt < this.value.length && (this._limits == -1 || cnt < this._limits); cnt++) {\n            if (fn(this.value[cnt], cnt) === false) {\n                break;\n            }\n        }\n        return this;\n    }\n\n    each(fn: (data: T, pos ?: number) => void | boolean) {\n        this.onElem(fn);\n    }\n\n    map<R>(fn?: (data: T) => R): Stream<R> {\n        if (!fn) {\n            fn = (inval: any) => <R>inval;\n        }\n        let res: R[] = [];\n        this.each((item, cnt) => {\n            res.push(fn(item))\n        });\n\n        return new Stream<R>(...res);\n    }\n\n    /*\n     * we need to implement it to fullfill the contract, although it is used only internally\n     * all values are flattened when accessed anyway, so there is no need to call this methiod\n     */\n\n    flatMap<IStreamDataSource>(fn: (data: T) => IStreamDataSource | Array<any>): Stream<any> {\n        let ret = [];\n        this.each(item => {\n            let strmR: any = fn(item);\n            ret = Array.isArray(strmR) ? ret.concat(strmR) : ret.concat(...strmR.value);\n        });\n        return <Stream<any>>Stream.of(...ret);\n    }\n\n    filter(fn?: (data: T) => boolean): Stream<T> {\n        let res: Array<T> = [];\n        this.each((data) => {\n            if (fn(data)) {\n                res.push(data);\n            }\n        });\n        return new Stream<T>(...res);\n    }\n\n    reduce<V>(fn: Reducable<T, V | T>, startVal: V = null): Optional<V | T> {\n        let offset = startVal != null ? 0 : 1;\n        let val1: V | T = startVal != null ? startVal : this.value.length ? this.value[0] : null;\n\n        for (let cnt = offset; cnt < this.value.length && (this._limits == -1 || cnt < this._limits); cnt++) {\n            val1 = fn(val1, this.value[cnt]);\n        }\n        return Optional.fromNullable<V | T>(val1);\n    }\n\n    first(): Optional<T> {\n        return this.value && this.value.length ? Optional.fromNullable(this.value[0]) : Optional.absent;\n    }\n\n    last(): Optional<T> {\n        //could be done via reduce, but is faster this way\n        let length = this._limits > 0 ? Math.min(this._limits, this.value.length) : this.value.length;\n\n        return Optional.fromNullable(length ? this.value[length - 1] : null);\n    }\n\n    anyMatch(fn: Matchable<T>): boolean {\n        for (let cnt = 0; cnt < this.value.length && (this._limits == -1 || cnt < this._limits); cnt++) {\n            if (fn(this.value[cnt])) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    allMatch(fn: Matchable<T>): boolean {\n        if (!this.value.length) {\n            return false;\n        }\n        let matches = 0;\n        for (let cnt = 0; cnt < this.value.length; cnt++) {\n            if (fn(this.value[cnt])) {\n                matches++;\n            }\n        }\n        return matches == this.value.length;\n    }\n\n    noneMatch(fn: Matchable<T>): boolean {\n        let matches = 0;\n        for (let cnt = 0; cnt < this.value.length; cnt++) {\n            if (!fn(this.value[cnt])) {\n                matches++;\n            }\n        }\n        return matches == this.value.length;\n    }\n\n    sort(comparator: Comparator<T>): IStream<T> {\n        let newArr = this.value.slice().sort(comparator);\n        return Stream.of(...newArr);\n    }\n\n    collect(collector: ICollector<T, any>): any {\n        this.each(data => collector.collect(data));\n        return collector.finalValue;\n    }\n\n    //-- internally exposed methods needed for the interconnectivity\n    hasNext() {\n        let isLimitsReached = this._limits != -1 && this.pos >= this._limits - 1;\n        let isEndOfArray = this.pos >= this.value.length - 1;\n        return !(isLimitsReached || isEndOfArray);\n    }\n\n    next(): T {\n        if (!this.hasNext()) {\n            return null;\n        }\n        this.pos++;\n        return this.value[this.pos];\n    }\n\n    reset() {\n        this.pos = -1;\n    }\n\n}\n\n/**\n * Lazy implementation of a Stream\n * The idea is to connect the intermediate\n * streams as datasources like a linked list\n * with reverse referencing and for special\n * operations like filtering flatmapping\n * have intermediate datasources in the list\n * with specialized functions.\n *\n * Sort of a modified pipe valve pattern\n * the streams are the pipes the intermediate\n * data sources are the valves\n *\n * We then can use passed in functions to control\n * the flow in the valves\n *\n * That way we can have a lazy evaluating stream\n *\n * So if an endpoint requests data\n * a callback trace goes back the stream list\n * which triggers an operation upwards\n * which sends data down the drain which then is processed\n * and filtered until one element hits the endpoint.\n *\n * That is repeated, until all elements are processed\n * or an internal limit is hit.\n *\n */\nexport class LazyStream<T> implements IStreamDataSource<T>, IStream<T>, IMonad<T, LazyStream<any>> {\n\n    protected dataSource: IStreamDataSource<T>;\n    _limits = -1;\n\n    /*\n     * needed to have the limits check working\n     * we need to keep track of the current position\n     * in the stream\n     */\n    pos = -1;\n\n    static of<T>(...values: Array<T>): LazyStream<T> {\n        return new LazyStream<T>(new ArrayStreamDataSource(...values));\n    }\n\n    static ofAssoc<T>(data: { [key: string]: T }): LazyStream<[string, T]> {\n        return this.of(...Object.keys(data)).map(key => [key, data[key]]);\n    }\n\n    static ofStreamDataSource<T>(value: IStreamDataSource<T>): LazyStream<T> {\n        return new LazyStream(value);\n    }\n\n    constructor(parent: IStreamDataSource<T>) {\n        this.dataSource = parent;\n\n    }\n\n    hasNext(): boolean {\n        if (this.isOverLimits()) {\n            return false;\n        }\n\n        return this.dataSource.hasNext();\n    }\n\n    next(): T {\n        let next = this.dataSource.next();\n        // @ts-ignore\n        this.pos++;\n        return next;\n    }\n\n    reset(): void {\n        this.dataSource.reset();\n        this.pos = 0;\n        this._limits = -1;\n    }\n\n    nextFilter(fn: Matchable<T>): T {\n        if (this.hasNext()) {\n            let newVal: T = this.next();\n            if (!fn(newVal)) {\n                return this.nextFilter(fn);\n            }\n            return <T>newVal;\n        }\n        return null;\n    }\n\n    limits(max: number): LazyStream<T> {\n        this._limits = max;\n        return this;\n    }\n\n    //main stream methods\n    collect(collector: ICollector<T, any>): any {\n        while (this.hasNext()) {\n            let t = this.next();\n            collector.collect(<T>t);\n        }\n        return collector.finalValue;\n    }\n\n    onElem(fn: IteratableConsumer<T>): LazyStream<T> {\n        return new LazyStream(new MappedStreamDataSource((el) => {\n            if (fn(el, this.pos) === false) {\n                this.stop();\n            }\n            return el;\n        }, this));\n    }\n\n    filter(fn: Matchable<T>): LazyStream<T> {\n        return <LazyStream<T>>new LazyStream<T>(new FilteredStreamDatasource<any>(fn, this));\n    }\n\n    map<R>(fn: Mappable<T, R>): LazyStream<any> {\n        return new LazyStream(new MappedStreamDataSource(fn, this));\n    }\n\n    flatMap<StreamMapper>(fn: StreamMapper | ArrayMapper<any>): LazyStream<any> {\n\n        return new LazyStream<any>(new FlatMapStreamDataSource(<any>fn, this));\n    }\n\n    //endpoint\n    each(fn: IteratableConsumer<T>) {\n        while (this.hasNext()) {\n            if (fn(this.next()) === false) {\n                this.stop();\n            }\n        }\n    }\n\n    reduce<V>(fn: Reducable<T, V>, startVal: T | V = null): Optional<T | V> {\n        if (!this.hasNext()) {\n            return Optional.absent;\n        }\n        let value1 = null;\n        let value2 = null;\n        if (startVal != null) {\n            value1 = startVal;\n            value2 = this.next();\n        } else {\n            value1 = this.next();\n            if (!this.hasNext()) {\n                return Optional.fromNullable(value1);\n            }\n            value2 = this.next();\n        }\n        value1 = fn(value1, value2);\n        while (this.hasNext()) {\n            value2 = this.next();\n            value1 = fn(value1, value2);\n        }\n\n        return Optional.fromNullable(value1);\n    }\n\n    last(): Optional<T> {\n        if (!this.hasNext()) {\n            return Optional.absent;\n        }\n        return this.reduce((el1, el2) => el2);\n    }\n\n    first(): Optional<T> {\n        this.reset();\n        if (!this.hasNext()) {\n            return Optional.absent;\n        }\n        return Optional.fromNullable(this.next());\n    }\n\n    anyMatch(fn: Matchable<T>): boolean {\n        while (this.hasNext()) {\n            if (fn(this.next())) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    allMatch(fn: Matchable<T>): boolean {\n        while (this.hasNext()) {\n            if (!fn(this.next())) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    noneMatch(fn: Matchable<T>): boolean {\n        while (this.hasNext()) {\n            if (fn(this.next())) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    sort(comparator: Comparator<T>): IStream<T> {\n        let arr = this.collect(new ArrayCollector());\n        arr = arr.sort(comparator);\n        return LazyStream.of(...arr);\n    }\n\n    get value(): Array<T> {\n        return this.collect(new ArrayCollector<T>());\n    }\n\n    private stop() {\n        this.pos = this._limits + 1000000000;\n    }\n\n    private isOverLimits() {\n        return this._limits != -1 && this.pos >= this._limits - 1;\n    }\n\n}\n\n\n","/* Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Lang} from \"./Lang\";\nimport {DomQuery} from \"./DomQuery\";\nimport isString = Lang.isString;\n\ndeclare let ActiveXObject: any;\n\n/**\n * xml query as specialized case for DomQuery\n */\nexport class XMLQuery extends DomQuery {\n\n    constructor(rootNode: Document | string | DomQuery, docType: DOMParserSupportedType = \"text/xml\") {\n\n\n        let createIe11DomQueryShim = (): DOMParser => {\n            //at the time if wroting ie11 is the only relevant browser\n            //left withut any DomQuery support\n            let parser = new ActiveXObject(\"Microsoft.XMLDOM\");\n            parser.async = false;\n            //we shim th dom parser from ie in\n            return <any> {\n                parseFromString: (text: string, contentType: string): Document => {\n                    return parser.loadXML(text);\n                }\n            }\n        };\n\n        let parseXML = (xml: string): Document => {\n            if(xml == null) {\n                return null;\n            }\n            let domParser: DOMParser = Lang.saveResolveLazy<DOMParser>(\n                () => new window.DOMParser(),\n                (): DOMParser =>  createIe11DomQueryShim()\n            ).value;\n            return domParser.parseFromString(xml, docType);\n        };\n\n        if(isString(rootNode)) {\n            super(parseXML(<string>rootNode))\n        } else {\n            super(rootNode);\n        }\n    }\n\n\n    isXMLParserError(): boolean {\n        return this.querySelectorAll(\"parsererror\").isPresent();\n    }\n\n\n\n    toString(): string {\n        let ret = [];\n        this.eachElem((node: any) => {\n            let serialized = (<any>window)?.XMLSerializer?.constructor()?.serializeToString(node) ?? node?.xml;\n            if(!!serialized) {\n                ret.push(serialized);\n            }\n        });\n        return ret.join(\"\");\n    }\n\n\n    parserErrorText(joinstr: string): string {\n        return this.querySelectorAll(\"parsererror\").textContent(joinstr);\n    }\n\n    static parseXML(txt: string): XMLQuery {\n        return new  XMLQuery(txt);\n    }\n    static parseHTML(txt: string): XMLQuery {\n        return new  XMLQuery(txt, \"text/html\");\n    }\n\n    static fromString(txt: string, parseType: DOMParserSupportedType = \"text/xml\"): XMLQuery {\n        return new  XMLQuery(txt,parseType);\n    }\n}\n\nexport const XQ = XMLQuery;\nexport type XQ = XMLQuery;","export {DomQuery, ElementAttribute, DomQueryCollector, DQ} from \"./DomQuery\";\nexport {Lang} from \"./Lang\";\nexport {Config, Monad, IValueHolder, IFunctor, IMonad, IIdentity, Optional, ValueEmbedder} from \"./Monad\";\nexport {XMLQuery, XQ} from \"./XmlQuery\";\nexport {Stream, LazyStream, IteratableConsumer, IStream} from \"./Stream\";\nexport {\n    ArrayStreamDataSource,\n    MappedStreamDataSource,\n    FilteredStreamDatasource,\n    FlatMapStreamDataSource,\n    QueryFormStringCollector,\n    IStreamDataSource,\n    ICollector,\n    ArrayCollector,\n    AssocArrayCollector,\n    FormDataCollector,\n    QueryFormDataCollector\n} from \"./SourcesCollectors\";\n\n\n","/* Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {IListener} from \"./util/ListenerQueue\";\nimport {Response} from \"./xhrCore/Response\";\nimport {XhrRequest} from \"./xhrCore/XhrRequest\";\nimport {AsynchronouseQueue} from \"./util/AsyncQueue\";\nimport {AssocArrayCollector, Config, DQ, Lang, Optional, Stream} from \"../ext/monadish\";\nimport {Assertions} from \"./util/Assertions\";\nimport {XhrFormData} from \"./xhrCore/XhrFormData\";\nimport {ExtDomquery} from \"./util/ExtDomQuery\";\nimport {ErrorData} from \"./xhrCore/ErrorData\";\nimport {EventData} from \"./xhrCore/EventData\";\nimport {ExtLang} from \"./util/Lang\";\nimport {\n    CTX_PARAM_EXECUTE,\n    CTX_PARAM_PASS_THR,\n    CTX_PARAM_SRC_CTL_ID,\n    CTX_PARAM_SRC_FRM_ID,\n    CTX_PARAM_TR_TYPE,\n    IDENT_ALL,\n    IDENT_FORM,\n    IDENT_NONE,\n    IDENT_THIS,\n    MYFACES,\n    ON_ERROR,\n    ON_EVENT,\n    P_AJAX,\n    P_CLIENT_WINDOW,\n    P_EVT,\n    P_EXECUTE,\n    P_PARTIAL_SOURCE,\n    P_RENDER,\n    P_RESET_VALUES,\n    P_WINDOW_ID,\n    RENDER,\n    REQ_TYPE_POST,\n    SOURCE,\n    TAG_FORM\n} from \"./core/Const\";\nimport {\n    resolveDefaults,\n    resolveDelay,\n    resolveForm,\n    resolveTimeout\n} from \"./xhrCore/RequestDataResolver\";\n\ndeclare var jsf: any;\n\n/*\n * allowed project stages\n */\nenum ProjectStages {\n    Production = \"Production\",\n    Development = \"Development\",\n    SystemTest = \"SystemTest\",\n    UnitTest = \"UnitTest\"\n}\n\n/*\n *   blockfilter for the passthrough filtering; the attributes given here\n *   will not be transmitted from the options into the passthrough\n */\nenum BlockFilter {\n    onerror = \"onerror\",\n    onevent = \"onevent\",\n    render = \"render\",\n    execute = \"execute\",\n    myfaces = \"myfaces\",\n    delay = \"delay\",\n    timeout = \"timeout\",\n    windowId = \"windowId\"\n}\n\n/**\n * Core Implementation\n * to distinct between api and impl\n *\n * The original idea was to make the implementation pluggable\n * but this is pointless, you always can overwrite the thin api layer\n * however a dedicated api makes sense for readability reasons\n */\nexport module Implementation {\n\n    import trim = Lang.trim;\n    import getMessage = ExtLang.getMessage;\n    import getGlobalConfig = ExtLang.getGlobalConfig;\n    import assert = Assertions.assert;\n\n\n\n    let projectStage: string = null;\n    let separator: string = null;\n    let eventQueue = [];\n    let errorQueue = [];\n    export let requestQueue: AsynchronouseQueue<XhrRequest> = null;\n    /*error reporting threshold*/\n    let threshold = \"ERROR\";\n\n    /**\n     * fetches the separator char from the given script tags\n     *\n     * @return {char} the separator char for the given script tags\n     */\n    export function getSeparatorChar(): string {\n        return resolveGlobalConfig()?.separator ??\n            this?.separator ??\n            (separator = ExtDomquery.searchJsfJsFor(/separator=([^&;]*)/).orElse(\":\").value);\n    }\n\n    /**\n     * this is for testing purposes only, since AjaxImpl is a module\n     * we need to reset for every unit test its internal states\n     */\n    export function reset() {\n        projectStage = null;\n        separator = null;\n        eventQueue = [];\n        errorQueue = [];\n        requestQueue = null;\n    }\n\n    /**\n     * @return the project stage also emitted by the server:\n     * it cannot be cached and must be delivered over the server\n     * The value for it comes from the requestInternal parameter of the jsf.js script called \"stage\".\n     */\n    export function getProjectStage(): string | null {\n        return resolveGlobalConfig()?.projectStage ??\n            this?.projectStage ??\n            (projectStage = resolveProjectStateFromURL());\n    }\n\n    /**\n     * resolves the project stage as url parameter\n     * @return the project stage or null\n     */\n    export function resolveProjectStateFromURL(): string | null {\n\n        /* run through all script tags and try to find the one that includes jsf.js */\n        let foundStage = <string>ExtDomquery.searchJsfJsFor(/stage=([^&;]*)/).value;\n        return (foundStage in ProjectStages) ? foundStage : null;\n    }\n\n    /**\n     * implementation of the jsf.util.chain functionality\n     *\n     * @param source\n     * @param event\n     * @param funcs\n     */\n    export function chain(source: any, event: Event, ...funcs: EvalFuncs): boolean {\n\n        let ret = true;\n        let resolveAndExecute = function (func: Function | string) {\n            if (\"string\" != typeof func) {\n                //function is passed down as chain parameter, can be executed as is\n                return (ret = ret && ((<Function>func).call(source, event) !== false));\n            } else {\n                //either a function or a string can be passed in case of a string we have to wrap it into another function\n                //it it is not a plain executable code but a definition\n                let sourceCode = trim(<string>func);\n                if (sourceCode.indexOf(\"function \") == 0) {\n                    sourceCode = `return ${sourceCode} (event)`;\n                }\n                return (ret = ret && (new Function(\"event\", sourceCode).call(source, event) !== false));\n            }\n        };\n\n        //we can use our stream each functionality to run our chain here..\n        //the no return value == false stop stream functionality is handled by our resolveAndExecute\n        <any>Stream.of(...funcs).each(func => resolveAndExecute(func));\n        return ret;\n    }\n\n    /**\n     * this function has to send the ajax requests\n     *\n     * following request conditions must be met:\n     * <ul>\n     *  <li> the request must be sent asynchronously! </li>\n     *  <li> the request must be a POST!!! request </li>\n     *  <li> the request url must be the form action attribute </li>\n     *  <li> all requests must be queued with a client side request queue to ensure the request ordering!</li>\n     * </ul>\n     *\n     * @param el any dom element no matter being it html or jsf, from which the event is emitted\n     * @param event any javascript event supported by that object\n     * @param opts  map of options being pushed into the ajax cycle\n     *\n     * a) transformArguments out of the function\n     * b) passThrough handling with a map copy with a filter map block map\n     */\n    export function request(el: ElemDef, event?: Event, opts ?: Options) {\n\n        const {\n            resolvedEvent,\n            options,\n            elem,\n            elementId,\n            requestCtx,\n            internalCtx,\n            windowId,\n            isResetValues\n        } = resolveDefaults(event, opts, el);\n\n        Assertions.assertRequestIntegrity(options, elem);\n\n        requestCtx.assignIf(!!windowId, P_WINDOW_ID).value = windowId;\n\n        requestCtx.assign(CTX_PARAM_PASS_THR).value = filterPassthroughValues(options.value);\n\n        requestCtx.assignIf(!!resolvedEvent, CTX_PARAM_PASS_THR, P_EVT).value = resolvedEvent?.type;\n\n        /**\n         * ajax pass through context with the source\n         * onresolvedEvent and onerror\n         */\n        requestCtx.assign(SOURCE).value = elementId.value;\n\n        /**\n         * on resolvedEvent and onError...\n         * those values will be traversed later on\n         * also into the response context\n         */\n        requestCtx.assign(ON_EVENT).value = options.value?.onevent;\n        requestCtx.assign(ON_ERROR).value = options.value?.onerror;\n\n        /**\n         * lets drag the myfaces config params also in\n         */\n        requestCtx.assign(MYFACES).value = options.value?.myfaces;\n        /**\n         * fetch the parent form\n         *\n         * note we also add an override possibility here\n         * so that people can use dummy forms and work\n         * with detached objects\n         */\n        let form: DQ = resolveForm(requestCtx, elem, resolvedEvent);\n\n        /**\n         * binding contract the javax.faces.source must be set\n         */\n        requestCtx.assign(CTX_PARAM_PASS_THR, P_PARTIAL_SOURCE).value = elementId.value;\n\n        /**\n         * javax.faces.partial.ajax must be set to true\n         */\n        requestCtx.assign(CTX_PARAM_PASS_THR, P_AJAX).value = true;\n\n        /**\n         * binding contract the javax.faces.source must be set\n         */\n        requestCtx.assign(CTX_PARAM_PASS_THR, P_PARTIAL_SOURCE).value = elementId.value;\n\n        /**\n         * if resetValues is set to true\n         * then we have to set javax.faces.resetValues as well\n         * as pass through parameter\n         * the value has to be explicitly true, according to\n         * the specs jsdoc\n         */\n        requestCtx.assignIf(isResetValues, CTX_PARAM_PASS_THR, P_RESET_VALUES).value = true;\n\n        //additional meta information to speed things up, note internal non jsf\n        //pass through options are stored under _mfInternal in the context\n        internalCtx.assign(CTX_PARAM_SRC_FRM_ID).value = form.id.value;\n        internalCtx.assign(CTX_PARAM_SRC_CTL_ID).value = elementId.value;\n        internalCtx.assign(CTX_PARAM_TR_TYPE).value = REQ_TYPE_POST;\n\n        //mojarra compatibility, mojarra is sending the form id as well\n        //this is not documented behavior but can be determined by running\n        //mojarra under blackbox conditions\n        //i assume it does the same as our formId_submit=1 so leaving it out\n        //wont hurt but for the sake of compatibility we are going to add it\n\n        requestCtx.assign(CTX_PARAM_PASS_THR, form.id.value).value = form.id.value;\n\n        assignClientWindowId(form, requestCtx);\n\n        assignExecute(options, requestCtx, form, elementId.value);\n        assignRender(options, requestCtx, form, elementId.value);\n\n        let delay: number = resolveDelay(options);\n        let timeout: number = resolveTimeout(options);\n\n        //now we enqueue the request as asynchronous runnable into our request\n        //queue and let the queue take over the rest\n        queueHandler.addRequestToQueue(elem, form, requestCtx, internalCtx, delay, timeout);\n    }\n\n    /**\n     * Spec. 13.3.3\n     * Examining the response markup and updating the DOM tree\n     * @param {XMLHttpRequest} request - the ajax request\n     * @param {Object} context - the ajax context\n     */\n    export function response(request: XMLHttpRequest, context: Context) {\n        Response.processResponse(request, context);\n    }\n\n    /**\n     * adds an error handler to the error queue\n     *\n     * @param errorListener the error listener handler\n     */\n    export function addOnError(errorListener: IListener<ErrorData>) {\n        /*error handling already done in the assert of the queue*/\n        errorQueue.push(errorListener);\n    }\n\n    /**\n     * adds an event handler to the event queue\n     *\n     * @param eventListener the event listener handler\n     */\n    export function addOnEvent(eventListener: IListener<EventData>) {\n        /*error handling already done in the assert of the queue*/\n        eventQueue.push(eventListener);\n    }\n\n    // noinspection JSUnusedLocalSymbols\n    /**\n     * sends an event to the event handlers\n     *\n     * @param data the event data object hosting the event data according to the spec @see EventData for what is reachable\n     * @param localHandler an optional event handler, which is processed before the event handler chain\n     */\n    export function sendEvent(data: EventData, localHandler = function (data: EventData) {\n    }) {\n        /*now we serve the queue as well*/\n        localHandler(data);\n        eventQueue.forEach(fn => fn(data));\n    }\n\n    /**\n     * error handler behavior called internally\n     * and only into the impl it takes care of the\n     * internal message transformation to a myfaces internal error\n     * and then uses the standard send error mechanisms\n     * also a double error logging prevention is done as well\n     *\n     * @param request the request currently being processed\n     * @param context the context affected by this error\n     * @param exception the exception being thrown\n     * @param clearRequestQueue if set to true, clears the request queue of all pending requests\n     */\n    export function stdErrorHandler(request: XMLHttpRequest,\n                                    context: Config,\n                                    exception: any,\n                                    clearRequestQueue = false) {\n        //newer browsers do not allow to hold additional values on native objects like exceptions\n        //we hence capsule it into the request, which is gced automatically\n        //on ie as well, since the stdErrorHandler usually is called between requests\n        //this is a valid approach\n        try {\n            if (threshold == \"ERROR\") {\n                let errorData = ErrorData.fromClient(exception);\n                sendError(errorData);\n            }\n        } finally {\n            if (clearRequestQueue) {\n                requestQueue.cleanup();\n            }\n        }\n    }\n\n    // noinspection JSUnusedLocalSymbols\n    /**\n     * implementation triggering the error chain\n     *\n     *\n     *\n     *  handles the errors, in case of an onError exists within the context the onError is called as local error handler\n     *  the registered error handlers in the queue receiv an error message to be dealt with\n     *  and if the projectStage is at development an alert box is displayed\n     *\n     *  note: we have additional functionality here, via the global config myfaces.config.defaultErrorOutput a function can be provided\n     *  which changes the default output behavior from alert to something else\n     *\n     * @param errorData the error data to be displayed\n     * @param localHandler an optional local error handler which has to be processed before the error handler queue\n     */\n    export function sendError(errorData: ErrorData, localHandler = function (data: any) {\n    }) {\n\n        localHandler(errorData);\n        errorQueue.forEach((errorCallback: Function) => {\n            errorCallback(errorData);\n        });\n        let displayError: (string) => void = getGlobalConfig(\"defaultErrorOutput\", (console ? console.error : alert));\n        displayError(errorData);\n    }\n\n    /**\n     * @node optional element or id defining a rootnode where an element with the id \"javax.faces.windowId\" is hosted\n     * @return the client window id of the current window, if one is given if none is found, null is returned\n     */\n    export function getClientWindow(node ?: Element | string): string | null {\n        const ALTERED = \"___mf_id_altered__\";\n        const INIT = \"___init____\";\n\n        /**\n         * the search root for the dom element search\n         */\n        let searchRoot = new DQ(node || document.body);\n\n        /**\n         * lazy helper to fetch the window id from the window url\n         */\n        let fetchWindowIdFromUrl = () => ExtDomquery.searchJsfJsFor(/jfwid=([^&;]*)/).orElse(null).value;\n\n        /**\n         * functional double check based on stream reduction\n         * the values should be identical or on INIT value which is a premise to\n         * skip the first check\n         *\n         * @param value1\n         * @param value2\n         */\n        let doubleCheck = (value1: string, value2: string) => {\n            if (value1 == ALTERED) {\n                return value1;\n            } else if (value1 == INIT) {\n                return value2;\n            } else if (value1 != value2) {\n                return ALTERED;\n            }\n            return value2;\n        };\n\n        /**\n         * helper for cleaner code, maps the value from an item\n         *\n         * @param item\n         */\n        let getValue = (item: DQ) => item.attr(\"value\").value;\n        /**\n         * fetch the window id from the forms\n         * window ids must be present in all forms\n         * or non existent. If they exist all of them must be the same\n         */\n        let formWindowId: Optional<string> = searchRoot.stream.map<string>(getValue).reduce(doubleCheck, INIT);\n\n        //if the resulting window id is set on altered then we have an unresolvable problem\n        assert(formWindowId.value != ALTERED, \"Multiple different windowIds found in document\");\n\n        /**\n         * return the window id or null\n         * prio, forms under node/document and if not given then from the url\n         */\n        return formWindowId.value ?? fetchWindowIdFromUrl();\n    }\n\n    /**\n     * collect and encode data for a given form element (must be of type form)\n     * find the javax.faces.ViewState element and encode its value as well!\n     * @return a concatenated string of the encoded values!\n     *\n     * @throws Error in case of the given element not being of type form!\n     * https://issues.apache.org/jira/browse/MYFACES-2110\n     */\n    export function getViewState(form: Element | string): string {\n        /**\n         *  typecheck assert!, we opt for strong typing here\n         *  because it makes it easier to detect bugs\n         */\n\n        let element: DQ = DQ.byId(form, true);\n        if (!element.isTag(TAG_FORM)) {\n            throw new Error(getMessage(\"ERR_VIEWSTATE\"));\n        }\n\n        let formData = new XhrFormData(element);\n        return formData.toString();\n    }\n\n    /**\n     * this at the first sight looks like a weird construct, but we need to do it this way\n     * for testing, we cannot proxy addRequestToQueue from the testing frameworks directly\n     * but we need to keep it under unit tests.\n     */\n    export let queueHandler = {\n        /**\n         * public to make it shimmable for tests\n         *\n         * adds a new request to our queue for further processing\n         */\n        addRequestToQueue: function (elem: DQ, form: DQ, reqCtx: Config, respPassThr: Config, delay = 0, timeout = 0) {\n            requestQueue = requestQueue ?? new AsynchronouseQueue<XhrRequest>();\n            requestQueue.enqueue(new XhrRequest(elem, form, reqCtx, respPassThr, [], timeout), delay);\n        }\n    };\n\n    //----------------------------------------------- Methods ---------------------------------------------------------------------\n\n    /**\n     * the idea is to replace some placeholder parameters with their respective values\n     * placeholder params like  @all, @none, @form, @this need to be replaced by\n     * the values defined by the specification\n     *\n     * This function does it for the render parameters\n     *\n     * @param requestOptions the source options coming in as options object from jsf.ajax.request (options parameter)\n     * @param targetContext the receiving target context\n     * @param issuingForm the issuing form\n     * @param sourceElementId the executing element triggering the jsf.ajax.request (id of it)\n     */\n    function assignRender(requestOptions: Config, targetContext: Config, issuingForm: DQ, sourceElementId: string) {\n        if (requestOptions.getIf(RENDER).isPresent()) {\n            remapDefaultConstants(targetContext.getIf(CTX_PARAM_PASS_THR).get({}), P_RENDER, <string>requestOptions.getIf(RENDER).value, issuingForm, <any>sourceElementId);\n        }\n    }\n\n    /**\n     * the idea is to replace some placeholder parameters with their respective values\n     * placeholder params like  @all, @none, @form, @this need to be replaced by\n     * the values defined by the specification\n     *\n     * This function does it for the execute parameters\n     *\n     * @param requestOptions the source options coming in as options object from jsf.ajax.request (options parameter)\n     * @param targetContext the receiving target context\n     * @param issuingForm the issuing form\n     * @param sourceElementId the executing element triggering the jsf.ajax.request (id of it)\n     */\n    function assignExecute(requestOptions: Config, targetContext: Config, issuingForm: DQ, sourceElementId: string) {\n\n        if (requestOptions.getIf(CTX_PARAM_EXECUTE).isPresent()) {\n            /*the options must be a blank delimited list of strings*/\n            /*compliance with Mojarra which automatically adds @this to an execute\n             * the spec rev 2.0a however states, if none is issued nothing at all should be sent down\n             */\n            requestOptions.assign(CTX_PARAM_EXECUTE).value = [requestOptions.getIf(CTX_PARAM_EXECUTE).value, IDENT_THIS].join(\" \");\n            remapDefaultConstants(targetContext.getIf(CTX_PARAM_PASS_THR).get({}), P_EXECUTE, <string>requestOptions.getIf(CTX_PARAM_EXECUTE).value, issuingForm, <any>sourceElementId);\n        } else {\n            targetContext.assign(CTX_PARAM_PASS_THR, P_EXECUTE).value = sourceElementId;\n        }\n    }\n\n    /**\n     * apply the browser tab where the request was originating from\n     *\n     * @param form the form hosting the client window id\n     * @param targetContext the target context receiving the value\n     */\n    function assignClientWindowId(form: DQ, targetContext: Config) {\n        let clientWindow = jsf.getClientWindow(form.getAsElem(0).value);\n        if (clientWindow) {\n            targetContext.assign(CTX_PARAM_PASS_THR, P_CLIENT_WINDOW).value = clientWindow;\n        }\n    }\n\n    /**\n     * transforms the user values to the expected one\n     * with the proper none all form and this handling\n     * (note we also could use a simple string replace but then\n     * we would have had double entries under some circumstances)\n     *\n     * there are several standardized constants which need a special treatment\n     * like @all, @none, @form, @this\n     *\n     * @param targetConfig the target configuration receiving the final values\n     * @param targetKey the target key\n     * @param userValues the passed user values (aka input string which needs to be transformed)\n     * @param issuingForm the form where the issuing element originates\n     * @param issuingElementId the issuing element\n     */\n    function remapDefaultConstants(targetConfig: Config, targetKey: string, userValues: string, issuingForm: DQ, issuingElementId: string): Config {\n        //a cleaner implementation of the transform list method\n\n        let iterValues = (userValues) ? trim(userValues).split(/\\s+/gi) : [];\n        let ret = [];\n        let processed = {};\n\n        //the idea is simply to loop over all values and then replace\n        //their generic values and filter out doubles\n        //this is more readable than the old indexed based solution\n        //and not really slower because we had to build up the index in our old solution\n        //anyway\n        for (let cnt = 0; cnt < iterValues.length; cnt++) {\n            //avoid doubles\n            if (iterValues[cnt] in processed) {\n                continue;\n            }\n            switch (iterValues[cnt]) {\n                //@none no values should be sent\n                case IDENT_NONE:\n                    return targetConfig.delete(targetKey);\n                //@all is a pass through case according to the spec\n                case IDENT_ALL:\n                    targetConfig.assign(targetKey).value = IDENT_ALL;\n                    return targetConfig;\n                //@form pushes the issuing form id into our list\n                case IDENT_FORM:\n                    ret.push(issuingForm.id.value);\n                    processed[issuingForm.id.value] = true;\n                    break;\n                //@this is replaced with the current issuing element id\n                case IDENT_THIS:\n                    if (!(issuingElementId in processed)) {\n                        ret.push(issuingElementId);\n                        processed[issuingElementId] = true;\n                    }\n                    break;\n                default:\n                    ret.push(iterValues[cnt]);\n                    processed[iterValues[cnt]] = true;\n            }\n        }\n        //We now add the target as joined list\n        targetConfig.assign(targetKey).value = ret.join(\" \");\n        return targetConfig;\n    }\n\n    /**\n     * filter the options given with a blacklist so that only\n     * the values required for passthough land in the ajax request\n     *\n     * @param mappedOpts the options to be filtered\n     */\n    function filterPassthroughValues(mappedOpts: { [key: string]: any }) {\n        //we now can use the full code reduction given by our stream api\n        //to filter\n        return Stream.ofAssoc(mappedOpts)\n            .filter(item => !(item[0] in BlockFilter))\n            .collect(new AssocArrayCollector());\n    }\n\n    function resolveGlobalConfig(): any {\n        return  window?.[MYFACES]?.config ?? {};\n    }\n\n}\n","/**\n * Typescript port of the jsf.push part in the myfaces implementation\n */\n\n//TODO still work in progress\n//this is a 1:1 port for the time being\nimport {jsf} from \"../api/Jsf\";\nimport {MAX_RECONNECT_ATTEMPTS, REASON_EXPIRED, RECONNECT_INTERVAL} from \"./core/Const\";\n\n\n/**\n * Implementation class for the push functionality\n */\nexport module PushImpl {\n\n\n\n    const URL_PROTOCOL = window.location.protocol.replace(\"http\", \"ws\") + \"//\";\n\n\n    //we expose the member variables for testing purposes\n    //they are not directly touched outside of tests\n\n    /* socket map by token */\n    export let sockets = {};\n    /* component attributes by clientId */\n    export let components = {};\n    /* client ids by token (share websocket connection) */\n    export let clientIdsByTokens = {};\n\n\n    //needed for testing\n    export function reset() {\n        sockets = {};\n        components = {}\n        clientIdsByTokens = {}\n    }\n\n    /*\n     * Api implementations, exposed functions\n     */\n\n    /**\n     *\n     * @param {function} onopen The function to be invoked when the web socket is opened.\n     * @param {function} onmessage The function to be invoked when a message is received.\n     * @param {function} onclose The function to be invoked when the web socket is closed.\n     * @param {boolean} autoconnect Whether or not to immediately open the socket. Defaults to <code>false</code>.\n     */\n    export function init(socketClientId: string,\n                         uri: string,\n                         channel: string,\n                         onopen: Function,\n                         onmessage: Function,\n                         onclose: Function,\n                         behaviorScripts: any,\n                         autoconnect: boolean) {\n        onclose = resolveFunction(onclose);\n\n        if (!window.WebSocket) { // IE6-9.\n            onclose(-1, channel);\n            return;\n        }\n\n        let channelToken = uri.substr(uri.indexOf('?') + 1);\n\n        if (!components[socketClientId]) {\n            components[socketClientId] = {\n                'channelToken': channelToken,\n                'onopen': resolveFunction(onopen),\n                'onmessage' : resolveFunction(onmessage),\n                'onclose': onclose,\n                'behaviors': behaviorScripts,\n                'autoconnect': autoconnect};\n            if (!clientIdsByTokens[channelToken]) {\n                clientIdsByTokens[channelToken] = [];\n            }\n            clientIdsByTokens[channelToken].push(socketClientId);\n            if (!sockets[channelToken]){\n                sockets[channelToken] = new Socket(channelToken,\n                    getBaseURL(uri), channel);\n            }\n        }\n\n        if (autoconnect) {\n            jsf.push.open(socketClientId);\n        }\n    }\n\n    export function open(socketClientId: string) {\n        getSocket(components?.[socketClientId]?.channelToken).open();\n    }\n\n    export function close(socketClientId: string) {\n        getSocket(components?.[socketClientId].channelToken).close();\n    }\n\n    // Private helper classes\n    // Private classes functions ----------------------------------------------------------------------------------\n    /**\n     * Creates a reconnecting web socket. When the web socket successfully connects on first attempt, then it will\n     * automatically reconnect on timeout with cumulative intervals of 500ms with a maximum of 25 attempts (~3 minutes).\n     * The <code>onclose</code> function will be called with the error code of the last attempt.\n     * @constructor\n     * @param {string} channelToken the channel token associated with this websocket connection\n     * @param {string} url The URL of the web socket\n     * @param {string} channel The name of the web socket channel.\n     */\n\n    class Socket {\n\n        socket: WebSocket;\n        reconnectAttempts = 0;\n\n        constructor(private channelToken: string, private url: string, private channel: string) {\n        }\n\n        open() {\n            if (this.socket && this.socket.readyState == 1) {\n                return;\n            }\n            this.socket = new WebSocket(this.url);\n\n            this.bindCallbacks();\n        }\n\n        onopen(event: any) {\n            if (!this.reconnectAttempts) {\n                let clientIds = clientIdsByTokens[this.channelToken];\n                for (let i = clientIds.length - 1; i >= 0; i--) {\n                    let socketClientId = clientIds[i];\n                    components[socketClientId]['onopen'](this.channel);\n                }\n            }\n            this.reconnectAttempts = 0;\n        }\n\n        onmmessage(event: any) {\n            let message = JSON.parse(event.data);\n            for (let i = clientIdsByTokens[this.channelToken].length - 1; i >= 0; i--) {\n                let socketClientId = clientIdsByTokens[this.channelToken][i];\n                if (document.getElementById(socketClientId)) {\n                    try {\n                        components[socketClientId]['onmessage'](message, this.channel, event);\n                    } catch (e) {\n                        //Ignore\n                    }\n                    let behaviors = components[socketClientId]['behaviors'];\n                    let functions = behaviors[message];\n                    if (functions && functions.length) {\n                        for (let j = 0; j < functions.length; j++) {\n                            try {\n                                functions[j](null);\n                            } catch (e) {\n                                //Ignore\n                            }\n                        }\n                    }\n                } else {\n                    clientIdsByTokens[this.channelToken].splice(i, 1);\n                }\n            }\n            if (clientIdsByTokens[this.channelToken].length == 0) {\n                //tag dissapeared\n                this.close();\n            }\n        }\n\n        onclose(event: any) {\n            if (!this.socket\n                || (event.code == 1000 && event.reason == REASON_EXPIRED)\n                || (event.code == 1008)\n                || (!this.reconnectAttempts)\n                || (this.reconnectAttempts >= MAX_RECONNECT_ATTEMPTS)) {\n                let clientIds = clientIdsByTokens[this.channelToken];\n                for (let i = clientIds.length - 1; i >= 0; i--) {\n                    let socketClientId = clientIds[i];\n                    components[socketClientId]['onclose'](event?.code, this?.channel, event);\n                }\n            } else {\n                setTimeout(this.open, RECONNECT_INTERVAL * this.reconnectAttempts++);\n            }\n        };\n\n        close() {\n            if (this.socket) {\n                let s = this.socket;\n                this.socket = null;\n                s.close();\n            }\n        }\n\n        /**\n         * bind the callbacks to the socket callbacks\n         */\n        private bindCallbacks() {\n            this.socket.onopen = (event: Event) => this.onopen(event);\n            this.socket.onmessage = (event: Event) => this.onmmessage(event);\n            this.socket.onclose = (event: Event) => this.onclose(event);\n        }\n    }\n\n    // Private static functions ---------------------------------------------------------------------------------------\n\n    function getBaseURL(url: string) {\n        if (url.indexOf(\"://\") < 0) {\n            let base = window.location.hostname + \":\" + window.location.port;\n            return URL_PROTOCOL + base + url;\n        } else {\n            return url;\n        }\n    }\n\n    /**\n     * Get socket associated with given channelToken.\n     * @param {string} channelToken The name of the web socket channelToken.\n     * @return {Socket} Socket associated with given channelToken.\n     * @throws {Error} When channelToken is unknown, you may need to initialize\n     *                 it first via <code>init()</code> function.\n     */\n    function getSocket(channelToken: string): Socket {\n        let socket = sockets[channelToken];\n        if (socket) {\n            return socket;\n        } else {\n            throw new Error(\"Unknown channelToken: \" + channelToken);\n        }\n    }\n\n    function resolveFunction(fn: Function | string = () => {\n    }): Function {\n        return <Function>((typeof fn !== \"function\") && (fn = window[fn]), fn);\n    }\n\n}","/* Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/*\n * [export const] constants\n */\n\nexport const P_PARTIAL_SOURCE = \"javax.faces.source\";\nexport const PARTIAL_ID = \"partialId\";\nexport const P_VIEWSTATE = \"javax.faces.ViewState\";\nexport const P_VIEWROOT = \"javax.faces.ViewRoot\";\nexport const P_VIEWHEAD = \"javax.faces.ViewHead\";\nexport const P_VIEWBODY = \"javax.faces.ViewBody\";\n\n/*some useful definitions*/\n\nexport const EMPTY_FUNC = Object.freeze(() => {\n});\nexport const EMPTY_STR = \"\";\nexport const EMPTY_MAP = Object.freeze({});\n\nexport const HTML_VIEWSTATE = [\"<input type='hidden'\", \"id='\", P_VIEWSTATE, \"' name='\", P_VIEWSTATE, \"' value='' />\"].join(EMPTY_STR);\n\n\n/*internal identifiers for options*/\nexport const IDENT_ALL = \"@all\";\nexport const IDENT_NONE = \"@none\";\nexport const IDENT_THIS = \"@this\";\nexport const IDENT_FORM = \"@form\";\n\n\nexport const P_AJAX = \"javax.faces.partial.ajax\";\nexport const P_EXECUTE = \"javax.faces.partial.execute\";\nexport const P_RENDER = \"javax.faces.partial.render\";\nexport const P_EVT = \"javax.faces.partial.event\";\nexport const P_CLIENT_WINDOW = \"javax.faces.ClientWindow\";\nexport const P_RESET_VALUES = \"javax.faces.partial.resetValues\";\n\nexport const P_WINDOW_ID = \"javax.faces.windowId\";\n\nexport const RENDER = \"render\";\nexport const WINDOW_ID = \"windowId\";\n\n/* message types */\nexport const ERROR = \"error\";\nexport const EVENT = \"event\";\n\nexport const ON_ERROR = \"onerror\";\nexport const ON_EVENT = \"onevent\";\n\n/* event emitting stages */\nexport const BEGIN = \"begin\";\nexport const COMPLETE = \"complete\";\nexport const SUCCESS = \"success\";\n\nexport const SOURCE = \"source\";\nexport const STATUS = \"status\";\n\n\nexport const ERROR_NAME = \"error-name\";\nexport const ERROR_MESSAGE = \"error-message\";\n\n\nexport const RESPONSE_TEXT = \"responseText\";\nexport const RESPONSE_XML = \"responseXML\";\n\n/*ajax errors spec 14.4.2*/\nexport const HTTPERROR = \"httpError\";\nexport const EMPTY_RESPONSE = \"emptyResponse\";\nexport const MALFORMEDXML = \"malformedXML\";\nexport const SERVER_ERROR = \"serverError\";\nexport const CLIENT_ERROR = \"clientError\";\nexport const TIMEOUT_EVENT = \"timeout\";\n\nexport const CTX_PARAM_MF_INTERNAL = \"_mfInternal\";\n\nexport const CTX_PARAM_SRC_FRM_ID = \"_mfSourceFormId\";\nexport const CTX_PARAM_SRC_CTL_ID = \"_mfSourceControlId\";\nexport const CTX_PARAM_TR_TYPE = \"_mfTransportType\";\nexport const CTX_PARAM_PASS_THR = \"passThrgh\";\nexport const CTX_PARAM_DELAY = \"delay\";\nexport const CTX_PARAM_TIMEOUT = \"timeout\";\nexport const CTX_PARAM_RST = \"resetValues\";\nexport const CTX_PARAM_EXECUTE = \"execute\";\n\nexport const STAGE_DEVELOPMENT = \"Development\";\n\n\nexport const CONTENT_TYPE = \"Content-Type\";\nexport const HEAD_FACES_REQ = \"Faces-Request\";\nexport const REQ_ACCEPT = \"Accept\";\nexport const VAL_AJAX = \"partial/ajax\";\nexport const ENCODED_URL = \"javax.faces.encodedURL\";\nexport const REQ_TYPE_GET = \"GET\";\nexport const REQ_TYPE_POST = \"POST\";\nexport const STATE_EVT_BEGIN = \"begin\"; //TODO remove this\nexport const STATE_EVT_TIMEOUT = \"TIMEOUT_EVENT\";\nexport const STATE_EVT_COMPLETE = \"complete\"; //TODO remove this\nexport const URL_ENCODED = \"application/x-www-form-urlencoded\";\nexport const MULTIPART = \"multipart/form-data\";\nexport const NO_TIMEOUT = 0;\nexport const STD_ACCEPT = \"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\";\n\nexport const TAG_HEAD = \"head\";\nexport const TAG_FORM = \"form\";\nexport const TAG_BODY = \"body\";\nexport const TAG_BEFORE = \"before\";\nexport const TAG_AFTER = \"after\";\n\nexport const TAG_ATTR = \"attribute\";\n\n\nexport const SEL_VIEWSTATE_ELEM = \"[name='\" + P_VIEWSTATE + \"']\";\nexport const SEL_CLIENT_WINDOW_ELEM = \"[name='\" + P_CLIENT_WINDOW + \"']\";\nexport const SEL_RESPONSE_XML = \"responseXML\";\n\nexport const PHASE_PROCESS_RESPONSE = \"processResponse\";\n\n\nexport const ERR_NO_PARTIAL_RESPONSE = \"Partial response not set\";\n\nexport const ATTR_URL = \"url\";\nexport const ATTR_NAME = \"name\";\nexport const ATTR_VALUE = \"value\";\nexport const ATTR_ID = \"id\";\n\n/*partial response types*/\nexport const RESP_PARTIAL = \"partial-response\";\n\n/*partial commands*/\nexport const CMD_CHANGES = \"changes\";\nexport const CMD_UPDATE = \"update\";\nexport const CMD_DELETE = \"delete\";\nexport const CMD_INSERT = \"insert\";\nexport const CMD_EVAL = \"eval\";\nexport const CMD_ERROR = \"error\";\nexport const CMD_ATTRIBUTES = \"attributes\";\nexport const CMD_EXTENSION = \"extension\";\nexport const CMD_REDIRECT = \"redirect\";\n\n/*other constants*/\n\nexport const UPDATE_FORMS = \"_updateForms\";\nexport const UPDATE_ELEMS = \"_updateElems\";\n\nexport const MYFACES = \"myfaces\";\n\nexport const SEL_SCRIPTS_STYLES = \"script, style, link\";\n\nexport const MF_NONE = \"__mf_none__\";\n\nexport const REASON_EXPIRED = \"Expired\";\n\nexport const APPLIED_VST = \"appliedViewState\";\nexport const APPLIED_CLIENT_WINDOW = \"appliedClientWindow\";\n\nexport const RECONNECT_INTERVAL = 500;\nexport const MAX_RECONNECT_ATTEMPTS = 25;\n\nexport const UNKNOWN = \"UNKNOWN\";\n","/* Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {EMPTY_STR, P_VIEWSTATE} from \"./Const\";\n\nexport interface IdValueHolder {\n\n    readonly id: string;\n    readonly value: string;\n\n}\n\n/**\n * a helper class to isolate the\n * view state and client window and other\n * future states which follow a similar pattern\n */\nexport class StateHolder implements IdValueHolder {\n\n    nameSpace: string;\n\n    constructor(public id: string, public value: string) {\n        let viewStatePos = id.indexOf(P_VIEWSTATE);\n        this.nameSpace = viewStatePos > 0 ? id.substr(0, viewStatePos - 1) : EMPTY_STR;\n    }\n\n    get hasNameSpace(): boolean {\n        return !!(this?.nameSpace ?? EMPTY_STR).length;\n    }\n}","/* Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport class Messages {\n    MSG_TEST = \"Testmessage\";\n\n    /*Messages*/\n    /** @constant */\n    MSG_DEV_MODE = \"Note, this message is only sent, because project stage is development and no \" +\n        \"other error listeners are registered.\";\n    /** @constant */\n    MSG_AFFECTED_CLASS = \"Affected Class=\";\n    /** @constant */\n    MSG_AFFECTED_METHOD = \"Affected Method=\";\n    /** @constant */\n    MSG_ERROR_NAME = \"Error Name=\";\n    /** @constant */\n    MSG_ERROR_MESSAGE = \"Error Message=\";\n    /** @constant */\n    MSG_SERVER_ERROR_NAME = \"Server Error Name=\";\n\n    /** @constant */\n    MSG_ERROR_DESC = \"Error Description=\";\n    /** @constant */\n    MSG_ERROR_NO = \"Error Number=\";\n    /** @constant */\n    MSG_ERROR_LINENO = \"Error Line Number=\";\n\n    /*Errors and messages*/\n    /** @constant */\n    ERR_FORM = \"Sourceform could not be determined, either because element is not attached to a form or we have multiple forms with named elements of the same identifier or name, stopping the ajax processing\";\n    /** @constant */\n    ERR_VIEWSTATE = \"jsf.viewState= param value not of type form!\";\n    /** @constant */\n    ERR_TRANSPORT = \"Transport type {0} does not exist\";\n    /** @constant */\n    ERR_EVT_PASS = \"an event must be passed down (either a an event object null or undefined) \";\n    /** @constant */\n    ERR_CONSTRUCT = \"Parts of the response couldn't be retrieved when constructing the event data= {0} \";\n    /** @constant */\n    ERR_MALFORMEDXML = \"The server response could not be parsed, the server has returned with a response which is not xml !\";\n    /** @constant */\n    ERR_SOURCE_FUNC = \"source cannot be a function (probably source and event were not defined or set to null\";\n    /** @constant */\n    ERR_EV_OR_UNKNOWN = \"An event object or unknown must be passed as second parameter\";\n    /** @constant */\n    ERR_SOURCE_NOSTR = \"source cannot be a string\";\n    /** @constant */\n    ERR_SOURCE_DEF_NULL = \"source must be defined or null\";\n\n    //_Lang.js\n    /** @constant */\n    ERR_MUST_STRING = \"{0}: {1} namespace must be of type String\";\n    /** @constant */\n    ERR_REF_OR_ID = \"{0}: {1} a reference node or identifier must be provided\";\n    /** @constant */\n    ERR_PARAM_GENERIC = \"{0}: parameter {1} must be of type {2}\";\n    /** @constant */\n    ERR_PARAM_STR = \"{0}: {1} param must be of type string\";\n    /** @constant */\n    ERR_PARAM_STR_RE = \"{0}: {1} param must be of type string or a regular expression\";\n    /** @constant */\n    ERR_PARAM_MIXMAPS = \"{0}: both a source as well as a destination map must be provided\";\n    /** @constant */\n    ERR_MUST_BE_PROVIDED = \"{0}: an {1} and a {2} must be provided\";\n    /** @constant */\n    ERR_MUST_BE_PROVIDED1 = \"{0}: {1} must be set\";\n\n    /** @constant */\n    ERR_REPLACE_EL = \"replaceElements called while evalNodes is not an array\";\n\n    /** @constant */\n    ERR_EMPTY_RESPONSE = \"{0}: The response cannot be null or empty!\";\n    /** @constant */\n    ERR_ITEM_ID_NOTFOUND = \"{0}: item with identifier {1} could not be found\";\n    /** @constant */\n    ERR_PPR_IDREQ = \"{0}: Error in PPR Insert, id must be present\";\n    /** @constant */\n    ERR_PPR_INSERTBEFID = \"{0}: Error in PPR Insert, before id or after id must be present\";\n    /** @constant */\n    ERR_PPR_INSERTBEFID_1 = \"{0}: Error in PPR Insert, before  node of id {1} does not exist in document\";\n    /** @constant */\n    ERR_PPR_INSERTBEFID_2 = \"{0}: Error in PPR Insert, after  node of id {1} does not exist in document\";\n\n    /** @constant */\n    ERR_PPR_DELID = \"{0}: Error in delete, id not in xml markup\";\n    /** @constant */\n    ERR_PPR_UNKNOWNCID = \"{0}:  Unknown Html-Component-ID= {1}\";\n\n    /** @constant */\n    ERR_NO_VIEWROOTATTR = \"{0}: Changing of ViewRoot attributes is not supported\";\n    /** @constant */\n    ERR_NO_HEADATTR = \"{0}: Changing of Head attributes is not supported\";\n    /** @constant */\n    ERR_RED_URL = \"{0}: Redirect without url\";\n\n    /** @constant */\n    ERR_REQ_FAILED_UNKNOWN = \"Request failed with unknown status\";\n\n    /** @constant */\n    ERR_REQU_FAILED = \"Request failed with status {0} and reason {1}\";\n\n    /** @constant */\n    UNKNOWN = \"UNKNOWN\";\n}","import {Config, Lang, XMLQuery} from \"../../ext/monadish\";\n\nimport {DQ} from \"../../ext/monadish\";\nimport {ExtLang} from \"./Lang\";\nimport getMessage = ExtLang.getMessage;\nimport makeException = ExtLang.makeException;\nimport {\n    ATTR_URL,\n    EMPTY_RESPONSE,\n    EMPTY_STR, ERR_NO_PARTIAL_RESPONSE, MALFORMEDXML,\n    ON_ERROR,\n    ON_EVENT,\n    PHASE_PROCESS_RESPONSE,\n    RESP_PARTIAL\n} from \"../core/Const\";\n\n/**\n * a set of internal code assertions\n * which raise an error\n *\n */\nexport module Assertions {\n\n    export function assertRequestIntegrity(options: Config, elem: DQ): void | never {\n        /*assert if the onerror is set and once if it is set it must be of type function*/\n        assertFunction(options.getIf(ON_ERROR).value);\n        /*assert if the onevent is set and once if it is set it must be of type function*/\n        assertFunction(options.getIf(ON_EVENT).value);\n        //improve the error messages if an empty elem is passed\n        //Assertions.assertElementExists(elem);\n        assert(elem.isPresent(), getMessage(\"ERR_MUST_BE_PROVIDED1\", \"{0}: source  must be provided or exist\", \"source element id\"), \"jsf.ajax.request\", \"ArgNotSet\",  )\n    }\n\n    export function assertUrlExists(node: XMLQuery): void | never {\n        if (node.attr(ATTR_URL).isAbsent()) {\n            throw Assertions.raiseError(new Error(), getMessage(\"ERR_RED_URL\", null, \"_Ajaxthis.processRedirect\"), \"processRedirect\");\n        }\n    }\n\n    /**\n     * checks the xml for various issues which can occur\n     * and prevent a proper processing\n     */\n    export function assertValidXMLResponse(responseXML: XMLQuery) : void | never  {\n        assert(!responseXML.isAbsent(), EMPTY_RESPONSE, PHASE_PROCESS_RESPONSE);\n        assert(!responseXML.isXMLParserError(),  responseXML.parserErrorText(EMPTY_STR), PHASE_PROCESS_RESPONSE);\n        assert(responseXML.querySelectorAll(RESP_PARTIAL).isPresent(), ERR_NO_PARTIAL_RESPONSE, PHASE_PROCESS_RESPONSE);\n    }\n\n    /**\n     * internal helper which raises an error in the\n     * format we need for further processing\n     *\n     * @param error\n     * @param message the message\n     * @param caller\n     * @param title the title of the error (optional)\n     * @param name the name of the error (optional)\n     */\n    export function raiseError(error: any, message: string, caller ?: string, title ?: string, name ?: string): Error {\n\n        let finalTitle = title ?? MALFORMEDXML;\n        let finalName = name ?? MALFORMEDXML;\n        let finalMessage = message ?? EMPTY_STR;\n\n        //TODO clean up the messy makeException, this is a perfect case for encapsulation and sane defaults\n        return makeException(error, finalTitle, finalName, \"Response\", caller || (((<any>arguments).caller) ? (<any>arguments).caller.toString() : \"_raiseError\"), finalMessage);\n    }\n\n    /*\n     * using the new typescript 3.7 compiler assertion functionality to improve compiler hinting\n     * we are not fully there yet, but soon\n     */\n\n    export function assert(value: any, msg = EMPTY_STR, caller=EMPTY_STR, title=\"Assertion Error\"): asserts value {\n        if(!value) {\n            throw Assertions.raiseError(new Error(), msg ,caller, title);\n        }\n    }\n\n\n    export function assertType(value: any, theType: any, msg = EMPTY_STR, caller=EMPTY_STR, title=\"Type Assertion Error\"): asserts value {\n        if((!!value) && !Lang.assertType(value,theType)) {\n            throw Assertions.raiseError(new Error(), msg ,caller, title);\n        }\n    }\n\n    export function assertFunction(value: any, msg = EMPTY_STR, caller=EMPTY_STR, title=\"Assertion Error\"): asserts value is Function {\n        assertType(value, \"function\", msg, caller, title);\n    }\n}\n\n\n","import {AsyncRunnable} from \"./AsyncRunnable\";\n\n/**\n * Asynchronous queue which starts to work\n * through the callbacks until the queue is empty\n *\n * Every callback must be of async runnable\n * which is sort of an extended promise which has\n * added a decicated cancel and start point\n *\n * This interface can be used as wrapper contract\n * for normal promises if needed.\n */\nexport class AsynchronouseQueue<T extends AsyncRunnable<any>> {\n\n    private runnableQueue = [];\n    private delayTimeout: number;\n\n    currentlyRunning: AsyncRunnable<any>;\n\n    constructor() {\n    }\n\n    get isEmpty(): boolean {\n        return !this.runnableQueue.length;\n    }\n\n    /**\n     * enequeues an element and starts the\n     * asynchronous work loop if not already running\n     *\n     * @param element the element to be queued and processed\n     * @param delay possible delay after our usual process or drop if something newer is incoming algorithm\n     */\n    enqueue(element: T, delay = 0) {\n        if (this.delayTimeout) {\n            clearTimeout(this.delayTimeout);\n            this.delayTimeout = null;\n        }\n        if (delay) {\n            this.delayTimeout = setTimeout(() => {\n                this.appendElement(element);\n            });\n        } else {\n            this.appendElement(element);\n        }\n    }\n\n    dequeue(): T {\n        return this.runnableQueue.shift();\n    }\n\n    cleanup() {\n        this.currentlyRunning = null;\n        this.runnableQueue.length = 0;\n    }\n\n    private appendElement(element: T) {\n        //only if the first element is added we start with a trigger\n        //otherwise a process already is running and not finished yet at that\n        //time\n        this.runnableQueue.push(element);\n        if (!this.currentlyRunning) {\n            this.runEntry();\n        }\n    }\n\n    private runEntry() {\n        if (this.isEmpty) {\n            this.currentlyRunning = null;\n            return;\n        }\n        this.currentlyRunning = this.dequeue();\n        this.currentlyRunning\n            .catch((e) => {\n                //in case of an error we always clean up the remaining calls\n                //to allow a clean recovery of the application\n                this.cleanup();\n                throw e;\n            })\n            .then(\n                //the idea is to trigger the next over an event to reduce\n                //the number of recursive calls (stacks might be limited\n                //compared to ram)\n                //naturally give we have a DOM, the DOM is the natural event dispatch system\n                //which we can use, to decouple the calls from a recursive stack call\n                //(the browser engine will take care of that)\n                () => this.callForNextElementToProcess()\n            ).start();\n    }\n\n    cancel() {\n        try {\n            if (this.currentlyRunning) {\n                this.currentlyRunning.cancel();\n            }\n        } finally {\n            this.cleanup();\n        }\n    }\n\n    private callForNextElementToProcess() {\n        this.runEntry();\n    }\n}","import {Config, IValueHolder, Optional} from \"../../ext/monadish/Monad\";\nimport {DomQuery, DQ} from \"../../ext/monadish/DomQuery\";\nimport {EMPTY_STR, P_WINDOW_ID} from \"../core/Const\";\n\ndeclare let window: any;\n\n/**\n * Extension which adds implementation specific\n * meta data to our dom qury\n *\n * Usage\n * el = new ExtDQ(oldReference)\n * nonce = el.nonce\n * windowId = el.getWindowId\n */\nexport class ExtDomquery extends DQ {\n\n    static get windowId() {\n        return new ExtDomquery(document.body).windowId;\n    }\n\n    static get nonce(): string {\n        return new ExtDomquery(document.body).nonce;\n    }\n\n    get windowId(): string | null {\n\n        const fetchWindowIdFromURL = function (): string | null {\n            let href = window.location.href;\n            let windowId = \"windowId\";\n            let regex = new RegExp(\"[\\\\?&]\" + windowId + \"=([^&#\\\\;]*)\");\n            let results = regex.exec(href);\n            //initial trial over the url and a regexp\n            if (results != null) return results[1];\n            return null;\n        };\n\n        //byId ($)\n        if (this.value.isPresent()) {\n            let result = this.querySelectorAll(\"form input[name='\" + P_WINDOW_ID + \"']\");\n            if (result.length > 0) {\n                throw Error(\"Multiple different windowIds found in document\");\n            }\n\n            return (result.isPresent()) ? (<HTMLInputElement>result.getAsElem(0).value).value : fetchWindowIdFromURL();\n        } else {\n            return fetchWindowIdFromURL();\n        }\n    }\n\n    /*\n    determines the jsfjs nonce and adds them to the namespace\n    * this is done once and only lazily\n    */\n    get nonce(): string {\n        //already processed\n        let myfacesConfig = new Config(window.myfaces);\n        let nonce: IValueHolder<string> = myfacesConfig.assign(\"config\", \"cspMeta\", \"nonce\");\n        if (nonce.value) {\n            return <string>nonce.value;\n        }\n\n        let curScript = new DQ(document.currentScript);\n        //since our baseline atm is ie11 we cannot use document.currentScript globally\n        if (curScript.attr(\"nonce\").value != null) {\n            //fastpath for modern browsers\n            return curScript.attr(\"nonce\").value;\n        }\n\n        let nonceScript = DQ\n            .querySelectorAll(\"script[src], link[src]\")\n            .lazyStream\n            .filter((item) => item.attr(\"nonce\").value != null && item.attr(\"src\") != null)\n            .map((item => !item.attr(\"src\").value.match(/jsf\\.js\\?ln=javax\\.faces/gi)))\n            .first();\n\n        if (nonceScript.isPresent()) {\n            nonce.value = DomQuery.byId(nonceScript.value, true).attr(\"nonce\").value;\n        }\n        return <string>nonce.value;\n    }\n\n    static searchJsfJsFor(item: RegExp): Optional<String> {\n        return new ExtDomquery(document).searchJsfJsFor(item);\n    }\n\n    searchJsfJsFor(rexp: RegExp): Optional<string> {\n        //perfect application for lazy stream\n        return DQ.querySelectorAll(\"script\").lazyStream\n                .filter(item => {\n                    return (item.attr(\"src\").value ?? EMPTY_STR).search(/\\/javax\\.faces\\.resource.*\\/jsf\\.js.*separator/) != -1;\n                }).map((item: DQ) => {\n                    let result = item.attr(\"src\").value.match(rexp);\n                    return decodeURIComponent(result[1]);\n                }).first();\n    }\n\n    globalEval(code: string, nonce ?: string): DQ {\n        return super.globalEval(code, nonce ?? this.nonce);\n    }\n}\n\nexport const ExtDQ = DQ;","/* Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * todo replace singleton with module definition\n *\n */\n\nimport {Lang as LangBase} from \"../../ext/monadish/Lang\";\nimport {Messages} from \"../i18n/Messages\";\n// noinspection TypeScriptPreferShortImport\nimport {Config, Optional} from \"../../ext/monadish/Monad\";\n// noinspection TypeScriptPreferShortImport\nimport {DomQuery, DQ} from \"../../ext/monadish/DomQuery\";\nimport {Stream} from \"../../ext/monadish\";\nimport {EMPTY_STR, TAG_FORM} from \"../core/Const\";\nimport {getEventTarget} from \"../xhrCore/RequestDataResolver\";\n\nexport module ExtLang {\n\n    let installedLocale: Messages;\n    let nameSpace = \"impl/util/Lang/\";\n\n    export function getLanguage(): string {\n        //TODO global config override\n\n        let language: string = (<any>navigator).languages?.[0] ?? navigator?.language;\n        language = language.split(\"-\")[0];\n        return language;\n    }\n\n    //should be in lang, but for now here to avoid recursive imports, not sure if typescript still has a problem with those\n    /**\n     * helper function to savely resolve anything\n     * this is not an elvis operator, it resolves\n     * a value without exception in a tree and if\n     * it is not resolvable then an optional of\n     * a default value is restored or Optional.empty\n     * if none is given\n     *\n     * usage\n     * <code>\n     *     let var: Optional<string> = saveResolve(() => a.b.c.d.e, \"foobaz\")\n     * </code>\n     *\n     * @param resolverProducer a lambda which can produce the value\n     * @param defaultValue an optional default value if the producer failes to produce anything\n     * @returns an Optional of the produced value\n     */\n    export function failSaveResolve<T>(resolverProducer: () => T, defaultValue: T = null): Optional<T> {\n        return LangBase.saveResolve(resolverProducer, defaultValue);\n    }\n\n    /**\n     * under some conditions it makes sense to swallow errors and return a default value in the error case\n     * classical example the optional resolution of values in a chain (thankfully now covered by Typescript itself)\n     * another example which we have in our system is that some operations fail only under test due to test framework\n     * limitations while they cannot fail in the real world.\n     *\n     * @param resolverProducer a producer function which produces a value in the non error case\n     * @param defaultValue the default value in case of a fail of the function\n     */\n    export function failSaveExecute<T>(resolverProducer: () => any, defaultValue: T = null): void {\n        LangBase.saveResolve(resolverProducer, defaultValue);\n    }\n\n    /**\n     * returns a given localized message upon a given key\n     * basic java log like templating functionality is included\n     *\n     * @param {String} key the key for the message\n     * @param {String} defaultMessage optional default message if none was found\n     *\n     * Additionally you can pass additional arguments, which are used\n     * in the same way java log templates use the params\n     *\n     * @param templateParams the param list to be filled in\n     */\n    export function getMessage(key: string, defaultMessage?: string, ...templateParams: Array<string>): string {\n        installedLocale = installedLocale ?? new Messages();\n\n        let msg = installedLocale[key] ?? defaultMessage ?? key + \" - undefined message\";\n\n        Stream.of(...templateParams).each((param, cnt) => {\n            msg = msg.replace(new RegExp([\"\\\\{\", cnt, \"\\\\}\"].join(EMPTY_STR), \"g\"), param);\n        });\n\n        return msg;\n    }\n\n    /**\n     * transforms a key value pair into a string\n     * @param key the key\n     * @param val the value\n     * @param delimiter the delimiter\n     */\n    export function keyValToStr(key: string, val: string, delimiter: string = \"\\n\") {\n        return [key, val].join(delimiter);\n    }\n\n    /**\n     * creates an exeption with additional internal parameters\n     * for extra information\n     *\n     * @param error\n     * @param {String} title the exception title\n     * @param {String} name  the exception name\n     * @param {String} callerCls the caller class\n     * @param {String} callFunc the caller function\n     * @param {String} message the message for the exception\n     */\n    export function makeException(error: Error, title: string, name: string, callerCls: string, callFunc: string, message: string): Error {\n\n        return new Error(message + (callerCls ?? nameSpace) + callFunc ?? (EMPTY_STR + (<any>arguments).caller.toString()));\n\n    }\n\n    /**\n     * fetches a global config entry\n     * @param {String} configName the name of the configuration entry\n     * @param {Object} defaultValue\n     *\n     * @return either the config entry or if none is given the default value\n     */\n    export function getGlobalConfig(configName: string, defaultValue: any): any {\n        /**\n         * note we could use exists but this is an heavy operation, since the config name usually\n         * given this function here is called very often\n         * is a single entry without . in between we can do the lighter shortcut\n         */\n        return (<any>window)?.myfaces?.config?.[configName] ?? defaultValue;\n    }\n\n    /**\n     * fetches the form in an fuzzy manner depending\n     * on an element or event target.\n     *\n     * The idea is that according to the jsf spec\n     * the enclosing form of the issuing element needs to be fetched.\n     *\n     * This is fine, but since then html5 came into the picture with the form attribute the element\n     * can be anywhere referencing its parent form.\n     *\n     * Also theoretically you can have the case of an issuing element enclosing a set of forms\n     * (not really often used, but theoretically it could be input button allows to embed html for instance)\n     *\n     * So the idea is not to limit the issuing form determination to the spec case\n     * but also cover the theoretical and html5 corner case.\n     *\n     * @param elem\n     * @param event\n     */\n    export function getForm(elem: Element, event ?: Event): DQ | never {\n\n        let queryElem = new DQ(elem);\n        let eventTarget = new DQ(getEventTarget(event));\n\n        if (queryElem.isTag(TAG_FORM)) {\n            return queryElem;\n        }\n\n        //html 5 for handling\n        if (queryElem.attr(TAG_FORM).isPresent()) {\n            let formId = queryElem.attr(TAG_FORM).value;\n            let foundForm = DQ.byId(formId, true);\n            if (foundForm.isPresent()) {\n                return foundForm;\n            }\n        }\n\n        let form = queryElem.parents(TAG_FORM)\n            .orElseLazy(() => queryElem.byTagName(TAG_FORM, true))\n            .orElseLazy(() => eventTarget.parents(TAG_FORM))\n            .orElseLazy(() => eventTarget.byTagName(TAG_FORM))\n            .first();\n\n        assertFormExists(form);\n\n        return form;\n    }\n\n    /**\n     * gets the local or global options with local ones having higher priority\n     * if no local or global one was found then the default value is given back\n     *\n     * @param {String} configName the name of the configuration entry\n     * @param {String} localOptions the local options root for the configuration myfaces as default marker is added implicitely\n     *\n     * @param {Object} defaultValue\n     *\n     * @return either the config entry or if none is given the default value\n     */\n    export function getLocalOrGlobalConfig(localOptions: Config, configName: string, defaultValue: any): any {\n        return localOptions.value?.myfaces?.config?.[configName] ??\n            (<any>window)?.myfaces?.config?.[configName] ??\n            defaultValue;\n    }\n\n    /**\n     * assert that the form exists and throw an exception in the case it does not\n     * (TODO move this into the assertions)\n     *\n     * @param form the form to check for\n     */\n    function assertFormExists(form: DomQuery): void | never {\n        if (form.isAbsent()) {\n            throw makeException(new Error(), null, null, \"Impl\", \"getForm\", getMessage(\"ERR_FORM\"));\n        }\n    }\n\n}","import {\n    EMPTY_STR,\n    ERROR_MESSAGE,\n    ERROR_NAME,\n    RESPONSE_TEXT,\n    RESPONSE_XML,\n    SOURCE,\n    STATUS,\n    UNKNOWN\n} from \"../core/Const\";\nimport {Config} from \"../../ext/monadish\";\n\nimport {EventData} from \"./EventData\";\nimport {ExtLang} from \"../util/Lang\";\nimport getMessage = ExtLang.getMessage;\n\n\nexport enum ErrorType {\n    SERVER_ERROR = \"serverError\",\n    HTTP_ERROR = \"httpError\",\n    CLIENT_ERROR = \"clientErrror\",\n    TIMEOUT = \"timeout\"\n}\n\n/**\n * the spec has a problem of having the error\n * object somewhat underspecified, there is no clear\n * description of the required contents.\n * I want to streamline it with mojarra here\n * hence we are going to move\n * everything into the same attributes,\n * I will add deprecated myfaces backwards compatibility attributes as well\n */\nexport class ErrorData extends EventData {\n\n    type: string = \"error\";\n    source: string;\n    errorName: string;\n    errorMessage: string;\n\n    responseText: string;\n    responseXML: any;\n\n    status: string;\n    typeDetails: ErrorType;\n\n    //TODO backwards compatible attributes\n    serverErrorName: string;\n    serverErrorMessage: string;\n    message: string;\n\n    constructor(source: string, errorName: string, errorMessage: string, responseText: string = null, responseXML: any = null, responseCode: string = \"200\", status: string = \"UNKNOWN\", type = ErrorType.CLIENT_ERROR) {\n        super();\n        this.source = source;\n        this.type = \"error\";\n        this.errorName = errorName;\n        this.message = this.errorMessage = errorMessage;\n        this.responseCode = responseCode;\n        this.responseText = responseText;\n        this.status = status;\n        this.typeDetails = type;\n\n        if (type == ErrorType.SERVER_ERROR) {\n            this.serverErrorName = this.errorName;\n            this.serverErrorMessage = this.errorMessage;\n        }\n    }\n\n    static fromClient(e: Error): ErrorData {\n        return new ErrorData(\"client\", e.name, e.message, e.stack);\n    }\n\n    static fromHttpConnection(source: string, name: string, message: string, responseText, responseCode: number): ErrorData {\n        return new ErrorData(source, name, message, responseText, responseCode, null, \"UNKNOWN\", ErrorType.HTTP_ERROR);\n    }\n\n    static fromGeneric(context: Config, errorCode: number, errorType: ErrorType = ErrorType.SERVER_ERROR): ErrorData {\n\n        let getMsg = this.getMsg;\n\n        let source = getMsg(context, SOURCE);\n        let errorName = getMsg(context, ERROR_NAME);\n        let errorMessage = getMsg(context, ERROR_MESSAGE);\n        let status = getMsg(context, STATUS);\n        let responseText = getMsg(context, RESPONSE_TEXT);\n        let responseXML = getMsg(context, RESPONSE_XML);\n        return new ErrorData(source, errorName, errorMessage, responseText, responseXML, errorCode + EMPTY_STR, status, errorType);\n    }\n\n    private static getMsg(context, param) {\n        return getMessage(context.getIf(param).orElse(UNKNOWN).value);\n    }\n\n    static fromServerError(context: Config): ErrorData {\n        return this.fromGeneric(context, -1);\n    }\n\n}","import {Config, DQ} from \"../../ext/monadish\";\nimport {BEGIN, CTX_PARAM_PASS_THR, EVENT, P_PARTIAL_SOURCE, SOURCE} from \"../core/Const\";\n\nexport class EventData {\n    type: string;\n    status: string;\n    source: any;\n    responseCode: string;\n    responseText: string;\n    responseXML: Document;\n\n    static createFromRequest(request: XMLHttpRequest, context: Config, /*event name*/ name: string): EventData {\n\n        let eventData = new EventData();\n\n        eventData.type = EVENT;\n        eventData.status = name;\n\n        let sourceId: string = context.getIf(SOURCE)\n            .orElse(context.getIf(P_PARTIAL_SOURCE).value)\n            .orElse(context.getIf(CTX_PARAM_PASS_THR, P_PARTIAL_SOURCE).value).value;\n        if (sourceId) {\n            eventData.source = DQ.byId(sourceId, true).first().value.value;\n        }\n\n        if (name !== BEGIN) {\n            eventData.responseCode = request?.status?.toString();\n            eventData.responseText = request?.responseText;\n            eventData.responseXML = request?.responseXML;\n        }\n        return eventData;\n    }\n}\n","/* Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Config, DomQuery, DQ} from \"../../ext/monadish\";\nimport {\n    CTX_PARAM_DELAY,\n    CTX_PARAM_TIMEOUT,\n    EMPTY_FUNC,\n    EMPTY_STR,\n    ENCODED_URL,\n    MF_NONE,\n    REQ_TYPE_GET,\n    REQ_TYPE_POST\n} from \"../core/Const\";\nimport {XhrFormData} from \"./XhrFormData\";\nimport {ExtLang} from \"../util/Lang\";\nimport {ExtDomquery} from \"../util/ExtDomQuery\";\n\n/**\n * Resolver functions for various aspects of the request data\n *\n * stateless because it might be called from various\n * parts of the response classes\n */\n\n/**\n * resolves the event handlers lazly\n * so that if some decoration happens in between we can deal with it\n *\n * @param requestContext\n * @param responseContext\n * @param funcName\n */\nexport function resolveHandlerFunc(requestContext: Config, responseContext: Config, funcName: string) {\n    return responseContext.getIf(funcName)\n        .orElse(requestContext.getIf(funcName).value)\n        .orElse(EMPTY_FUNC).value;\n}\n\nexport function resolveTargetUrl(srcFormElement: HTMLFormElement) {\n    return (typeof srcFormElement.elements[ENCODED_URL] == 'undefined') ?\n        srcFormElement.action :\n        srcFormElement.elements[ENCODED_URL].value;\n}\n\nexport function resolveFinalUrl(sourceForm: DomQuery, formData: XhrFormData, ajaxType = REQ_TYPE_POST) {\n    let targetUrl = this.resolveTargetUrl(<HTMLFormElement>sourceForm.getAsElem(0).value);\n\n    return targetUrl + (ajaxType == REQ_TYPE_GET ? \"?\" + formData.toString() : EMPTY_STR);\n}\n\n/**\n * form resolution the same way our old implementation did\n * it is either the id or the parent form of the element or an embedded form\n * of the element\n *\n * @param requestCtx\n * @param elem\n * @param event\n */\nexport function resolveForm(requestCtx: Config, elem: DQ, event: Event): DQ {\n    const configId = requestCtx.value?.myfaces?.form ?? MF_NONE; //requestCtx.getIf(MYFACES, \"form\").orElse(MF_NONE).value;\n    return DQ\n        .byId(configId, true)\n        .orElseLazy(() => ExtLang.getForm(elem.getAsElem(0).value, event));\n}\n\nexport function resolveTimeout(options: Config): number {\n    let getCfg = ExtLang.getLocalOrGlobalConfig;\n    return options.getIf(CTX_PARAM_TIMEOUT).value ?? getCfg(options.value, CTX_PARAM_TIMEOUT, 0);\n}\n\n/**\n * resolve the delay from the options and/or the request context and or the configuration\n *\n * @param options ... the options object, in most cases it will host the delay value\n */\nexport function resolveDelay(options: Config): number {\n    let getCfg = ExtLang.getLocalOrGlobalConfig;\n\n    return options.getIf(CTX_PARAM_DELAY).value ?? getCfg(options.value, CTX_PARAM_DELAY, 0);\n}\n\n/**\n * resolves the window Id from various sources\n *\n * @param options\n */\nexport function resolveWindowId(options: Config) {\n    return options?.value?.windowId ?? ExtDomquery.windowId;\n}\n\n/**\n * cross port from the dojo lib\n * browser save event resolution\n * @param evt the event object\n * (with a fallback for ie events if none is present)\n */\nexport function getEventTarget(evt: Event): Element {\n    //ie6 and 7 fallback\n    let finalEvent = evt;\n    /**\n     * evt source is defined in the jsf events\n     * seems like some component authors use our code\n     * so we add it here see also\n     * https://issues.apache.org/jira/browse/MYFACES-2458\n     * not entirely a bug but makes sense to add this\n     * behavior. I dont use it that way but nevertheless it\n     * does not break anything so why not\n     * */\n    let t = finalEvent?.srcElement ?? finalEvent?.target ?? (<any>finalEvent)?.source;\n    while ((t) && (t.nodeType != 1)) {\n        t = t.parentNode;\n    }\n    return t;\n}\n\n/**\n * resolves a bunch of default values\n * which can be further processed from the given\n * call parameters of jsf.ajax.request\n *\n * @param event\n * @param opts\n * @param el\n */\nexport function resolveDefaults(event: Event, opts: any = {}, el: Element | string = null) {\n    //deep copy the options, so that further transformations to not backfire into the callers\n    const resolvedEvent = event,\n        options = new Config(opts).deepCopy,\n        elem = DQ.byId(el || <Element>resolvedEvent.target, true),\n        elementId = elem.id, requestCtx = new Config({}),\n        internalCtx = new Config({}), windowId = resolveWindowId(options),\n        isResetValues = true === options.value?.resetValues;\n\n    return {resolvedEvent, options, elem, elementId, requestCtx, internalCtx, windowId, isResetValues};\n}","/* Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Config, Optional, XMLQuery} from \"../../ext/monadish\";\n\nimport {Assertions} from \"../util/Assertions\";\nimport {DQ} from \"../../ext/monadish\";\nimport {\n    CTX_PARAM_MF_INTERNAL,\n    CTX_PARAM_SRC_CTL_ID,\n    CTX_PARAM_SRC_FRM_ID,\n    SEL_RESPONSE_XML,\n    SOURCE,\n    TAG_FORM,\n    UPDATE_ELEMS,\n    UPDATE_FORMS\n} from \"../core/Const\";\n\n/**\n * Resolver functions for various aspects of the response data\n *\n * stateless because it might be called from various\n * parts of the response classes\n */\n\n/**\n * fetches the response XML\n * as XML Query object\n *\n * @param request the request hosting the responseXML\n *\n * Throws an error in case of non existent or wrong xml data\n *\n */\nexport function resolveResponseXML(request: Config): XMLQuery {\n    let ret = new XMLQuery(request.getIf(SEL_RESPONSE_XML).value);\n    Assertions.assertValidXMLResponse(ret);\n\n    return ret;\n}\n\n/**\n * Splits the incoming passthrough context apart\n * in an internal and an external nomalized context\n * the internal one is just for our internal processing\n *\n * @param context the root context as associative array\n */\nexport function resolveContexts(context: { [p: string]: any }): any {\n    /**\n     * we split the context apart into the external one and\n     * some internal values\n     */\n    let externalContext = Config.fromNullable(context);\n    let internalContext = externalContext.getIf(CTX_PARAM_MF_INTERNAL);\n    if (!internalContext.isPresent()) {\n        internalContext = Config.fromNullable({});\n    }\n\n    /**\n     * prepare storage for some deferred operations\n     */\n    internalContext.assign(UPDATE_FORMS).value = [];\n    internalContext.assign(UPDATE_ELEMS).value = [];\n    return {externalContext, internalContext};\n}\n\n/**\n * fetches the source element out of our conexts\n *\n * @param context the external context which shpuld host the source id\n * @param internalContext internal passthrough fall back\n *\n */\nexport function resolveSourceElement(context: Config, internalContext: Config): DQ {\n    let elemId = resolveSourceElementId(context, internalContext);\n    return DQ.byId(elemId.value, true);\n}\n\n/**\n * fetches the source form if it still exists\n * also embedded forms and parent forms are taken into consideration\n * as fallbacks\n *\n * @param internalContext\n * @param elem\n */\nexport function resolveSourceForm(internalContext: Config, elem: DQ): DQ {\n    let sourceFormId = internalContext.getIf(CTX_PARAM_SRC_FRM_ID);\n    let sourceForm = new DQ(sourceFormId.isPresent() ? document.forms[sourceFormId.value] : null);\n\n    sourceForm = sourceForm.orElse(elem.parents(TAG_FORM))\n        .orElse(elem.querySelectorAll(TAG_FORM))\n        .orElse(DQ.querySelectorAll(TAG_FORM));\n\n    return sourceForm;\n}\n\nfunction resolveSourceElementId(context: Config, internalContext: Config): Optional<string> {\n    //?internal context?? used to be external one\n    return internalContext.getIf(CTX_PARAM_SRC_CTL_ID)\n        .orElseLazy(() => context.getIf(SOURCE, \"id\").value);\n}\n\n","/* Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Config, DQ, XMLQuery} from \"../../ext/monadish\";\nimport {ResponseProcessor} from \"./ResponseProcessor\";\n\nimport {IResponseProcessor} from \"./IResponseProcessor\";\nimport {\n    CMD_ATTRIBUTES,\n    CMD_CHANGES,\n    CMD_DELETE,\n    CMD_ERROR,\n    CMD_EVAL,\n    CMD_EXTENSION,\n    CMD_INSERT,\n    CMD_REDIRECT,\n    CMD_UPDATE,\n    P_VIEWBODY,\n    P_VIEWHEAD,\n    P_VIEWROOT,\n    PARTIAL_ID,\n    RESP_PARTIAL,\n    RESPONSE_XML,\n    TAG_AFTER,\n    TAG_BEFORE\n} from \"../core/Const\";\nimport {resolveContexts, resolveResponseXML} from \"./ResonseDataResolver\";\n\n\nexport module Response {\n\n\n    /**\n     * Standardized jsf.js response\n     * this one is called straight from jsf.js.response\n     *\n     * The processing follows the spec by going for the responseXML\n     * and processing its tags\n     *\n     * @param {XMLHttpRequest} request (xhrRequest) - xhr request object\n     * @param {[key: string]: any} context (Map) - AJAX context\n     *\n     */\n    export function processResponse(request: XMLHttpRequest, context: { [key: string]: any }) {\n\n        let req = Config.fromNullable(request);\n        let {externalContext, internalContext} = resolveContexts(context);\n        let responseXML: XMLQuery = resolveResponseXML(req);\n        let responseProcessor = new ResponseProcessor(req, externalContext, internalContext);\n\n        internalContext.assign(RESPONSE_XML).value = responseXML;\n\n        //we now process the partial tags, or in none given raise an error\n        responseXML.querySelectorAll(RESP_PARTIAL)\n            .each(item => processPartialTag(<XMLQuery>item, responseProcessor, internalContext));\n\n        //we now process the viewstates, client windows and the evals deferred\n        //the reason for this is that often it is better\n        //to wait until the document has caught up before\n        //doing any evals even on embedded scripts\n        //usually this does not matter, the client window comes in almost last always anyway\n        //we maybe drop this deferred assignment in the future, but myfaces did it until now\n        responseProcessor.fixViewStates();\n        responseProcessor.fixClientWindow();\n        responseProcessor.globalEval();\n\n        responseProcessor.done();\n    }\n\n    /**\n     * highest node partial-response from there the main operations are triggered\n     */\n     function processPartialTag(node: XMLQuery, responseProcessor: IResponseProcessor, internalContext) {\n\n        internalContext.assign(PARTIAL_ID).value = node.id;\n        const SEL_SUB_TAGS = [CMD_ERROR, CMD_REDIRECT, CMD_CHANGES].join(\",\");\n\n        //now we can process the main operations\n        node.getIf(SEL_SUB_TAGS).each((node: XMLQuery) => {\n            switch (node.tagName.value) {\n                case CMD_ERROR:\n                    responseProcessor.error(node);\n                    break;\n                case CMD_REDIRECT:\n                    responseProcessor.redirect(node);\n                    break;\n                case CMD_CHANGES:\n                    processChangesTag(node, responseProcessor);\n                    break;\n            }\n        });\n\n    }\n\n    let processInsert = function (responseProcessor: IResponseProcessor, node: XMLQuery) {\n         //path1 insert after as child tags\n         if(node.querySelectorAll([TAG_BEFORE, TAG_AFTER].join(\",\")).length) {\n             responseProcessor.insertWithSubtags(node);\n         } else { //insert before after with id\n             responseProcessor.insert(node);\n         }\n\n    };\n\n    /**\n     * next level changes tag\n     *\n     * @param node\n     * @param responseProcessor\n     */\n     function processChangesTag(node: XMLQuery, responseProcessor: IResponseProcessor): boolean {\n        const ALLOWED_TAGS = [CMD_UPDATE, CMD_EVAL, CMD_INSERT, CMD_DELETE, CMD_ATTRIBUTES, CMD_EXTENSION].join(\",\");\n        node.getIf(ALLOWED_TAGS).each(\n            (node: XMLQuery) => {\n                switch (node.tagName.value) {\n                    case CMD_UPDATE:\n                        processUpdateTag(node, responseProcessor);\n                        break;\n\n                    case CMD_EVAL:\n                        responseProcessor.eval(node);\n                        break;\n\n                    case CMD_INSERT:\n                        processInsert(responseProcessor, node);\n                        break;\n\n                    case CMD_DELETE:\n                        responseProcessor.delete(node);\n                        break;\n\n                    case CMD_ATTRIBUTES:\n                        responseProcessor.attributes(node);\n                        break;\n\n                    case CMD_EXTENSION:\n                        break;\n                }\n            }\n        );\n        return true;\n    }\n\n    /**\n     * checks and stores a state update for delayed processing\n     *\n     * @param responseProcessor the response processor to perform the store operation\n     * @param node the xml node to check for the state\n     *\n     * @private\n     */\n    function storeState(responseProcessor: IResponseProcessor, node: XMLQuery) {\n        return responseProcessor.processViewState(node) || responseProcessor.processClientWindow(node);\n    }\n\n    /**\n     * branch tag update.. drill further down into the updates\n     * special case viewstate in that case it is a leaf\n     * and the viewstate must be processed\n     *\n     * @param node\n     * @param responseProcessor\n     */\n     function processUpdateTag(node: XMLQuery, responseProcessor: IResponseProcessor) {\n         //early state storing, if no state we perform a normal update cycle\n        if (!storeState(responseProcessor, node)) {\n            handleElementUpdate(node, responseProcessor);\n        }\n    }\n\n    /**\n     * element update\n     *\n     * @param node\n     * @param responseProcessor\n     */\n     function handleElementUpdate(node: XMLQuery, responseProcessor: IResponseProcessor) {\n        let cdataBlock = node.cDATAAsString;\n        switch (node.id.value) {\n            case P_VIEWROOT :\n                responseProcessor.replaceViewRoot(DQ.fromMarkup(cdataBlock.substring(cdataBlock.indexOf(\"<html\"))));\n                break;\n\n            case P_VIEWHEAD:\n                responseProcessor.replaceHead(DQ.fromMarkup(cdataBlock));\n                break;\n\n            case P_VIEWBODY:\n                responseProcessor.replaceBody(DQ.fromMarkup(cdataBlock));\n                break;\n\n            default://htmlItem replacement\n                responseProcessor.update(node, cdataBlock);\n                break;\n\n        }\n    }\n}","/* Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Config, DomQuery, DQ, Lang, Stream, XMLQuery} from \"../../ext/monadish\";\nimport {Implementation} from \"../AjaxImpl\";\nimport {Assertions} from \"../util/Assertions\";\nimport {IResponseProcessor} from \"./IResponseProcessor\";\nimport {ErrorData} from \"./ErrorData\";\nimport {ExtLang} from \"../util/Lang\";\n\nimport {StateHolder} from \"../core/ImplTypes\";\nimport {EventData} from \"./EventData\";\nimport {\n    APPLIED_CLIENT_WINDOW,\n    APPLIED_VST,\n    ATTR_ID,\n    ATTR_NAME,\n    ATTR_URL,\n    ATTR_VALUE,\n    EMPTY_FUNC,\n    EMPTY_STR,\n    ERROR_MESSAGE,\n    ERROR_NAME,\n    HTML_VIEWSTATE,\n    ON_ERROR,\n    ON_EVENT, P_CLIENT_WINDOW,\n    P_PARTIAL_SOURCE,\n    P_VIEWSTATE,\n    RESPONSE_XML, SEL_CLIENT_WINDOW_ELEM,\n    SEL_SCRIPTS_STYLES,\n    SEL_VIEWSTATE_ELEM,\n    SOURCE,\n    SUCCESS,\n    TAG_AFTER,\n    TAG_ATTR,\n    TAG_BEFORE,\n    TAG_BODY,\n    TAG_FORM,\n    TAG_HEAD,\n    UPDATE_ELEMS,\n    UPDATE_FORMS\n} from \"../core/Const\";\nimport trim = Lang.trim;\n\n/**\n * Response processor\n *\n * Each  XML tag is either a node or a leaf\n * or both\n *\n * the processor provides a set of operations\n * which are executed on a single leaf node per operation\n * and present the core functionality of our response\n *\n * Note the response processor is stateful hence we bundle it in a class\n * to reduce code we keep references tot contexts in place\n */\nexport class ResponseProcessor implements IResponseProcessor {\n\n    constructor(private request: Config, private externalContext: Config, private internalContext: Config) {\n\n    }\n\n    replaceHead(shadowDocument: XMLQuery | DQ) {\n        let shadowHead = shadowDocument.querySelectorAll(TAG_HEAD);\n        if (!shadowHead.isPresent()) {\n            return;\n        }\n\n        let oldHead = DQ.querySelectorAll(TAG_HEAD);\n\n        //delete all to avoid script and style overlays\n        oldHead.querySelectorAll(SEL_SCRIPTS_STYLES).delete();\n\n        this.storeForEval(shadowHead);\n    }\n\n    /**\n     * replaces the body in the expected manner\n     * which means the entire body content is refreshed\n     * however also the body attributes must be transferred\n     * keeping event handlers etc... in place\n     *\n     * @param shadowDocument .. an incoming shadow document hosting the new nodes\n     */\n    replaceBody(shadowDocument: XMLQuery | DQ) {\n\n        let shadowBody = shadowDocument.querySelectorAll(TAG_BODY);\n        if (!shadowBody.isPresent()) {\n            return;\n        }\n\n        let shadowInnerHTML: string = <string>shadowBody.html().value;\n\n        let resultingBody = <DQ>DQ.querySelectorAll(TAG_BODY).html(shadowInnerHTML);\n        let updateForms = resultingBody.querySelectorAll(TAG_FORM);\n\n        resultingBody.copyAttrs(shadowBody);\n\n        this.storeForPostProcessing(updateForms, resultingBody);\n    }\n\n    /**\n     * Leaf Tag eval... process whatever is in the evals cdata block\n     *\n     * @param node the node to eval\n     */\n    eval(node: XMLQuery) {\n        DQ.globalEval(node.cDATAAsString);\n    }\n\n    /**\n     * processes an incoming error from the response\n     * which is hosted under the &lt;error&gt; tag\n     * @param node the node hosting the error in our response xml\n     * @param node the node in the xml hosting the error message\n     */\n    error(node: XMLQuery) {\n        /**\n         * <error>\n         *      <error-name>String</error-name>\n         *      <error-message><![CDATA[message]]></error-message>\n         * <error>\n         */\n\n        let mergedErrorData = new Config({});\n        mergedErrorData.assign(SOURCE).value = this.externalContext.getIf(P_PARTIAL_SOURCE).get(0).value;\n        mergedErrorData.assign(ERROR_NAME).value = node.getIf(ERROR_NAME).textContent(EMPTY_STR);\n        mergedErrorData.assign(ERROR_MESSAGE).value = node.getIf(ERROR_MESSAGE).cDATAAsString;\n\n        let hasResponseXML = this.internalContext.get(RESPONSE_XML).isPresent();\n        mergedErrorData.assignIf(hasResponseXML, RESPONSE_XML).value = this.internalContext.getIf(RESPONSE_XML).value.get(0).value;\n\n        let errorData = ErrorData.fromServerError(mergedErrorData);\n\n        this.externalContext.getIf(ON_ERROR).orElse(this.internalContext.getIf(ON_ERROR).value).orElse(EMPTY_FUNC).value(errorData);\n        Implementation.sendError(errorData);\n    }\n\n    /**\n     * process the redirect operation\n     *\n     * @param node\n     */\n    redirect(node: XMLQuery) {\n        Assertions.assertUrlExists(node);\n\n        let redirectUrl = trim(node.attr(ATTR_URL).value);\n        if (redirectUrl != EMPTY_STR) {\n            (<any>window).location.href = redirectUrl;\n        }\n    }\n\n    /**\n     * processes the update operation and updates the node with the cdata block\n     * @param node the xml response node hosting the update info\n     * @param cdataBlock the cdata block with the new html code\n     */\n    update(node: XMLQuery, cdataBlock: string) {\n        let result = DQ.byId(node.id.value, true).outerHTML(cdataBlock, false, false);\n        let sourceForm = result?.parents(TAG_FORM).orElse(result.byTagName(TAG_FORM, true));\n        if (sourceForm) {\n            this.storeForPostProcessing(sourceForm, result);\n        }\n    }\n\n    delete(node: XMLQuery) {\n        DQ.byId(node.id.value, true).delete();\n    }\n\n    /**\n     * attributes leaf tag... process the attributes\n     *\n     * @param node\n     */\n    attributes(node: XMLQuery) {\n        let elem = DQ.byId(node.id.value, true);\n\n        node.byTagName(TAG_ATTR).each((item: XMLQuery) => {\n            elem.attr(item.attr(ATTR_NAME).value).value = item.attr(ATTR_VALUE).value;\n        });\n    }\n\n    /**\n     * @param shadowDocument a shadow document which is needed for further processing\n     */\n    replaceViewRoot(shadowDocument: XMLQuery) {\n        this.replaceHead(shadowDocument);\n        this.replaceBody(shadowDocument);\n    }\n\n    /**\n     * insert handling, either before or after\n     *\n     * @param node\n     */\n    insert(node: XMLQuery) {\n        //let insertId = node.id; //not used atm\n\n        let before = node.attr(TAG_BEFORE);\n        let after = node.attr(TAG_AFTER);\n\n        let insertNodes = DQ.fromMarkup(<any>node.cDATAAsString);\n\n        if (before.isPresent()) {\n            DQ.byId(before.value, true).insertBefore(insertNodes);\n            this.internalContext.assign(UPDATE_ELEMS).value.push(insertNodes);\n        }\n        if (after.isPresent()) {\n            let domQuery = DQ.byId(after.value, true);\n            domQuery.insertAfter(insertNodes);\n\n            this.internalContext.assign(UPDATE_ELEMS).value.push(insertNodes);\n        }\n    }\n\n    /**\n     * handler for the case &lt;insert <&lt; before id=\"...\n     *\n     * @param node the node hosting the insert data\n     */\n    insertWithSubtags(node: XMLQuery) {\n        let before = node.querySelectorAll(TAG_BEFORE);\n        let after = node.querySelectorAll(TAG_AFTER);\n\n        before.each(item => {\n            let insertId = item.attr(ATTR_ID);\n            let insertNodes = DQ.fromMarkup(<any>item.cDATAAsString);\n            if (insertId.isPresent()) {\n                DQ.byId(insertId.value, true).insertBefore(insertNodes);\n                this.internalContext.assign(UPDATE_ELEMS).value.push(insertNodes);\n            }\n        });\n\n        after.each(item => {\n            let insertId = item.attr(ATTR_ID);\n            let insertNodes = DQ.fromMarkup(<any>item.cDATAAsString);\n            if (insertId.isPresent()) {\n                DQ.byId(insertId.value, true).insertAfter(insertNodes);\n                this.internalContext.assign(UPDATE_ELEMS).value.push(insertNodes);\n            }\n        });\n    }\n\n    /**\n     * process the viewState update, update the affected\n     * forms with their respective new viewstate values\n     *\n     */\n    processViewState(node: XMLQuery): boolean {\n        if (ResponseProcessor.isViewStateNode(node)) {\n            let state = node.cDATAAsString;\n            this.internalContext.assign(APPLIED_VST, node.id.value).value = new StateHolder(node.id.value, state);\n            return true;\n        }\n        return false;\n    }\n\n    processClientWindow(node: XMLQuery): boolean {\n        if (ResponseProcessor.isClientWindowNode(node)) {\n            let state = node.cDATAAsString;\n            this.internalContext.assign(APPLIED_CLIENT_WINDOW, node.id.value).value = new StateHolder(node.id.value, state);\n            return true;\n        }\n    }\n\n    /**\n     * generic global eval which runs the embedded css and scripts\n     */\n    globalEval() {\n        let updateElems = new DQ(...this.internalContext.getIf(UPDATE_ELEMS).value);\n        updateElems.runCss();\n        updateElems.runScripts();\n    }\n\n    /**\n     * post processing viewstate fixing\n     */\n    fixViewStates() {\n        Stream.ofAssoc<StateHolder>(this.internalContext.getIf(APPLIED_VST).orElse({}).value)\n            .each((item: Array<any>) => {\n                let value: StateHolder = item[1];\n                let nameSpace = DQ.byId(value.nameSpace, true).orElse(document.body);\n                let affectedForms = nameSpace.byTagName(TAG_FORM);\n                let affectedForms2 = nameSpace.filter(item => item.tagName.orElse(EMPTY_STR).value.toLowerCase() == TAG_FORM);\n\n                this.appendViewStateToForms(new DomQuery(affectedForms, affectedForms2), value.value);\n            });\n    }\n\n    fixClientWindow() {\n        Stream.ofAssoc<StateHolder>(this.internalContext.getIf(APPLIED_CLIENT_WINDOW).orElse({}).value)\n            .each((item: Array<any>) => {\n                let value: StateHolder = item[1];\n                let nameSpace = DQ.byId(value.nameSpace, true).orElse(document.body);\n                let affectedForms = nameSpace.byTagName(TAG_FORM);\n                let affectedForms2 = nameSpace.filter(item => item.tagName.orElse(EMPTY_STR).value.toLowerCase() == TAG_FORM);\n\n                this.appendClientWindowToForms(new DomQuery(affectedForms, affectedForms2), value.value);\n            });\n    }\n\n    /**\n     * all processing done we can close the request and send the appropriate events\n     */\n    done() {\n        let eventData = EventData.createFromRequest(this.request.value, this.externalContext, SUCCESS);\n\n        //because some frameworks might decorate them over the context in the response\n        let eventHandler = this.externalContext.getIf(ON_EVENT).orElse(this.internalContext.getIf(ON_EVENT).value).orElse(EMPTY_FUNC).value;\n        Implementation.sendEvent(eventData, eventHandler);\n    }\n\n    /**\n     * proper viewstate -> form assignment\n     *\n     * @param forms the forms to append the viewstate to\n     * @param viewState the final viewstate\n     */\n    private appendViewStateToForms(forms: DQ, viewState: string) {\n        this.assignState(forms, SEL_VIEWSTATE_ELEM, viewState);\n    }\n\n\n    /**\n     * proper clientwindow -> form assignment\n     *\n     * @param forms the forms to append the viewstate to\n     * @param clientWindow the final viewstate\n     */\n    private appendClientWindowToForms(forms: DQ, clientWindow: string) {\n        this.assignState(forms, SEL_CLIENT_WINDOW_ELEM, clientWindow);\n    }\n\n    /**\n     * generic append state which appends a certain state as hidden element to an existing set of forms\n     *\n     * @param forms the forms to append or change to\n     * @param selector the selector for the state\n     * @param state the state itself which needs to be assigned\n     *\n     * @private\n     */\n    private assignState(forms: DQ, selector: string, state: string) {\n        forms.each((form: DQ) => {\n            let stateHolders = form.querySelectorAll(selector)\n                .orElseLazy(() => ResponseProcessor.newViewStateElement(form));\n\n            stateHolders.attr(\"value\").value = state;\n        });\n    }\n\n    /**\n     * Helper to Create a new JSF ViewState Element\n     *\n     * @param parent, the parent node to attach the viewstate element to\n     * (usually a form node)\n     */\n    private static newViewStateElement(parent: DQ): DQ {\n        let newViewState = DQ.fromMarkup(HTML_VIEWSTATE);\n        newViewState.appendTo(parent);\n        return newViewState;\n    }\n\n    /**\n     * Stores certain aspects of the dom for later post processing\n     *\n     * @param updateForms the update forms which should receive standardized internal jsf data\n     * @param toBeEvaled the resulting elements which should be evaled\n     */\n    private storeForPostProcessing(updateForms: DQ, toBeEvaled: DQ) {\n        this.storeForUpdate(updateForms);\n        this.storeForEval(toBeEvaled);\n    }\n\n    /**\n     * helper to store a given form for the update post processing (viewstate)\n     *\n     * @param updateForms the dom query object pointing to the forms which need to be updated\n     */\n    private storeForUpdate(updateForms: DQ) {\n        this.internalContext.assign(UPDATE_FORMS).value.push(updateForms);\n    }\n\n    /**\n     * same for eval (js and css)\n     *\n     * @param toBeEvaled\n     */\n    private storeForEval(toBeEvaled: DQ) {\n        this.internalContext.assign(UPDATE_ELEMS).value.push(toBeEvaled);\n    }\n\n    /**\n     * check whether a given XMLQuery node is an explicit viewstate node\n     *\n     * @param node the node to check\n     * @returns true of it ii\n     */\n    private static isViewStateNode(node: XMLQuery): boolean {\n        let separatorChar = (<any>window).jsf.separatorchar;\n        return \"undefined\" != typeof node?.id?.value && (node?.id?.value == P_VIEWSTATE ||\n            node?.id?.value?.indexOf([separatorChar, P_VIEWSTATE].join(EMPTY_STR)) != -1 ||\n            node?.id?.value?.indexOf([P_VIEWSTATE, separatorChar].join(EMPTY_STR)) != -1);\n    }\n\n    /**\n     * incoming client window node also needs special processing\n     *\n     * @param node the node to check\n     * @returns true of it ii\n     */\n    private static isClientWindowNode(node: XMLQuery): boolean {\n        let separatorChar = (<any>window).jsf.separatorchar;\n        return \"undefined\" != typeof node?.id?.value && (node?.id?.value == P_CLIENT_WINDOW ||\n            node?.id?.value?.indexOf([separatorChar, P_CLIENT_WINDOW].join(EMPTY_STR)) != -1 ||\n            node?.id?.value?.indexOf([P_CLIENT_WINDOW, separatorChar].join(EMPTY_STR)) != -1);\n    }\n\n}","/* Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {ArrayCollector, Config, DomQuery, DomQueryCollector, Lang, LazyStream} from \"../../ext/monadish\";\n\nimport {Stream} from \"../../ext/monadish\";\nimport {DQ} from \"../../ext/monadish\";\nimport isString = Lang.isString;\nimport {EMPTY_STR, P_VIEWSTATE} from \"../core/Const\";\n\n\n/**\n * A unified form data class\n * which builds upon our configuration.\n *\n * We cannot use standard html5 forms everywhere\n * due to api constraints on the HTML Form object in IE11\n * and due to the url encoding constraint given by the jsf.js spec\n *\n * TODO not ideal. too many encoding calls\n * probably only one needed and one overlay!\n * the entire fileinput storing probably is redundant now\n * that domquery has been fixed\n */\nexport class XhrFormData extends Config {\n\n    private fileInputs = {};\n\n    /**\n     * data collector from a given form\n     *\n     * @param dataSource either a form as DomQuery object or an encoded url string\n     * @param partialIdsArray partial ids to collect, to reduce the data sent down\n     */\n    constructor(private dataSource: DQ | string, private partialIdsArray?: string[], private encode = true) {\n        super({});\n        //a call to getViewState before must pass the encoded line\n        //a call from getViewState passes the form element as datasource\n        //so we have two call points\n        if (isString(dataSource)) {\n            this.assignEncodedString(<string>this.dataSource);\n        } else {\n            this.handleFormSource();\n        }\n    }\n\n    /**\n     * generic application of ids\n     * @param executes\n     */\n    applyFileInputs(...executes: Array<string>) {\n\n        let fetchInput = (id: string): DQ => {\n            if (id == \"@all\") {\n                return DQ.querySelectorAllDeep(\"input[type='file']\");\n            } else if (id == \"@form\") {\n                return (<DQ>this.dataSource).querySelectorAllDeep(\"input[type='file']\");\n            } else {\n                let element = DQ.byId(id, true);\n                return this.getFileInputs(element);\n            }\n        };\n\n        let inputExists = (item: DQ) => {\n            return !!item.length;\n        };\n\n        let applyInput = (item: DQ) => {\n            this.fileInputs[this.resolveSubmitIdentifier(<HTMLInputElement>item.getAsElem(0).value)] = true;\n        };\n\n        LazyStream.of(...executes)\n            .map(fetchInput)\n            .filter(inputExists)\n            .each(applyInput);\n    }\n\n    private getFileInputs(rootElment: DQ): DQ {\n\n        let resolveFileInputs = item => {\n\n            if (item.length == 1) {\n                if ((<string>item.tagName.get(\"booga\").value).toLowerCase() == \"input\" &&\n                    (<string>item.attr(\"type\")?.value || '').toLowerCase() == \"file\") {\n                    return item;\n                }\n\n                return rootElment.querySelectorAllDeep(\"input[type='file']\");\n            }\n            return this.getFileInputs(item);\n        };\n\n        let itemExists = (item: DQ) => {\n            return !!item?.length;\n        }\n\n        let ret = rootElment.lazyStream\n            .map(resolveFileInputs)\n            .filter(itemExists)\n            .collect(new DomQueryCollector());\n\n        return ret;\n    }\n\n\n    private handleFormSource() {\n        //encode and append the issuing item if not a partial ids array of ids is passed\n        /*\n         * Spec. 13.3.1\n         * Collect and encode input elements.\n         * Additionally the hidden element javax.faces.ViewState\n         * Enhancement partial page submit\n         *\n         */\n        this.encodeSubmittableFields(this, <DQ>this.dataSource, this.partialIdsArray);\n\n        if (this.getIf(P_VIEWSTATE).isPresent()) {\n            return;\n        }\n\n        this.applyViewState(<DQ>this.dataSource);\n    }\n\n    /**\n     * special case viewstate handling\n     *\n     * @param form the form holding the viewstate value\n     */\n    private applyViewState(form: DQ) {\n        let viewState = form.byId(P_VIEWSTATE, true).inputValue;\n        this.appendIf(viewState.isPresent(), P_VIEWSTATE).value = viewState.value;\n    }\n\n    /**\n     * assignes a url encoded string to this xhrFormData object\n     * as key value entry\n     * @param encoded\n     */\n    assignEncodedString(encoded: string) {\n        let keyValueEntries = decodeURIComponent(encoded).split(/&/gi);\n        this.assignString(keyValueEntries);\n    }\n\n    assignString(keyValueEntries: string[]) {\n        let toMerge = new Config({});\n\n        Stream.of(...keyValueEntries)\n            //split only the first =\n            .map(line => line.split(/=(.*)/gi))\n            //special case of having keys without values\n            .map(keyVal => keyVal.length < 3 ? [keyVal?.[0] ?? [], keyVal?.[1] ?? []] : keyVal)\n            .each(keyVal => {\n                toMerge.append(keyVal[0]).value = keyVal?.splice(1)?.join(\"\") ?? \"\";\n            });\n        //merge with overwrite but no append! (aka no double entries are allowed)\n        this.shallowMerge(toMerge);\n    }\n\n// noinspection JSUnusedGlobalSymbols\n    /**\n     * @returns a Form data representation\n     */\n    toFormData(): FormData {\n        let ret: any = new FormData();\n\n        LazyStream.of(...Object.keys(this.value))\n            .filter(key => !(key in this.fileInputs))\n            .each(key => {\n                Stream.of(...this.value[key]).each(item => ret.append(key, item));\n            });\n        Stream.of<string>(...Object.keys(this.fileInputs)).each((key: string) => {\n            DQ.querySelectorAllDeep(`[name='${key}'], [id=\"${key}\"]`).eachElem((elem: HTMLInputElement) => {\n                let identifier = this.resolveSubmitIdentifier(elem);\n                if (!elem?.files?.length) {\n                    ret.append(identifier, elem.value);\n                    return;\n                }\n\n                ret.append(identifier, elem.files[0]);\n            })\n        });\n        return ret;\n    }\n\n    resolveSubmitIdentifier(elem: HTMLInputElement) {\n        let identifier = elem.name;\n        identifier = ((elem?.name ?? \"\").replace(/s+/gi, \"\") == \"\") ? elem.id : identifier;\n        return identifier;\n    }\n\n    /**\n     * returns an encoded string representation of our xhr form data\n     *\n     * @param defaultStr optional default value if nothing is there to encode\n     */\n    toString(defaultStr = EMPTY_STR): string {\n        if (this.isAbsent()) {\n            return defaultStr;\n        }\n        let entries = LazyStream.of(...Object.keys(this.value))\n            .filter(key => this.value.hasOwnProperty(key))\n            .flatMap(key => Stream.of(...this.value[key]).map(val => [key, val]).collect(new ArrayCollector()))\n            .map(keyVal => {\n                return `${encodeURIComponent(keyVal[0])}=${encodeURIComponent(keyVal[1])}`;\n            })\n            .collect(new ArrayCollector());\n\n        return entries.join(\"&\")\n    }\n\n    /**\n     * determines fields to submit\n     * @param {Object} targetBuf - the target form buffer receiving the data\n     * @param {Node} parentItem - form element item is nested in\n     * @param {Array} partialIds - ids fo PPS\n     */\n    private encodeSubmittableFields(targetBuf: Config,\n                                    parentItem: DQ, partialIds ?: string[]) {\n        let toEncode = null;\n        if (this.partialIdsArray && this.partialIdsArray.length) {\n            //in case of our myfaces reduced ppr we only\n            //only submit the partials\n            this._value = {};\n            toEncode = new DQ(...this.partialIdsArray);\n\n        } else {\n            if (parentItem.isAbsent()) throw \"NO_PARITEM\";\n            toEncode = parentItem;\n        }\n\n        //lets encode the form elements\n\n        this.shallowMerge(toEncode.deepElements.encodeFormElement());\n    }\n\n    /**\n     * checks if the given datasource is a multipart request source\n     * multipart is only needed if one of the executes is a file input\n     * since file inputs are stateless, they fall out of the viewstate\n     * and need special handling\n     */\n    get isMultipartRequest(): boolean {\n        return !!Object.keys(this.fileInputs).length;\n    }\n\n}","/* Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {AsyncRunnable} from \"../util/AsyncRunnable\";\nimport {Config, DQ, Stream} from \"../../ext/monadish\";\nimport {Implementation} from \"../AjaxImpl\";\n\nimport {XhrFormData} from \"./XhrFormData\";\nimport {ErrorData} from \"./ErrorData\";\nimport {EventData} from \"./EventData\";\nimport {ExtLang} from \"../util/Lang\";\nimport {\n    BEGIN,\n    COMPLETE,\n    CONTENT_TYPE,\n    CTX_PARAM_MF_INTERNAL,\n    CTX_PARAM_PASS_THR,\n    ERROR,\n    HEAD_FACES_REQ,\n    MALFORMEDXML,\n    MULTIPART,\n    NO_TIMEOUT,\n    ON_ERROR,\n    ON_EVENT, P_EXECUTE,\n    REQ_ACCEPT,\n    REQ_TYPE_GET,\n    REQ_TYPE_POST,\n    STATE_EVT_TIMEOUT,\n    STD_ACCEPT,\n    URL_ENCODED,\n    VAL_AJAX\n} from \"../core/Const\";\nimport {resolveFinalUrl, resolveHandlerFunc} from \"./RequestDataResolver\";\nimport failSaveExecute = ExtLang.failSaveExecute;\n\n/**\n * JSFed XHR Request Wrapper\n * as Asyncrunnable for our Asynchronous queue\n *\n * The idea is that we basically just enqueue\n * a single ajax request into our queue\n * and let the queue do the processing.\n *\n */\n\ndeclare let jsf: any;\n\nexport class XhrRequest implements AsyncRunnable<XMLHttpRequest> {\n\n    private responseContext: Config;\n\n    private stopProgress = false;\n\n    /**\n     * helper support so that we do not have to drag in Promise shims\n     */\n    private catchFuncs: Array<Function> = [];\n    private thenFunc: Array<Function> = [];\n\n    /**\n     * Reqired Parameters\n     *\n     * @param source the issuing element\n     * @param sourceForm the form which is related to the issuing element\n     * @param requestContext the request context with allö pass through values\n     *\n     * Optional Parameters\n     *\n     * @param partialIdsArray an optional restricting partial ids array for encoding\n     * @param timeout optional xhr timeout\n     * @param ajaxType optional request type, default \"POST\"\n     * @param contentType optional content type, default \"application/x-www-form-urlencoded\"\n     * @param xhrObject optional xhr object which must fullfill the XMLHTTPRequest api, default XMLHttpRequest\n     */\n    constructor(\n        private source: DQ,\n        private sourceForm: DQ,\n        private requestContext: Config,\n        private internalContext: Config,\n        private partialIdsArray = [],\n        private timeout = NO_TIMEOUT,\n        private ajaxType = REQ_TYPE_POST,\n        private contentType = URL_ENCODED,\n        private xhrObject = new XMLHttpRequest()\n    ) {\n        /*\n        * we omit promises here\n        * some browsers do not support it and we do not need shim code\n        */\n        this.registerXhrCallbacks((data: any) => {\n            this.resolve(data)\n        }, (data: any) => {\n            this.reject(data)\n        });\n    }\n\n    start(): AsyncRunnable<XMLHttpRequest> {\n\n        let ignoreErr = failSaveExecute;\n        let xhrObject = this.xhrObject;\n\n        let executesArr = () => {\n            return this.requestContext.getIf(CTX_PARAM_PASS_THR, P_EXECUTE).get(\"none\").value.split(/\\s+/gi);\n        };\n        try {\n\n            let formElement = this.sourceForm.getAsElem(0).value;\n            let viewState = jsf.getViewState(formElement);\n            //encoded we need to decode\n            //We generated a base representation of the current form\n            let formData: XhrFormData = new XhrFormData(this.sourceForm);\n            //in case someone has overloaded the viewstate with addtional decorators we merge\n            //that in, there is no way around it, the spec allows it and getViewState\n            //must be called, so whatever getViewState delivers has higher priority then\n            //whatever the formData object delivers\n            formData.assignEncodedString(viewState);\n            formData.applyFileInputs(...executesArr());\n\n            this.contentType = formData.isMultipartRequest ? \"undefined\" : this.contentType;\n\n            //next step the pass through parameters are merged in for post params\n            let requestContext = this.requestContext;\n            let passThroughParams = requestContext.getIf(CTX_PARAM_PASS_THR);\n            formData.shallowMerge(passThroughParams, true, true);\n\n            this.responseContext = passThroughParams.deepCopy;\n\n            //we have to shift the internal passthroughs around to build up our response context\n            let responseContext = this.responseContext;\n\n            responseContext.assign(CTX_PARAM_MF_INTERNAL).value = this.internalContext.value;\n\n            //per spec the onevent and onerrors must be passed through to the response\n            responseContext.assign(ON_EVENT).value = requestContext.getIf(ON_EVENT).value;\n            responseContext.assign(ON_ERROR).value = requestContext.getIf(ON_ERROR).value;\n\n            xhrObject.open(this.ajaxType, resolveFinalUrl(this.sourceForm, formData, this.ajaxType), true);\n\n            //adding timeout\n            this.timeout ? xhrObject.timeout = this.timeout : null;\n\n            //a bug in the xhr stub library prevents the setRequestHeader to be properly executed on fake xhr objects\n            //normal browsers should resolve this\n            //tests can quietly fail on this one\n            if(this.contentType != \"undefined\") {\n                ignoreErr(() => xhrObject.setRequestHeader(CONTENT_TYPE, `${this.contentType}; charset=utf-8`));\n            }\n\n            ignoreErr(() => xhrObject.setRequestHeader(HEAD_FACES_REQ, VAL_AJAX));\n\n            //probably not needed anymore, will test this\n            //some webkit based mobile browsers do not follow the w3c spec of\n            // setting the accept headers automatically\n            ignoreErr(() => xhrObject.setRequestHeader(REQ_ACCEPT, STD_ACCEPT));\n\n            this.sendEvent(BEGIN);\n\n            this.sendRequest(formData);\n\n        } catch (e) {\n            //_onError//_onError\n            this.handleError(e);\n        }\n        return this;\n    }\n\n    cancel() {\n        try {\n            this.xhrObject.abort();\n        } catch (e) {\n            this.handleError(e);\n        }\n    }\n\n    resolve(data: any) {\n        Stream.of(...this.thenFunc).reduce((inputVal: any, thenFunc: any) => {\n            return thenFunc(inputVal);\n        }, data);\n    }\n\n    reject(data: any) {\n        Stream.of(...this.catchFuncs).reduce((inputVal: any, catchFunc: any) => {\n            return catchFunc(inputVal);\n        }, data);\n    }\n\n    catch(func: (data: any) => any): AsyncRunnable<XMLHttpRequest> {\n        //this.$promise.catch(func);\n        this.catchFuncs.push(func);\n        return this;\n    }\n\n    finally(func: () => void): AsyncRunnable<XMLHttpRequest> {\n        //no ie11 support we probably are going to revert to shims for that one\n        //(<any>this.$promise).then(func).catch(func);\n        this.catchFuncs.push(func);\n        this.thenFunc.push(func);\n        return this;\n    }\n\n    then(func: (data: any) => any): AsyncRunnable<XMLHttpRequest> {\n        //this.$promise.then(func);\n        this.thenFunc.push(func);\n        return this;\n    }\n\n    /**\n     * attaches the internal event and processing\n     * callback within the promise to our xhr object\n     *\n     * @param resolve\n     * @param reject\n     */\n    protected registerXhrCallbacks(resolve: Consumer<any>, reject: Consumer<any>) {\n        let xhrObject = this.xhrObject;\n\n        xhrObject.onabort = () => {\n            this.onAbort(resolve, reject);\n        };\n        xhrObject.ontimeout = () => {\n            this.onTimeout(resolve, reject);\n        };\n        xhrObject.onload = () => {\n            this.onSuccess(this.xhrObject, resolve, reject)\n        };\n        xhrObject.onloadend = () => {\n            this.onDone(this.xhrObject, resolve, reject);\n        };\n        xhrObject.onerror = (errorData: any) => {\n            this.onError(errorData, resolve, reject);\n        };\n    }\n\n    /*\n     * xhr processing callbacks\n     *\n     * Those methods are the callbacks called by\n     * the xhr object depending on its own state\n     */\n\n    protected onAbort(resolve: Consumer<any>, reject: Consumer<any>) {\n        reject();\n    }\n\n    protected onTimeout(resolve: Consumer<any>, reject: Consumer<any>) {\n        this.sendEvent(STATE_EVT_TIMEOUT);\n        reject();\n    }\n\n    protected onSuccess(data: any, resolve: Consumer<any>, reject: Consumer<any>) {\n\n        this.sendEvent(COMPLETE);\n\n        //malforms always result in empty response xml\n        if (!this?.xhrObject?.responseXML) {\n            this.handleMalFormedXML(resolve);\n            return;\n        }\n\n        jsf.ajax.response(this.xhrObject, this.responseContext.value ?? {});\n    }\n\n    private handleMalFormedXML(resolve: Function) {\n        this.stopProgress = true;\n        let errorData = {\n            type: ERROR,\n            status: MALFORMEDXML,\n            responseCode: 200,\n            responseText: this.xhrObject?.responseText,\n            source: {\n                id: this.source.id.value\n            }\n        };\n        try {\n            Implementation.sendError(<any>errorData);\n        } finally {\n            resolve(errorData);\n        }\n        //non blocking non clearing\n    }\n\n    protected onDone(data: any, resolve: Consumer<any>, reject: Consumer<any>) {\n        if (this.stopProgress) {\n            return;\n        }\n        resolve(data);\n    }\n\n    protected onError(errorData: any, resolve: Consumer<any>, reject: Consumer<any>) {\n        this.handleError(errorData);\n        reject();\n    }\n\n    /*\n     * other helpers\n     */\n    private sendEvent(evtType: string) {\n        let eventData = EventData.createFromRequest(this.xhrObject, this.requestContext, evtType);\n        try {\n            //user code error, we might cover\n            //this in onError but also we cannot swallow it\n            //we need to resolve the local handlers lazyly,\n            //because some frameworks might decorate them over the context in the response\n            let eventHandler = resolveHandlerFunc(this.requestContext, this.responseContext, ON_EVENT);\n\n            Implementation.sendEvent(eventData, eventHandler);\n        } catch (e) {\n            this.handleError(e);\n            throw e;\n        }\n    }\n\n    private handleError(exception) {\n        let errorData = ErrorData.fromClient(exception);\n\n        let eventHandler = resolveHandlerFunc(this.requestContext, this.responseContext, ON_ERROR);\n        Implementation.sendError(errorData, eventHandler);\n    }\n\n    protected sendRequest(formData: XhrFormData) {\n        let isPost = this.ajaxType != REQ_TYPE_GET;\n        if (formData.isMultipartRequest) {\n            //in case of a multipart request we send in a formData object as body\n            this.xhrObject.send((isPost) ? formData.toFormData() : null);\n        } else {\n            //in case of a normal request we send it normally\n            this.xhrObject.send((isPost) ? formData.toString() : null);\n        }\n    }\n\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(957);\n"],"sourceRoot":""}