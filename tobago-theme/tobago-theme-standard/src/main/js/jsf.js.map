{"version":3,"file":"jsf.js","mappings":"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","sources":["webpack://jsf.js_next_gen/./node_modules/mona-dish/src/main/typescript/DomQuery.ts","webpack://jsf.js_next_gen/./node_modules/mona-dish/src/main/typescript/Lang.ts","webpack://jsf.js_next_gen/./node_modules/mona-dish/src/main/typescript/Monad.ts","webpack://jsf.js_next_gen/./node_modules/mona-dish/src/main/typescript/SourcesCollectors.ts","webpack://jsf.js_next_gen/./node_modules/mona-dish/src/main/typescript/Stream.ts","webpack://jsf.js_next_gen/./node_modules/mona-dish/src/main/typescript/XmlQuery.ts","webpack://jsf.js_next_gen/./node_modules/mona-dish/src/main/typescript/index_core.ts","webpack://jsf.js_next_gen/./src/main/typescript/api/Jsf.ts","webpack://jsf.js_next_gen/./src/main/typescript/impl/AjaxImpl.ts","webpack://jsf.js_next_gen/./src/main/typescript/impl/PushImpl.ts","webpack://jsf.js_next_gen/./src/main/typescript/impl/core/Const.ts","webpack://jsf.js_next_gen/./src/main/typescript/impl/core/ImplTypes.ts","webpack://jsf.js_next_gen/./src/main/typescript/impl/i18n/Messages.ts","webpack://jsf.js_next_gen/./src/main/typescript/impl/util/Assertions.ts","webpack://jsf.js_next_gen/./src/main/typescript/impl/util/AsyncQueue.ts","webpack://jsf.js_next_gen/./src/main/typescript/impl/util/ExtDomQuery.ts","webpack://jsf.js_next_gen/./src/main/typescript/impl/util/Lang.ts","webpack://jsf.js_next_gen/./src/main/typescript/impl/xhrCore/ErrorData.ts","webpack://jsf.js_next_gen/./src/main/typescript/impl/xhrCore/EventData.ts","webpack://jsf.js_next_gen/./src/main/typescript/impl/xhrCore/RequestDataResolver.ts","webpack://jsf.js_next_gen/./src/main/typescript/impl/xhrCore/ResonseDataResolver.ts","webpack://jsf.js_next_gen/./src/main/typescript/impl/xhrCore/Response.ts","webpack://jsf.js_next_gen/./src/main/typescript/impl/xhrCore/ResponseProcessor.ts","webpack://jsf.js_next_gen/./src/main/typescript/impl/xhrCore/XhrFormData.ts","webpack://jsf.js_next_gen/./src/main/typescript/impl/xhrCore/XhrRequest.ts","webpack://jsf.js_next_gen/webpack/bootstrap","webpack://jsf.js_next_gen/webpack/startup"],"sourcesContent":["/* Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Config, Optional, ValueEmbedder} from \"./Monad\";\nimport {XMLQuery} from \"./XmlQuery\";\nimport {IStream, LazyStream, Stream} from \"./Stream\";\nimport {ArrayCollector, ICollector, IStreamDataSource} from \"./SourcesCollectors\";\nimport {Lang} from \"./Lang\";\nimport trim = Lang.trim;\nimport objToArray = Lang.objToArray;\nimport isString = Lang.isString;\nimport equalsIgnoreCase = Lang.equalsIgnoreCase;\n//import {observable, Observable, Subscriber} from \"rxjs\";\n\n/**\n * in order to poss custom parameters we need to extend the mutation observer init\n */\nexport interface WAIT_OPTS extends MutationObserverInit {\n    timeout ?: number;\n    /**\n     * interval on non legacy browsers\n     */\n    interval ?: number;\n}\n\n\n/**\n *\n *        // - submit checkboxes and radio inputs only if checked\n if ((tagName != \"select\" && elemType != \"button\"\n && elemType != \"reset\" && elemType != \"submit\" && elemType != \"image\")\n && ((elemType != \"checkbox\" && elemType != \"radio\"\n */\n\nenum Submittables {\n    SELECT = \"select\",\n    BUTTON = \"button\",\n    SUBMIT = \"submit\",\n    RESET = \"reset\",\n    IMAGE = \"image\",\n    RADIO = \"radio\",\n    CHECKBOX = \"checkbox\"\n\n}\n\n/**\n * helper to fix a common problem that a system has to wait until a certain condition is reached\n * depening on the browser this uses either the mutation observer or a semi compatible interval as fallback\n * @param condition\n */\nfunction waitUntilDom(root: DomQuery, condition: (element: DomQuery) => boolean, options: WAIT_OPTS = { attributes: true, childList: true, subtree: true, timeout: 500, interval: 100 }): Promise<DomQuery> {\n    const ret = new Promise<DomQuery>((success, error) => {\n        const MUT_ERROR = new Error(\"Mutation observer timeout\");\n        if('undefined' != typeof window.MutationObserver) {\n            const mutTimeout = setTimeout(() => {\n                return error(MUT_ERROR);\n            }, options.timeout);\n            const callback: MutationCallback = (mutationList: MutationRecord[], observer: MutationObserver) => {\n                const found = new DomQuery(mutationList.map((mut: MutationRecord) => mut.target)).first(condition);\n                if(found.isPresent()) {\n                    clearTimeout(mutTimeout);\n                    success(found);\n                }\n            }\n\n            const observer = new window.MutationObserver(callback);\n            // browsers might ignore it, but we cannot break the api in the case\n            // hence no timeout is passed\n            let observableOpts = {... options};\n            delete observableOpts.timeout;\n            root.eachElem(item => {\n                observer.observe(item, observableOpts)\n            })\n        } else { //fallback for legacy browsers without mutation observer\n            //we do the same but for now ignore the options on the dom query\n            let interval = setInterval(() => {\n                let found = null;\n                if(options.childList) {\n                    found = (condition(root)) ? root:  root.childNodes.first(condition);\n                } else if(options.subtree) {\n                    found = (condition(root)) ? root: root.querySelectorAll(\" * \").first(condition);\n                } else {\n                    found = (condition(root)) ? root: DomQuery.absent;\n                }\n                if(found.isPresent()) {\n                    if(timeout) {\n                        clearTimeout(timeout);\n                        clearInterval(interval);\n                        interval = null;\n                        success(found);\n                    }\n                }\n            }, options.interval);\n            let timeout = setTimeout(() => {\n                if(interval) {\n                    clearInterval(interval);\n                    error(MUT_ERROR);\n                }\n            }, options.timeout)\n\n        }\n    });\n    return ret;\n}\n\n\nexport class ElementAttribute extends ValueEmbedder<string> {\n\n    constructor(private element: DomQuery, private name: string, private defaultVal: string = null) {\n        super(element, name);\n    }\n\n    get value(): string {\n        let val: Element[] = this.element.get(0).orElse(...[]).values;\n        if (!val.length) {\n            return this.defaultVal;\n        }\n        return val[0].getAttribute(this.name);\n    }\n\n    set value(value: string) {\n        let val: Element[] = this.element.get(0).orElse(...[]).values;\n        for (let cnt = 0; cnt < val.length; cnt++) {\n            val[cnt].setAttribute(this.name, value);\n        }\n        val[0].setAttribute(this.name, value);\n    }\n\n    protected getClass(): any {\n        return ElementAttribute;\n    }\n\n    static fromNullable<ElementAttribute,T>(value?: any, valueKey: string = \"value\"): ElementAttribute {\n        return <any> new ElementAttribute(value, valueKey);\n    }\n\n}\n\n/**\n * small helper for the specialized jsf case\n * @param src\n * @constructor\n */\nconst DEFAULT_WHITELIST = (src: string) => {\n    return true;\n\n};\n\ninterface IDomQuery {\n    /**\n     * reads the first element if it exists and returns an optional\n     */\n    readonly value: Optional<Element>;\n    /**\n     * All elements as array\n     */\n    readonly values: Element[];\n    /**\n     * returns the id as settable value (See also ValueEmbedder)\n     */\n    readonly id: ValueEmbedder<string>;\n    /**\n     * returns the length of embedded nodes (top level)\n     */\n    readonly length: number;\n    /**\n     * the tag name of the first element\n     */\n    readonly tagName: Optional<string>;\n    /**\n     * the node name of the first element\n     */\n    readonly nodeName: Optional<string>;\n    /**\n     * the type of the first element\n     */\n    readonly type: Optional<string>;\n    /**\n     * The name as changeable value\n     */\n    readonly name: ValueEmbedder<string>;\n    /**\n     * The the value in case of inputs as changeable value\n     */\n    readonly inputValue: ValueEmbedder<string | boolean>;\n    /**\n     * the underlying form elements as domquery object\n     */\n    readonly elements: DomQuery;\n    /**\n     * settable flag for disabled\n     */\n    disabled: boolean;\n    /**\n     * The child nodes of this node collection as readonly attribute\n     */\n    readonly childNodes: DomQuery;\n    /**\n     * an early stream representation for this DomQuery\n     */\n    readonly stream: Stream<DomQuery>;\n    /**\n     * lazy stream representation for this DomQuery\n     */\n    readonly lazyStream: LazyStream<DomQuery>;\n    /**\n     * transform this node collection to an array\n     */\n    readonly asArray: Array<DomQuery>;\n\n    /**\n     * returns true if the elements have the tag *tagName* as tag embedded (highest level)\n     * @param tagName\n     */\n    isTag(tagName: string): boolean;\n\n    /**\n     * returns the nth element as domquery\n     * from the internal elements\n     * note if you try to reach a non existing element position\n     * you will get back an absent entry\n     *\n     * @param index the nth index\n     */\n    get(index: number): DomQuery;\n\n    /**\n     * returns the nth element as optional of an Element object\n     * @param index the number from the index\n     * @param defaults the default value if the index is overrun default Optional.absent\n     */\n    getAsElem(index: number, defaults: Optional<any>): Optional<Element>;\n\n    /**\n     * returns the value array< of all elements\n     */\n    allElems(): Array<Element>;\n\n    /**\n     * absent no values reached?\n     */\n    isAbsent(): boolean;\n\n    /**\n     * should make the code clearer\n     * note if you pass a function\n     * this refers to the active dopmquery object\n     */\n    isPresent(presentRunnable ?: (elem ?: DomQuery) => void): boolean;\n\n    /**\n     * should make the code clearer\n     * note if you pass a function\n     * this refers to the active dopmquery object\n     *\n     *\n     * @param presentRunnable\n     */\n    ifPresentLazy(presentRunnable: (elem ?: DomQuery) => void): DomQuery;\n\n    /**\n     * remove all affected nodes from this query object from the dom tree\n     */\n    delete(): void;\n\n    /**\n     * query selector all on the existing dom query object\n     *\n     * @param selector the standard selector\n     * @return a DomQuery with the results\n     */\n    querySelectorAll(selector): DomQuery;\n\n    /**\n     * core byId method\n     * @param id the id to search for\n     * @param includeRoot also match the root element?\n     */\n    byId(id: string, includeRoot?: boolean): DomQuery;\n\n    /**\n     * same as byId just for the tag name\n     * @param tagName\n     * @param includeRoot\n     */\n    byTagName(tagName: string, includeRoot ?: boolean): DomQuery;\n\n    /**\n     * attr accessor, usage myQuery.attr(\"class\").value = \"bla\"\n     * or let value myQuery.attr(\"class\").value\n     * @param attr the attribute to set\n     * @param defaultValue the default value in case nothing is presented (defaults to null)\n     */\n    attr(attr: string, defaultValue: string): ElementAttribute;\n\n    /**\n     * hasclass, checks for an existing class in the class attributes\n     *\n     * @param clazz the class to search for\n     */\n    hasClass(clazz: string): boolean;\n\n    /**\n     * appends a class string if not already in the element(s)\n     *\n     * @param clazz the style class to append\n     */\n    addClass(clazz: string): DomQuery;\n\n    /**\n     * remove the style class if in the class definitions\n     *\n     * @param clazz\n     */\n    removeClass(clazz: string): DomQuery;\n\n    /**\n     * checks whether we have a multipart element in our children\n     */\n    isMultipartCandidate(): boolean;\n\n    /**\n     * innerHtml equivalkent\n     * equivalent to jqueries html\n     * as setter the html is set and the\n     * DomQuery is given back\n     * as getter the html string is returned\n     *\n     * @param inval\n     */\n    html(inval?: string): DomQuery | Optional<string>;\n\n    /**\n     * dispatch event on all children\n     * just a delegated dispatchevent from the standard\n     * dom working on all queried elements in the monad level\n     *\n     * @param evt the event to be dispatched\n     */\n    dispatchEvent(evt: Event): DomQuery;\n\n    /**\n     * easy node traversal, you can pass\n     * a set of node selectors which are joined as direct childs\n     *\n     * not the rootnodes are not in the getIf, those are always the child nodes\n     *\n     * @param nodeSelector\n     */\n    getIf(...nodeSelector: Array<string>): DomQuery;\n\n    /**\n     * iterate over each element and perform something on the element\n     * (Dom element is passed instead of DomQuery)\n     * @param func\n     */\n    eachElem(func: (item: Element, cnt?: number) => any): DomQuery;\n\n    /**\n     * perform an operation on the first element\n     * returns a DomQuery on the first element only\n     * @param func\n     */\n    firstElem(func: (item: Element, cnt?: number) => any): DomQuery;\n\n    /**\n     * same as eachElem, but a DomQuery object is passed down\n     *\n     * @param func\n     */\n    each(func: (item: DomQuery, cnt?: number) => any): DomQuery;\n\n    /**\n     * returns a new dom query containing only the first element max\n     *\n     * @param func a an optional callback function to perform an operation on the first element\n     */\n    first(func: (item: DomQuery, cnt?: number) => any): DomQuery;\n\n    /**\n     * filter function which filters a subset\n     *\n     * @param func\n     */\n    filter(func: (item: DomQuery) => boolean): DomQuery;\n\n    /**\n     * global eval head appendix method\n     * no other methods are supported anymore\n     * @param code the code to be evaled\n     * @param  nonce optional  nonce key for higher security\n     */\n    globalEval(code: string, nonce ?: string): DomQuery;\n\n    /**\n     * detaches a set of nodes from their parent elements\n     * in a browser independend manner\n     * @param {Object} items the items which need to be detached\n     * @return {Array} an array of nodes with the detached dom nodes\n     */\n    detach(): DomQuery;\n\n    /**\n     * appends the current set of elements\n     * to the element or first element passed via elem\n     * @param elem\n     */\n    appendTo(elem: DomQuery): void;\n\n    /**\n     * loads and evals a script from a source uri\n     *\n     * @param src the source to be loaded and evaled\n     * @param defer in miliseconds execution default (0 == no defer)\n     * @param charSet\n     */\n    loadScriptEval(src: string, defer: number, charSet: string): void;\n\n    /**\n     * insert toInsert after the current element\n     *\n     * @param toInsert an array of DomQuery objects\n     */\n    insertAfter(...toInsert: Array<DomQuery>): DomQuery;\n\n    /**\n     * inserts the elements before the current element\n     *\n     * @param toInsert\n     */\n    insertBefore(...toInsert: Array<DomQuery>): DomQuery;\n\n    /**\n     * in case the domquery is pointing to nothing the else value is taken into consideration\n     * als alternative\n     *\n     * @param elseValue the else value\n     */\n    orElse(...elseValue: any): DomQuery;\n\n    /**\n     * the same with lazy evaluation for cases where getting the else value\n     * is a heavy operation\n     *\n     * @param func the else provider function\n     */\n    orElseLazy(func: () => any): DomQuery;\n\n    /**\n     * all parents with TagName\n     * @param tagName\n     */\n    parents(tagName: string): DomQuery;\n\n    /**\n     * copy all attributes of sourceItem to this DomQuery items\n     *\n     * @param sourceItem the source item to copy over (can be another domquery or a parsed XML Query item)\n     */\n    copyAttrs(sourceItem: DomQuery | XMLQuery): DomQuery;\n\n    /**\n     * outerhtml convenience method\n     * browsers only support innerHTML but\n     * for instance for your jsf.js we have a full\n     * replace pattern which needs outerHTML processing\n     *\n     * @param markup\n     * @param runEmbeddedScripts\n     * @param runEmbeddedCss\n     */\n    outerHTML(markup: string, runEmbeddedScripts ?: boolean, runEmbeddedCss ?: boolean): DomQuery;\n\n    /**\n     * Run through the given nodes in the DomQuery execute the inline scripts\n     * @param whilteListed: optional whitelist function which can filter out script tags which are not processed\n     * defaults to the standard jsf.js exclusion (we use this code for myfaces)\n     */\n    runScripts(whilteListed: (val: string) => boolean): DomQuery;\n\n    /**\n     * runs the embedded css\n     */\n    runCss(): DomQuery;\n\n    /**\n     * fires a click event on the underlying dom elements\n     */\n    click(): DomQuery;\n\n    /**\n     * adds an event listener\n     *\n     * @param type\n     * @param listener\n     * @param options\n     */\n    addEventListener(type: string, listener: (evt: Event) => void, options?: boolean | EventListenerOptions): DomQuery;\n\n    /**\n     * removes an event listener\n     *\n     * @param type\n     * @param listener\n     * @param options\n     */\n    removeEventListener(type: string, listener: (evt: Event) => void, options?: boolean | EventListenerOptions): DomQuery;\n\n    /**\n     * fires an event\n     */\n    fireEvent(eventName: string): void;\n\n    /*\n     * pushes  in optionally a new textContent, and/or returns the current text content\n     */\n    textContent(joinstr?: string): string;\n\n    /*\n     * pushes  in optionally a new innerText, and/or returns the current innerText\n     */\n    innerText(joinstr?: string): string;\n\n    /**\n     * encodes all input elements properly into respective\n     * config entries, this can be used\n     * for legacy systems, for newer usecases, use the\n     * HTML5 Form class which all newer browsers provide\n     *\n     * @param toMerge optional config which can be merged in\n     * @return a copy pf\n     */\n    encodeFormElement(toMerge): Config;\n\n    /**\n     * fetches the subnodes from ... to..\n     * @param from\n     * @param to\n     */\n    subNodes(from: number, to?: number): DomQuery;\n\n\n    /**\n     * attach shadow elements\n     * 1:1 mapping from attach shadow\n     *\n     * @param modeParams\n     */\n    attachShadow(modeParams: { [key: string]: string }): DomQuery\n\n\n    /**\n     * wait until a condition on the dom is reached\n     *\n     * @return a promise on the affected elements where the condition\n     * @throws an error in case of a timeout\n     */\n    waitUntilDom(condition: (element: DomQuery) => boolean, options: WAIT_OPTS): Promise<DomQuery>;\n\n    //observable: Observable<DomQuery>;\n\n    //observableElem: Observable<Element>;\n}\n\n/**\n * Monadic DomNode representation, ala jquery\n * This is a thin wrapper over querySelectorAll\n * to get slim monadic support\n * to reduce implementation code on the users side.\n * This is vital for frameworks which want to rely on\n * plain dom but still do not want to lose\n * the reduced code footprint of querying dom trees and traversing\n * by using functional patterns.\n *\n * Also a few convenience methods are added to reduce\n * the code footprint of standard dom processing\n * operations like eval\n *\n * TODO add jquery fallback support, since it is supported\n * in most older systems\n * Note parts of this code still stem from the Dom.js I have written 10 years\n * ago, those parts look a little bit ancient and will be replaced over time.\n *\n */\nexport class DomQuery implements IDomQuery, IStreamDataSource<DomQuery>, Iterable<DomQuery> {\n\n    static absent = new DomQuery();\n\n    private rootNode: Array<Element> = [];\n\n    pos = -1;\n\n    constructor(...rootNode: Array<Element | ShadowRoot | DomQuery | Document | Array<any> | string>) {\n\n        if (Optional.fromNullable(rootNode).isAbsent() || !rootNode.length ) {\n            return;\n        } else {\n            //we need to flatten out the arrays\n\n            for (let cnt = 0; cnt < rootNode.length; cnt++) {\n                if(!rootNode[cnt]) {\n                    //we skip possible null entries which can happen in\n                    //certain corner conditions due to the constructor re-wrapping single elements into arrays.\n                    continue;\n                } else if (isString(rootNode[cnt])) {\n                    let foundElement = DomQuery.querySelectorAll(<string>rootNode[cnt]);\n                    if (!foundElement.isAbsent()) {\n                        rootNode.push(...foundElement.values)\n                    }\n                } else if (rootNode[cnt] instanceof DomQuery) {\n                    this.rootNode.push(...(<any>rootNode[cnt]).values);\n                } else {\n                    this.rootNode.push(<any>rootNode[cnt]);\n                }\n            }\n        }\n    }\n\n\n\n    /**\n     * returns the first element\n     */\n    get value(): Optional<Element> {\n        return this.getAsElem(0);\n    }\n\n    get values(): Element[] {\n        return this.allElems();\n    }\n\n    /**\n     * returns the id of the first element\n     */\n    get id(): ValueEmbedder<string> {\n        return new ElementAttribute(this.get(0), \"id\");\n    }\n\n    /**\n     * length of the entire query set\n     */\n    get length(): number {\n        return this.rootNode.length\n    }\n\n    /**\n     * convenience method for tagName\n     */\n    get tagName(): Optional<string> {\n        return <Optional<string>>this.getAsElem(0).getIf(\"tagName\");\n    }\n\n    /**\n     * convenience method for nodeName\n     */\n    get nodeName(): Optional<string> {\n        return <Optional<string>>this.getAsElem(0).getIf(\"nodeName\");\n    }\n\n    isTag(tagName: string): boolean {\n        return !this.isAbsent()\n            && (this.nodeName.orElse(\"__none___\")\n                    .value.toLowerCase() == tagName.toLowerCase()\n                || this.tagName.orElse(\"__none___\")\n                    .value.toLowerCase() == tagName.toLowerCase()\n            )\n    }\n\n    /**\n     * convenience property for type\n     *\n     * returns null in case of no type existing otherwise\n     * the type of the first element\n     */\n    get type(): Optional<string> {\n        return this.getAsElem(0).getIf(\"type\");\n    }\n\n    /**\n     * convenience property for name\n     *\n     * returns null in case of no type existing otherwise\n     * the name of the first element\n     */\n    get name(): ValueEmbedder<string> {\n        return new ValueEmbedder(this.getAsElem(0).value, \"name\");\n    }\n\n    /**\n     * convenience property for value\n     *\n     * returns null in case of no type existing otherwise\n     * the value of the first element\n     */\n    get inputValue(): ValueEmbedder<string | boolean> {\n        if (this.getAsElem(0).getIf(\"value\").isPresent()) {\n            return new ValueEmbedder<string>(this.getAsElem(0).value);\n        } else {\n            return <any>ValueEmbedder.absent;\n        }\n    }\n\n    get checked(): boolean {\n        return Stream.of(...this.values).allMatch(el => !!(<any>el).checked);\n    }\n\n    set checked(newChecked: boolean) {\n        this.eachElem(el => (<any>el).checked = newChecked);\n    }\n\n    get elements(): DomQuery {\n        //a simple querySelectorAll should suffice\n        return this.querySelectorAll(\"input, checkbox, select, textarea, fieldset\");\n    }\n\n    get deepElements(): DomQuery {\n        let elemStr = \"input, select, textarea, checkbox, fieldset\";\n        return this.querySelectorAllDeep(elemStr);\n    }\n\n    /**\n     * a deep search which treats the single isolated shadow doms\n     * separately and runs the query on earch shadow dom\n     * @param queryStr\n     */\n    querySelectorAllDeep(queryStr: string): DomQuery {\n        let found: Array<DomQuery> = [];\n        let queryRes = this.querySelectorAll(queryStr);\n        if(queryRes.length) {\n            found.push(queryRes);\n        }\n        let shadowRoots = this.querySelectorAll(\"*\").shadowRoot;\n        if(shadowRoots.length) {\n            let shadowRes = shadowRoots.querySelectorAllDeep(queryStr);\n            if(shadowRes.length) {\n                found.push(shadowRes);\n            }\n        }\n        return new DomQuery(...found);\n    }\n\n\n\n    /**\n     * todo align this api with the rest of the apis\n     */\n    get disabled(): boolean {\n        return this.attr(\"disabled\").isPresent();\n    }\n\n    set disabled(disabled: boolean) {\n        // this.attr(\"disabled\").value = disabled + \"\";\n        if (!disabled) {\n            this.removeAttribute(\"disabled\");\n        } else {\n            this.attr(\"disabled\").value = \"disabled\";\n        }\n\n    }\n\n    removeAttribute(name: string) {\n        this.eachElem(item => item.removeAttribute(name));\n    }\n\n    get childNodes(): DomQuery {\n        let childNodeArr: Array<Element> = [];\n        this.eachElem((item: Element) => {\n            childNodeArr = childNodeArr.concat(objToArray(item.childNodes));\n        });\n        return new DomQuery(...childNodeArr);\n    }\n\n    /**\n     * binding into stream\n     */\n    get stream(): Stream<DomQuery> {\n        return new Stream<DomQuery>(...this.asArray);\n    }\n\n    /**\n     * fetches a lazy stream representation\n     * lazy should be applied if you have some filters etc\n     * in between, this can reduce the number of post filter operations\n     * and ram usage\n     * significantly because the operations are done lazily and stop\n     * once they hit a dead end.\n     */\n    get lazyStream(): LazyStream<DomQuery> {\n        return LazyStream.of(...this.asArray);\n    }\n\n    get asArray(): Array<DomQuery> {\n        //filter not supported by IE11\n        return [].concat(LazyStream.of(...this.rootNode).filter(item => item != null)\n            .map(item => DomQuery.byId(item)).collect(new ArrayCollector()));\n    }\n\n    get asNodeArray(): Array<DomQuery> {\n        return [].concat(Stream.of(this.rootNode).filter(item => item != null).collect(new ArrayCollector()));\n    }\n\n\n    static querySelectorAllDeep(selector: string) {\n        return new DomQuery(document).querySelectorAllDeep(selector);\n    }\n    /**\n     * easy query selector all producer\n     *\n     * @param selector the selector\n     * @returns a results dom query object\n     */\n    static querySelectorAll(selector: string): DomQuery {\n        if (selector.indexOf(\"/shadow/\") != -1) {\n            return new DomQuery(document)._querySelectorAllDeep(selector);\n        } else {\n            return new DomQuery(document)._querySelectorAll(selector);\n        }\n    }\n\n    /**\n     * byId producer\n     *\n     * @param selector id\n     * @return a DomQuery containing the found elements\n     */\n    static byId(selector: string | DomQuery | Element, deep = false): DomQuery {\n        if (isString(selector)) {\n            return (!deep) ? new DomQuery(document).byId(<string>selector) : new DomQuery(document).byIdDeep(<string>selector);\n        } else {\n            return new DomQuery(<any>selector);\n        }\n    }\n\n    /**\n     * byTagName producer\n     *\n     * @param selector name\n     * @return a DomQuery containing the found elements\n     */\n    static byTagName(selector: string | DomQuery | Element): DomQuery {\n        if (isString(selector)) {\n            return new DomQuery(document).byTagName(<string>selector);\n        } else {\n            return new DomQuery(<any>selector);\n        }\n    }\n\n    static globalEval(code: string, nonce?: string): DomQuery {\n        return new DomQuery(document).globalEval(code, nonce);\n    }\n\n    /**\n     * builds the ie nodes properly in a placeholder\n     * and bypasses a non script insert bug that way\n     * @param markup the marku code\n     */\n    static fromMarkup(markup: string): DomQuery {\n\n        //https://developer.mozilla.org/de/docs/Web/API/DOMParser license creative commons\n        const doc = document.implementation.createHTMLDocument(\"\");\n        markup = trim(markup);\n        let lowerMarkup = markup.toLowerCase();\n        if (lowerMarkup.indexOf('<!doctype') != -1 ||\n            lowerMarkup.indexOf('<html') != -1 ||\n            lowerMarkup.indexOf('<head') != -1 || //TODO proper regexps here to avoid embedded tags with same element names to be triggered\n            lowerMarkup.indexOf('<body') != -1) {\n            doc.documentElement.innerHTML = markup;\n            return new DomQuery(doc.documentElement);\n        } else {\n            let startsWithTag = function (str: string, tagName: string) {\n                let tag1 = [\"<\", tagName, \">\"].join(\"\");\n                let tag2 = [\"<\", tagName, \" \"].join(\"\");\n                return (str.indexOf(tag1) == 0) || (str.indexOf(tag2) == 0);\n            };\n\n            let dummyPlaceHolder = new DomQuery(document.createElement(\"div\"));\n\n            //table needs special treatment due to the browsers auto creation\n            if (startsWithTag(lowerMarkup, \"thead\") || startsWithTag(lowerMarkup, \"tbody\")) {\n                dummyPlaceHolder.html(`<table>${markup}</table>`);\n                return dummyPlaceHolder.querySelectorAll(\"table\").get(0).childNodes.detach();\n            } else if (startsWithTag(lowerMarkup, \"tfoot\")) {\n                dummyPlaceHolder.html(`<table><thead></thead><tbody><tbody${markup}</table>`);\n                return dummyPlaceHolder.querySelectorAll(\"table\").get(2).childNodes.detach();\n            } else if (startsWithTag(lowerMarkup, \"tr\")) {\n                dummyPlaceHolder.html(`<table><tbody>${markup}</tbody></table>`);\n                return dummyPlaceHolder.querySelectorAll(\"tbody\").get(0).childNodes.detach();\n            } else if (startsWithTag(lowerMarkup, \"td\")) {\n                dummyPlaceHolder.html(`<table><tbody><tr>${markup}</tr></tbody></table>`);\n                return dummyPlaceHolder.querySelectorAll(\"tr\").get(0).childNodes.detach();\n            }\n\n            dummyPlaceHolder.html(markup);\n            return dummyPlaceHolder.childNodes.detach();\n        }\n\n    }\n\n    /**\n     * returns the nth element as domquery\n     * from the internal elements\n     * note if you try to reach a non existing element position\n     * you will get back an absent entry\n     *\n     * @param index the nth index\n     */\n    get(index: number): DomQuery {\n        return (index < this.rootNode.length) ? new DomQuery(this.rootNode[index]) : DomQuery.absent;\n    }\n\n\n\n    /**\n     * returns the nth element as optional of an Element object\n     * @param index the number from the index\n     * @param defaults the default value if the index is overrun default Optional.absent\n     */\n    getAsElem(index: number, defaults: Optional<any> = Optional.absent): Optional<Element> {\n        return (index < this.rootNode.length) ? Optional.fromNullable(this.rootNode[index]) : defaults;\n    }\n\n    /**\n     * returns the files from a given elmement\n     * @param index\n     */\n    filesFromElem(index: number): Array<any> {\n        return (index < this.rootNode.length) ? (<any>this.rootNode[index])?.files ?  (<any>this.rootNode[index]).files : [] : [];\n    }\n\n    /**\n     * returns the value array< of all elements\n     */\n    allElems(): Array<Element> {\n        return this.rootNode;\n    }\n\n    /**\n     * absent no values reached?\n     */\n    isAbsent(): boolean {\n        return this.length == 0;\n    }\n\n    /**\n     * should make the code clearer\n     * note if you pass a function\n     * this refers to the active dopmquery object\n     */\n    isPresent(presentRunnable ?: (elem ?: DomQuery) => void): boolean {\n        let absent = this.isAbsent();\n        if (!absent && presentRunnable) {\n            presentRunnable.call(this, this)\n        }\n        return !absent;\n    }\n\n    /**\n     * should make the code clearer\n     * note if you pass a function\n     * this refers to the active dopmquery object\n     *\n     *\n     * @param presentRunnable\n     */\n    ifPresentLazy(presentRunnable: (elem ?: DomQuery) => void = function () {\n    }): DomQuery {\n        this.isPresent.call(this, presentRunnable);\n        return this;\n    }\n\n    /**\n     * remove all affected nodes from this query object from the dom tree\n     */\n    delete() {\n        this.eachElem((node: Element) => {\n            if (node.parentNode) {\n                node.parentNode.removeChild(node);\n            }\n        });\n    }\n\n    querySelectorAll(selector): DomQuery {\n        //We could merge both methods, but for now this is more readable\n        if (selector.indexOf(\"/shadow/\") != -1) {\n            return this._querySelectorAllDeep(selector);\n        } else {\n            return this._querySelectorAll(selector);\n        }\n    }\n\n    /**\n     * query selector all on the existing dom queryX object\n     *\n     * @param selector the standard selector\n     * @return a DomQuery with the results\n     */\n    private _querySelectorAll(selector): DomQuery {\n        if (!this?.rootNode?.length) {\n            return this;\n        }\n        let nodes = [];\n        for (let cnt = 0; cnt < this.rootNode.length; cnt++) {\n            if (!this.rootNode[cnt]?.querySelectorAll) {\n                continue;\n            }\n            let res = this.rootNode[cnt].querySelectorAll(selector);\n            nodes = nodes.concat(objToArray(res));\n        }\n\n        return new DomQuery(...nodes);\n    }\n\n\n    /*deep with a selector and a peudo /shadow/ marker to break into the next level*/\n    private _querySelectorAllDeep(selector): DomQuery {\n        if (!this?.rootNode?.length) {\n            return this;\n        }\n\n        let nodes = [];\n        let foundNodes: DomQuery = new DomQuery(...this.rootNode);\n        let selectors = selector.split(/\\/shadow\\//);\n\n        for (let cnt2 = 0; cnt2 < selectors.length; cnt2++) {\n            if (selectors[cnt2] == \"\") {\n                continue;\n            }\n            let levelSelector = selectors[cnt2];\n            foundNodes = foundNodes.querySelectorAll(levelSelector);\n            if (cnt2 < selectors.length - 1) {\n                foundNodes = foundNodes.shadowRoot;\n            }\n        }\n\n        return foundNodes;\n    }\n\n    /**\n     * core byId method\n     * @param id the id to search for\n     * @param includeRoot also match the root element?\n     */\n    byId(id: string, includeRoot?: boolean): DomQuery {\n        let res: Array<DomQuery> = [];\n        if (includeRoot) {\n            res = res.concat(\n                LazyStream.of(...(this?.rootNode || []))\n                    .filter(item => id == item.id)\n                    .map(item => new DomQuery(item))\n                    .collect(new ArrayCollector())\n            );\n        }\n\n        //for some strange kind of reason the # selector fails\n        //on hidden elements we use the attributes match selector\n        //that works\n        res = res.concat(this.querySelectorAll(`[id=\"${id}\"]`));\n        return new DomQuery(...res);\n    }\n\n\n    byIdDeep(id: string, includeRoot?: boolean): DomQuery {\n        let res: Array<DomQuery> = [];\n        if (includeRoot) {\n            res = res.concat(\n                LazyStream.of(...(this?.rootNode || []))\n                    .filter(item => id == item.id)\n                    .map(item => new DomQuery(item))\n                    .collect(new ArrayCollector())\n            );\n        }\n\n        let subItems = this.querySelectorAllDeep(`[id=\"${id}\"]`);\n        if(subItems.length) {\n            res.push(subItems);\n        }\n\n        return new DomQuery(...res);\n    }\n\n    /**\n     * same as byId just for the tag name\n     * @param tagName\n     * @param includeRoot\n     */\n    byTagName(tagName: string, includeRoot ?: boolean, deep ?: boolean): DomQuery {\n        let res: Array<Element | DomQuery> = [];\n        if (includeRoot) {\n            res = <any> LazyStream.of(...(this?.rootNode ?? []))\n                .filter(element => element?.tagName == tagName)\n                .reduce<Array<Element | DomQuery>>((reduction: any, item: Element) => reduction.concat([item]), res)\n                .orElse(res).value;\n        }\n\n        (deep) ? res.push(this.querySelectorAllDeep(tagName)) : res.push(this.querySelectorAll(tagName));\n        return new DomQuery(...res);\n    }\n\n    /**\n     * attr accessor, usage myQuery.attr(\"class\").value = \"bla\"\n     * or let value myQuery.attr(\"class\").value\n     * @param attr the attribute to set\n     * @param defaultValue the default value in case nothing is presented (defaults to null)\n     */\n    attr(attr: string, defaultValue: string = null): ElementAttribute {\n        return new ElementAttribute(this, attr, defaultValue);\n    }\n\n    /**\n     * hasclass, checks for an existing class in the class attributes\n     *\n     * @param clazz the class to search for\n     */\n    hasClass(clazz: string) {\n        let hasIt = false;\n        this.eachElem(node => {\n            hasIt = node.classList.contains(clazz);\n            if (hasIt) {\n                return false;\n            }\n        });\n        return hasIt;\n    }\n\n    /**\n     * appends a class string if not already in the element(s)\n     *\n     * @param clazz the style class to append\n     */\n    addClass(clazz: string): DomQuery {\n        this.eachElem(item => item.classList.add(clazz))\n        return this;\n    }\n\n    /**\n     * remove the style class if in the class definitions\n     *\n     * @param clazz\n     */\n    removeClass(clazz: string): DomQuery {\n        this.eachElem(item => item.classList.remove(clazz));\n        return this;\n    }\n\n    /**\n     * checks whether we have a multipart element in our children\n     * or are one\n     */\n    isMultipartCandidate(deep = false): boolean {\n        let isCandidate = (item: DomQuery): boolean => {\n            if(item.length == 0) {\n                return false;\n            }\n            if(item.length == 1) {\n                if ((<string>item.tagName.get(\"booga\").value).toLowerCase() == \"input\" &&\n                    (<string>item.attr(\"type\")?.value || \"\").toLowerCase() == \"file\") {\n                    return true;\n                }\n                if (deep) {\n                    return this.querySelectorAllDeep(\"input[type='file']\").firstElem().isPresent();\n                } else {\n                    return this.querySelectorAll(\"input[type='file']\").firstElem().isPresent();\n                }\n            }\n            return item.isMultipartCandidate(deep);\n        };\n        let ret = this.stream.filter(item => isCandidate(item)).first().isPresent();\n\n        return ret;\n    }\n\n\n\n    /**\n     * innerHtml equivalkent\n     * equivalent to jqueries html\n     * as setter the html is set and the\n     * DomQuery is given back\n     * as getter the html string is returned\n     *\n     * @param inval\n     */\n    html(inval?: string): DomQuery | Optional<string> {\n        if (Optional.fromNullable(inval).isAbsent()) {\n            return this.isPresent() ? Optional.fromNullable(this.innerHtml) : Optional.absent;\n        }\n        this.innerHtml = inval;\n\n        return this;\n    }\n\n    /**\n     * Standard dispatch event method, delegated from node\n     */\n    dispatchEvent(evt: Event): DomQuery {\n        this.eachElem(elem => elem.dispatchEvent(evt));\n        return this;\n    }\n\n    set innerHtml(inVal: string) {\n        this.eachElem(elem => elem.innerHTML = inVal);\n    }\n\n    get innerHtml(): string {\n        let retArr = [];\n        this.eachElem(elem => retArr.push(elem.innerHTML));\n        return retArr.join(\"\");\n    }\n\n    //source: https://developer.mozilla.org/en-US/docs/Web/API/Element/matches\n    //code snippet license: https://creativecommons.org/licenses/by-sa/2.5/\n    private _mozMatchesSelector(toMatch: Element, selector: string): boolean {\n        let prot: { [key: string]: Function } = (<any>toMatch);\n        let matchesSelector: Function = prot.matchesSelector ||\n            prot.mozMatchesSelector ||\n            prot.msMatchesSelector ||\n            prot.oMatchesSelector ||\n            prot.webkitMatchesSelector ||\n            function (s: string) {\n                let matches: NodeListOf<HTMLElement> = (document || (<any>window).ownerDocument).querySelectorAll(s),\n                    i = matches.length;\n                while (--i >= 0 && matches.item(i) !== toMatch) {\n                }\n                return i > -1;\n            };\n        return matchesSelector.call(toMatch, selector);\n    }\n\n    /**\n     * filters the current dom query elements\n     * upon a given selector\n     *\n     * @param selector\n     */\n    filterSelector(selector: string): DomQuery {\n        let matched = [];\n\n        this.eachElem(item => {\n            if (this._mozMatchesSelector(item, selector)) {\n                matched.push(item)\n            }\n        });\n        return new DomQuery(...matched);\n    }\n\n    matchesSelector(selector: string): boolean {\n        this.eachElem(item => {\n            if (!this._mozMatchesSelector(item, selector)) {\n                return false;\n            }\n        });\n        return true;\n    }\n\n    /**\n     * easy node traversal, you can pass\n     * a set of node selectors which are joined as direct childs\n     *\n     * not the rootnodes are not in the getIf, those are always the child nodes\n     *\n     * @param nodeSelector\n     */\n    getIf(...nodeSelector: Array<string>): DomQuery {\n\n        let selectorStage: DomQuery = this.childNodes;\n        for (let cnt = 0; cnt < nodeSelector.length; cnt++) {\n            selectorStage = selectorStage.filterSelector(nodeSelector[cnt]);\n            if (selectorStage.isAbsent()) {\n                return selectorStage;\n            }\n        }\n        return selectorStage;\n    }\n\n    eachElem(func: (item: Element, cnt?: number) => any): DomQuery {\n\n        for (let cnt = 0, len = this.rootNode.length; cnt < len; cnt++) {\n            if (func(this.rootNode[cnt], cnt) === false) {\n                break;\n            }\n        }\n        return this;\n    }\n\n    firstElem(func: (item: Element, cnt?: number) => any = item => item): DomQuery {\n        if (this.rootNode.length > 1) {\n            func(this.rootNode[0], 0);\n        }\n        return this;\n    }\n\n    each(func: (item: DomQuery, cnt?: number) => any): DomQuery {\n        Stream.of(...this.rootNode)\n            .each((item, cnt) => {\n                //we could use a filter, but for the best performance we dont\n                if (item == null) {\n                    return;\n                }\n                return func(DomQuery.byId(item), cnt);\n            });\n\n        return this;\n    }\n\n    /**\n     * returns a new dom query containing only the first element max\n     *\n     * @param func a an optional callback function to perform an operation on the first element\n     */\n    first(func: (item: DomQuery, cnt?: number) => any = (item) => item): DomQuery {\n        if (this.rootNode.length >= 1) {\n            func(this.get(0), 0);\n            return this.get(0);\n        }\n        return this;\n    }\n\n    /**\n     * filter function which filters a subset\n     *\n     * @param func\n     */\n    filter(func: (item: DomQuery) => boolean): DomQuery {\n        let reArr: Array<DomQuery> = [];\n        this.each((item: DomQuery) => {\n            func(item) ? reArr.push(item) : null;\n        });\n        return new DomQuery(...<any>reArr);\n    }\n\n    //TODO append prepend\n\n    /**\n     * global eval head appendix method\n     * no other methods are supported anymore\n     * @param code the code to be evaled\n     * @param  nonce optional  nonce key for higher security\n     */\n    globalEval(code: string, nonce ?: string): DomQuery {\n        let head = document.getElementsByTagName(\"head\")[0] || document.documentElement;\n        let script = document.createElement(\"script\");\n        if (nonce) {\n            script.setAttribute(\"nonce\", nonce);\n        }\n        script.type = \"text/javascript\";\n        script.innerHTML = code;\n        let newScriptElement = head.appendChild(script);\n        head.removeChild(newScriptElement);\n        return this;\n    }\n\n    /**\n     * detaches a set of nodes from their parent elements\n     * in a browser independend manner\n     * @param {Object} items the items which need to be detached\n     * @return {Array} an array of nodes with the detached dom nodes\n     */\n    detach(): DomQuery {\n        this.eachElem((item: Element) => {\n            item.parentNode.removeChild(item);\n        });\n        return this;\n    }\n\n    /**\n     * appends the current set of elements\n     * to the element or first element passed via elem\n     * @param elem\n     */\n    appendTo(elem: DomQuery) {\n        this.eachElem((item) => {\n            let value1: Element = <Element>elem.getAsElem(0).orElseLazy(() => {\n                return {\n                    appendChild: (theItem: any) => {\n                    }\n                }\n            }).value;\n            value1.appendChild(item);\n        });\n    }\n\n    /**\n     * loads and evals a script from a source uri\n     *\n     * @param src the source to be loaded and evaled\n     * @param defer in miliseconds execution default (0 == no defer)\n     * @param charSet\n     */\n    loadScriptEval(src: string, defer: number = 0, charSet: string = \"utf-8\") {\n        let xhr = new XMLHttpRequest();\n        xhr.open(\"GET\", src, false);\n\n        if (charSet) {\n            xhr.setRequestHeader(\"Content-Type\", \"application/x-javascript; charset:\" + charSet);\n        }\n\n        xhr.send(null);\n\n        xhr.onload = (responseData: any) => {\n            //defer also means we have to process after the ajax response\n            //has been processed\n            //we can achieve that with a small timeout, the timeout\n            //triggers after the processing is done!\n            if (!defer) {\n                this.globalEval(xhr.responseText.replace(/\\n/g, \"\\r\\n\") + \"\\r\\n//@ sourceURL=\" + src);\n            } else {\n                //TODO not ideal we maybe ought to move to something else here\n                //but since it is not in use yet, it is ok\n                setTimeout(() => {\n                    this.globalEval(xhr.responseText + \"\\r\\n//@ sourceURL=\" + src);\n                }, defer);\n            }\n        };\n\n        xhr.onerror = (data: any) => {\n            throw Error(data);\n        };\n        //since we are synchronous we do it after not with onReadyStateChange\n\n        return this;\n    }\n\n    insertAfter(...toInsertParams: Array<DomQuery>): DomQuery {\n\n        this.each(existingItem => {\n            let existingElement = existingItem.getAsElem(0).value;\n            let rootNode = existingElement.parentNode;\n            for (let cnt = 0; cnt < toInsertParams.length; cnt++) {\n                let nextSibling: Element = <any>existingElement.nextSibling;\n                toInsertParams[cnt].eachElem(insertElem => {\n                    if (nextSibling) {\n                        rootNode.insertBefore(insertElem, nextSibling);\n                        existingElement = nextSibling;\n                    } else {\n                        rootNode.appendChild(insertElem);\n                    }\n                });\n\n            }\n        });\n\n        let res = [];\n        res.push(this);\n        res = res.concat(toInsertParams);\n        return new DomQuery(...res);\n    }\n\n    insertBefore(...toInsertParams: Array<DomQuery>): DomQuery {\n        this.each(existingItem => {\n            let existingElement = existingItem.getAsElem(0).value;\n            let rootNode = existingElement.parentNode;\n            for (let cnt = 0; cnt < toInsertParams.length; cnt++) {\n                toInsertParams[cnt].eachElem(insertElem => {\n                    rootNode.insertBefore(insertElem, existingElement);\n                });\n            }\n        });\n        let res = [];\n        res.push(this);\n        res = res.concat(toInsertParams);\n        return new DomQuery(...res);\n    }\n\n    orElse(...elseValue: any): DomQuery {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            return new DomQuery(...elseValue);\n        }\n    }\n\n    orElseLazy(func: () => any): DomQuery {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            return new DomQuery(func());\n        }\n    }\n\n    parents(tagName: string): DomQuery {\n        const retSet: Set<Element> = new Set();\n        const retArr: Array<Element> = [];\n        const lowerTagName = tagName.toLowerCase();\n\n        let resolveItem = (item: Element) => {\n            if ((item.tagName || \"\").toLowerCase() == lowerTagName && !retSet.has(item)) {\n                retSet.add(item);\n                retArr.push(item);\n            }\n        };\n\n        this.eachElem((item: Element) => {\n            while (item.parentNode || (<any> item).host) {\n                item = <Element>item?.parentNode ?? (<any>item)?.host;\n\n                resolveItem(item);\n                //nested forms not possible, performance shortcut\n                if (tagName == \"form\" && retArr.length) {\n                    return false;\n                }\n            }\n        });\n\n        return new DomQuery(...retArr);\n    }\n\n    copyAttrs(sourceItem: DomQuery | XMLQuery): DomQuery {\n        sourceItem.eachElem((sourceNode: Element) => {\n            let attrs: Array<Attr> = objToArray(sourceNode.attributes);\n            for (let item of attrs) {\n                let value: string = item.value;\n                let name: string = item.name;\n\n                switch (name) {\n                    case \"id\":\n                        this.id.value = value;\n                        break;\n                    case \"disabled\":\n                        this.resolveAttributeHolder(\"disabled\").disabled = value;\n                        break;\n                    case \"checked\":\n                        this.resolveAttributeHolder(\"checked\").checked = value;\n                        break;\n                    default:\n                        this.attr(name).value = value;\n                }\n            }\n        });\n        return this;\n    }\n\n    /**\n     * resolves an attribute holder compared\n     * @param attrName the attribute name\n     */\n    private resolveAttributeHolder(attrName: string = \"value\"): HTMLFormElement | any {\n        let ret = [];\n        ret[attrName] = null;\n        return (attrName in this.getAsElem(0).value) ?\n            this.getAsElem(0).value :\n            ret;\n    }\n\n    /**\n     * outerhtml convenience method\n     * browsers only support innerHTML but\n     * for instance for your jsf.js we have a full\n     * replace pattern which needs outerHTML processing\n     *\n     * @param markup\n     * @param runEmbeddedScripts\n     * @param runEmbeddedCss\n     */\n    outerHTML(markup: string, runEmbeddedScripts ?: boolean, runEmbeddedCss ?: boolean, deep = false): DomQuery {\n        if (this.isAbsent()) {\n            return;\n        }\n\n        let focusElementId = document?.activeElement?.id;\n        let caretPosition = (focusElementId) ? DomQuery.getCaretPosition(document.activeElement) : null;\n        let nodes = DomQuery.fromMarkup(markup);\n        let res = [];\n        let toReplace = this.getAsElem(0).value;\n        let firstInsert = nodes.get(0);\n        let parentNode = toReplace.parentNode;\n        let replaced = firstInsert.getAsElem(0).value;\n        parentNode.replaceChild(replaced, toReplace);\n        res.push(new DomQuery(replaced));\n        //no replacement possible\n        if (this.isAbsent()) {\n            return this;\n        }\n\n        let insertAdditionalItems = [];\n\n        if (nodes.length > 1) {\n            insertAdditionalItems = insertAdditionalItems.concat(...nodes.values.slice(1));\n            res.push(DomQuery.byId(replaced).insertAfter(new DomQuery(...insertAdditionalItems)));\n        }\n\n        if (runEmbeddedScripts) {\n            this.runScripts();\n        }\n        if (runEmbeddedCss) {\n            this.runCss();\n        }\n\n        let focusElement = DomQuery.byId(focusElementId);\n        if (focusElementId && focusElement.isPresent() &&\n            caretPosition != null && \"undefined\" != typeof caretPosition) {\n            focusElement.eachElem(item => DomQuery.setCaretPosition(item, caretPosition));\n        }\n\n        return nodes;\n    }\n\n    /**\n     * Run through the given nodes in the DomQuery execute the inline scripts\n     * @param whilteListed: optional whitelist function which can filter out script tags which are not processed\n     * defaults to the standard jsf.js exclusion (we use this code for myfaces)\n     */\n    runScripts(whilteListed: (val: string) => boolean = DEFAULT_WHITELIST): DomQuery {\n        let finalScripts = [],\n            equi = equalsIgnoreCase,\n            execScrpt = (item) => {\n                let tagName = item.tagName;\n                let itemType = item.type || \"\";\n                if (tagName && equi(tagName, \"script\") &&\n                    (itemType === \"\" || equi(itemType, \"text/javascript\") ||\n                        equi(itemType, \"javascript\") ||\n                        equi(itemType, \"text/ecmascript\") ||\n                        equi(itemType, \"ecmascript\"))) {\n                    let src = item.getAttribute('src');\n                    if ('undefined' != typeof src\n                        && null != src\n                        && src.length > 0\n                    ) {\n                        //we have to move this into an inner if because chrome otherwise chokes\n                        //due to changing the and order instead of relying on left to right\n                        //if jsf.js is already registered we do not replace it anymore\n                        if (whilteListed(src)) {\n                            if (finalScripts.length) {\n                                //script source means we have to eval the existing\n                                //scripts before running the include\n                                this.globalEval(finalScripts.join(\"\\n\"));\n\n                                finalScripts = [];\n                            }\n                            this.loadScriptEval(src, 0, \"UTF-8\");\n                        }\n\n                    } else {\n                        // embedded script auto eval\n                        //TODO this probably needs to be changed due to our new parsing structures\n                        //probably not needed anymore\n                        let evalText = trim(item.text || item.innerText || item.innerHTML);\n                        let go = true;\n\n                        while (go) {\n                            go = false;\n                            if (evalText.substring(0, 4) == \"<!--\") {\n                                evalText = evalText.substring(4);\n                                go = true;\n                            }\n                            if (evalText.substring(0, 4) == \"//<!--\") {\n                                evalText = evalText.substring(6);\n                                go = true;\n                            }\n                            if (evalText.substring(0, 11) == \"//<![CDATA[\") {\n                                evalText = evalText.substring(11);\n                                go = true;\n                            }\n                        }\n                        // we have to run the script under a global context\n                        //we store the script for less calls to eval\n                        finalScripts.push(evalText);\n                    }\n                }\n            };\n        try {\n            let scriptElements = new DomQuery(this.filterSelector(\"script\"), this.querySelectorAll(\"script\"));\n            //script execution order by relative pos in their dom tree\n            scriptElements.stream\n                .flatMap(item => Stream.of(item.values))\n                .sort((node1, node2) => node1.compareDocumentPosition(node2) - 3) //preceding 2, following == 4)\n                .each(item => execScrpt(item));\n\n            if (finalScripts.length) {\n                this.globalEval(finalScripts.join(\"\\n\"));\n            }\n        } catch (e) {\n            if (window.console && window.console.error) {\n                //not sure if we\n                //should use our standard\n                //error mechanisms here\n                //because in the head appendix\n                //method only a console\n                //error would be raised as well\n                console.error(e.message || e.description);\n            }\n        } finally {\n            //the usual ie6 fix code\n            //the IE6 garbage collector is broken\n            //nulling closures helps somewhat to reduce\n            //mem leaks, which are impossible to avoid\n            //at this browser\n            execScrpt = null;\n        }\n        return this;\n    }\n\n    runCss(): DomQuery {\n\n        const applyStyle = (item: Element, style: string) => {\n                let newSS: HTMLStyleElement = document.createElement(\"style\");\n                document.getElementsByTagName(\"head\")[0].appendChild(newSS);\n\n                let styleSheet = newSS.sheet ?? (<any>newSS).styleSheet;\n\n                newSS.setAttribute(\"rel\", item.getAttribute(\"rel\") ?? \"stylesheet\");\n                newSS.setAttribute(\"type\", item.getAttribute(\"type\") ?? \"text/css\");\n\n                if (styleSheet?.cssText ?? false) {\n                    styleSheet.cssText = style;\n                } else {\n                    newSS.appendChild(document.createTextNode(style));\n                }\n            },\n\n            execCss = (item: Element) => {\n                const tagName = item.tagName;\n                if (tagName && equalsIgnoreCase(tagName, \"link\") && equalsIgnoreCase(item.getAttribute(\"type\"), \"text/css\")) {\n                    applyStyle(item, \"@import url('\" + item.getAttribute(\"href\") + \"');\");\n                } else if (tagName && equalsIgnoreCase(tagName, \"style\") && equalsIgnoreCase(item.getAttribute(\"type\"), \"text/css\")) {\n                    let innerText = [];\n                    //compliant browsers know child nodes\n                    let childNodes: Array<Node> = Array.prototype.slice.call(item.childNodes);\n                    if (childNodes) {\n                        childNodes.forEach(child => innerText.push((<Element>child).innerHTML || (<CharacterData>child).data));\n                        //non compliant ones innerHTML\n                    } else if (item.innerHTML) {\n                        innerText.push(item.innerHTML);\n                    }\n\n                    applyStyle(item, innerText.join(\"\"));\n                }\n            };\n\n        const scriptElements: DomQuery = new DomQuery(this.filterSelector(\"link, style\"), this.querySelectorAll(\"link, style\"));\n\n        scriptElements.stream\n            .flatMap(item => Stream.of(item.values))\n            .sort((node1, node2) => node1.compareDocumentPosition(node2) - 3)\n            .each(item => execCss(item));\n\n        return this;\n    }\n\n    /**\n     * fires a click event on the underlying dom elements\n     */\n    click(): DomQuery {\n        this.fireEvent(\"click\");\n        return this;\n    }\n\n    addEventListener(type: string, listener: (evt: Event) => void, options?: boolean | EventListenerOptions): DomQuery {\n        this.eachElem((node: Element) => node.addEventListener(type, listener, options));\n        return this;\n    }\n\n    removeEventListener(type: string, listener: (evt: Event) => void, options?: boolean | EventListenerOptions): DomQuery {\n        this.eachElem((node: Element) => node.removeEventListener(type, listener, options));\n        return this;\n    }\n\n    /**\n     * fires an event\n     */\n    fireEvent(eventName: string) {\n        this.eachElem((node: Element) => {\n            let doc;\n            if (node.ownerDocument) {\n                doc = node.ownerDocument;\n            } else if (node.nodeType == 9) {\n                // the node may be the document itself, nodeType 9 = DOCUMENT_NODE\n                doc = node;\n            } else {\n                throw new Error(\"Invalid node passed to fireEvent: \" + node.id);\n            }\n\n            if (node.dispatchEvent) {\n                // Gecko-style approach (now the standard) takes more work\n                let eventClass = \"\";\n\n                // Different events have different event classes.\n                // If this switch statement can't map an eventName to an eventClass,\n                // the event firing is going to fail.\n                switch (eventName) {\n                    case \"click\": // Dispatching of 'click' appears to not work correctly in Safari. Use 'mousedown' or 'mouseup' instead.\n                    case \"mousedown\":\n                    case \"mouseup\":\n                        eventClass = \"MouseEvents\";\n                        break;\n\n                    case \"focus\":\n                    case \"change\":\n                    case \"blur\":\n                    case \"select\":\n                        eventClass = \"HTMLEvents\";\n                        break;\n\n                    default:\n                        throw \"fireEvent: Couldn't find an event class for event '\" + eventName + \"'.\";\n                        break;\n                }\n                let event = doc.createEvent(eventClass);\n                event.initEvent(eventName, true, true); // All events created as bubbling and cancelable.\n\n                event.synthetic = true; // allow detection of synthetic events\n                // The second parameter says go ahead with the default action\n                node.dispatchEvent(event);\n            } else if ((<any>node).fireEvent) {\n                // IE-old school style, you can drop this if you don't need to support IE8 and lower\n                let event = doc.createEventObject();\n                event.synthetic = true; // allow detection of synthetic events\n                (<any>node).fireEvent(\"on\" + eventName, event);\n            }\n        })\n    }\n\n    textContent(joinstr: string = \"\"): string {\n        return this.stream\n            .map((value: DomQuery) => {\n                let item = value.getAsElem(0).orElseLazy(() => {\n                    return <any>{\n                        textContent: \"\"\n                    };\n                }).value;\n                return (<any>item).textContent || \"\";\n            })\n            .reduce((text1, text2) => text1 + joinstr + text2, \"\").value;\n    }\n\n    innerText(joinstr: string = \"\"): string {\n        return this.stream\n            .map((value: DomQuery) => {\n                let item = value.getAsElem(0).orElseLazy(() => {\n                    return <any>{\n                        innerText: \"\"\n                    };\n                }).value;\n                return (<any>item).innerText || \"\";\n            })\n            .reduce((text1, text2) => [text1, text2].join(joinstr), \"\").value;\n\n    }\n\n    /**\n     * encodes all input elements properly into respective\n     * config entries, this can be used\n     * for legacy systems, for newer usecases, use the\n     * HTML5 Form class which all newer browsers provide\n     *\n     * @param toMerge optional config which can be merged in\n     * @return a copy pf\n     */\n    encodeFormElement(toMerge = new Config({})): Config {\n\n        //browser behavior no element name no encoding (normal submit fails in that case)\n        //https://issues.apache.org/jira/browse/MYFACES-2847\n        if (this.name.isAbsent()) {\n            return;\n        }\n\n        //lets keep it sideffects free\n        let target = toMerge.shallowCopy;\n\n        this.each((element: DomQuery) => {\n            if (element.name.isAbsent()) {//no name, no encoding\n                return;\n            }\n            let name = element.name.value;\n            let tagName = element.tagName.orElse(\"__none__\").value.toLowerCase();\n            let elemType = element.type.orElse(\"__none__\").value.toLowerCase();\n\n            elemType = elemType.toLowerCase();\n\n            // routine for all elements\n            // rules:\n            // - process only inputs, textareas and selects\n            // - elements muest have attribute \"name\"\n            // - elements must not be disabled\n            if (((tagName == \"input\" || tagName == \"textarea\" || tagName == \"select\") &&\n                (name != null && name != \"\")) && !element.disabled) {\n\n                // routine for select elements\n                // rules:\n                // - if select-one and value-Attribute exist => \"name=value\"\n                // (also if value empty => \"name=\")\n                // - if select-one and value-Attribute don't exist =>\n                // \"name=DisplayValue\"\n                // - if select multi and multple selected => \"name=value1&name=value2\"\n                // - if select and selectedIndex=-1 don't submit\n                if (tagName == \"select\") {\n                    // selectedIndex must be >= 0 sein to be submittet\n                    let selectElem: HTMLSelectElement = <HTMLSelectElement>element.getAsElem(0).value;\n                    if (selectElem.selectedIndex >= 0) {\n                        let uLen = selectElem.options.length;\n                        for (let u = 0; u < uLen; u++) {\n                            // find all selected options\n                            //let subBuf = [];\n                            if (selectElem.options[u].selected) {\n                                let elementOption = selectElem.options[u];\n                                target.append(name).value = (elementOption.getAttribute(\"value\") != null) ?\n                                    elementOption.value : elementOption.text;\n                            }\n                        }\n                    }\n                }\n\n                // routine for remaining elements\n                // rules:\n                // - don't submit no selects (processed above), buttons, reset buttons, submit buttons,\n                // - submit checkboxes and radio inputs only if checked\n                if (\n                    (\n                        tagName != Submittables.SELECT &&\n                        elemType != Submittables.BUTTON &&\n                        elemType != Submittables.RESET &&\n                        elemType != Submittables.SUBMIT &&\n                        elemType != Submittables.IMAGE\n                    ) && (\n                        (\n                            elemType != Submittables.CHECKBOX && elemType != Submittables.RADIO) ||\n                        element.checked\n                    )\n                ) {\n                    let files: any = (<any>element.value).value?.files ?? [];\n                    if (files?.length) {\n                        //xhr level2\n                        target.append(name).value = files[0];\n                    } else {\n                        target.append(name).value = element.inputValue.value;\n                    }\n                }\n\n            }\n        });\n\n        return target;\n    }\n\n    get cDATAAsString(): string {\n        let cDataBlock = [];\n        let TYPE_CDATA_BLOCK = 4;\n\n        let res: any = this.lazyStream.flatMap(item => {\n            return item.childNodes.stream\n        }).filter(item => {\n            return item?.value?.value?.nodeType == TYPE_CDATA_BLOCK;\n        }).reduce((reduced: Array<any>, item: DomQuery) => {\n            reduced.push((<any>item?.value?.value)?.data ?? \"\");\n            return reduced;\n        }, []).value;\n\n        // response may contain several blocks\n        return res.join(\"\");\n    }\n\n    subNodes(from: number, to?: number): DomQuery {\n        if (Optional.fromNullable(to).isAbsent()) {\n            to = this.length;\n        }\n        return new DomQuery(...this.rootNode.slice(from, Math.min(to, this.length)));\n    }\n\n    //TODO this part probably will be removed\n    //because we can stream from an array stream directly into the dom query\n    _limits = -1;\n\n    limits(end: number): IStream<DomQuery> {\n        this._limits = end;\n        return <any>this;\n    }\n\n    //-- internally exposed methods needed for the interconnectivity\n    hasNext() {\n        let isLimitsReached = this._limits != -1 && this.pos >= this._limits - 1;\n        let isEndOfArray = this.pos >= this.values.length - 1;\n        return !(isLimitsReached ||\n            isEndOfArray);\n    }\n\n    next(): DomQuery {\n        if (!this.hasNext()) {\n            return null;\n        }\n        this.pos++;\n        return new DomQuery(this.values[this.pos]);\n    }\n\n    reset() {\n        this.pos = -1;\n    }\n\n    attachShadow(params: { [key: string]: string } = {mode: \"open\"}): DomQuery {\n        let shadowRoots: DomQuery[] = [];\n        this.eachElem((item: Element) => {\n            let shadowElement: DomQuery;\n            if ((<any>item)?.attachShadow) {\n                shadowElement = DomQuery.byId((<any>item).attachShadow(params));\n                shadowRoots.push(shadowElement);\n            } else {\n                throw new Error(\"Shadow dom creation not supported by the browser, please use a shim, to gain this functionality\");\n            }\n        });\n        return new DomQuery(...shadowRoots);\n    }\n\n    /**\n     * helper to fix a common dom problem\n     * we have to wait until a certain condition is met, in most of the cases we just want to know whether an element is present in the subdome before being able to proceed\n     * @param condition\n     * @param options\n     */\n    async waitUntilDom(condition: (element: DomQuery) => boolean, options: WAIT_OPTS = { attributes: true, childList: true, subtree: true, timeout: 500, interval: 100 }): Promise<DomQuery> {\n        return waitUntilDom(this, condition, options);\n    }\n\n    /**\n     * returns the embedded shadow elements\n     */\n    get shadowElements(): DomQuery {\n        let shadowElements = this.querySelectorAll(\"*\")\n            .filter(item => item.hasShadow);\n\n\n        let mapped: Array<ShadowRoot> = (shadowElements.allElems() || []).map(element => element.shadowRoot);\n        return new DomQuery(...mapped);\n    }\n\n    get shadowRoot(): DomQuery {\n        let shadowRoots = [];\n        for (let cnt = 0; cnt < this.rootNode.length; cnt++) {\n            if (this.rootNode[cnt].shadowRoot) {\n                shadowRoots.push(this.rootNode[cnt].shadowRoot);\n            }\n        }\n        return new DomQuery(...shadowRoots);\n    }\n\n    get hasShadow(): boolean {\n        for (let cnt = 0; cnt < this.rootNode.length; cnt++) {\n            if (this.rootNode[cnt].shadowRoot) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    //from\n    // http://blog.vishalon.net/index.php/javascript-getting-and-setting-caret-position-in-textarea/\n    static getCaretPosition(ctrl: any) {\n        let caretPos = 0;\n\n        try {\n            if ((<any>document)?.selection) {\n                ctrl.focus();\n                let selection = (<any>document).selection.createRange();\n                //the selection now is start zero\n                selection.moveStart('character', -ctrl.value.length);\n                //the caretposition is the selection start\n                caretPos = selection.text.length;\n            }\n        } catch (e) {\n            //now this is ugly, but not supported input types throw errors for selectionStart\n            //just in case someone dumps this code onto unsupported browsers\n        }\n        return caretPos;\n    }\n\n    /**\n     * sets the caret position\n     *\n     * @param ctrl the control to set the caret position to\n     * @param pos the position to set\n     *\n     * note if the control does not have any selectable and focusable behavior\n     * calling this method does nothing (silent fail)\n     *\n     */\n    static setCaretPosition(ctrl: any, pos: number) {\n        ctrl?.focus ? ctrl?.focus() : null;\n        //the selection range is our caret position\n\n        ctrl?.setSelectiongRange ? ctrl?.setSelectiongRange(pos, pos) : null;\n    }\n\n    /**\n     * Implementation of an iterator\n     * to allow loops over dom query collections\n     */\n    [Symbol.iterator](): Iterator<DomQuery, any, undefined> {\n        return {\n            next: () => {\n                let done = !this.hasNext();\n                let val = this.next();\n                return {\n                    done: done,\n                    value: <DomQuery>val\n                }\n            }\n        }\n    }\n\n\n    /*[observable](): Observable<DomQuery> {\n        return this.observable;\n    }\n\n    get observable(): Observable<DomQuery> {\n        let observerFunc = (observer:Subscriber<DomQuery>) => {\n            try {\n                this.each(dqNode => {\n                    observer.next(dqNode);\n                });\n            } catch (e) {\n                observer.error(e);\n            }\n        };\n        return new Observable(observerFunc);\n    }\n\n    get observableElem(): Observable<Element> {\n        let observerFunc = (observer:Subscriber<Element>) => {\n            try {\n                this.eachElem(node => {\n                    observer.next(node);\n                });\n            } catch (e) {\n                observer.error(e);\n            }\n        };\n        return new Observable(observerFunc);\n    }*/\n\n}\n\n\n\n/**\n * Various collectors\n * which can be used in conjunction with Streams\n */\n\n/**\n * A collector which bundles a full dom query stream into a single dom query element\n *\n * This connects basically our stream back into DomQuery\n */\nexport class DomQueryCollector implements ICollector<DomQuery, DomQuery> {\n\n    data: DomQuery[] = [];\n\n    collect(element: DomQuery) {\n        this.data.push(element);\n    }\n\n    get finalValue(): DomQuery {\n        return new DomQuery(...this.data);\n    }\n}\n\n/**\n * abbreviation for DomQuery\n */\nexport const DQ = DomQuery;\nexport type DQ = DomQuery;\n\n","/* Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Optional} from \"./Monad\";\n\n/**\n * Lang helpers crossported from the apache myfaces project\n */\nexport module Lang {\n    \n\n    //should be in lang, but for now here to avoid recursive imports, not sure if typescript still has a problem with those\n    /**\n     * helper function to savely resolve anything\n     * this is not an elvis operator, it resolves\n     * a value without exception in a tree and if\n     * it is not resolvable then an optional of\n     * a default value is restored or Optional.empty\n     * if none is given\n     *\n     * usage\n     * <code>\n     *     let var: Optiona<string> = saveResolve(() => a.b.c.d.e, \"foobaz\")\n     * </code>\n     *\n     * @param resolverProducer a lambda which can produce the value\n     * @param defaultValue an optional default value if the producer failes to produce anything\n     * @returns an Optional of the produced value\n     */\n    export function saveResolve<T>(resolverProducer: () => T, defaultValue: T = null): Optional<T> {\n        try {\n            let result = resolverProducer();\n            return Optional.fromNullable(result ?? defaultValue);\n        } catch (e) {\n            return Optional.absent;\n        }\n    }\n\n    export function saveResolveLazy<T>(resolverProducer: () => T, defaultValue: () => T = null): Optional<T> {\n        try {\n            let result = resolverProducer();\n            return Optional.fromNullable(result ?? defaultValue());\n        } catch (e) {\n            return Optional.absent;\n        }\n    }\n\n    /**\n     * String to array function performs a string to array transformation\n     * @param {String} it the string which has to be changed into an array\n     * @param {RegExp} splitter our splitter reglar expression\n     * @return a trimmed array of the splitted string\n     */\n    export function strToArray(it: string, splitter: string | RegExp = /\\./gi): Array<string> {\n\n        let ret = [];\n        it.split(splitter).forEach((element => {\n            ret.push(trim(element));\n        }));\n        return ret;\n    }\n\n    /**\n     * hyperfast trim\n     * http://blog.stevenlevithan.com/archives/faster-trim-javascript\n     * crossported from dojo\n     */\n    export function trim(str: string): string {\n        str = str.replace(/^\\s\\s*/, '');\n        let ws = /\\s/, i = str.length;\n\n        while (ws.test(str.charAt(--i))) {\n            //do nothing\n        }\n        return str.slice(0, i + 1);\n    }\n\n    /**\n     * generic object arrays like dom definitions to array conversion method which\n     * transforms any object to something array like\n     * @param obj\n     * @param offset\n     * @param pack\n     * @returns an array converted from the object\n     */\n    export function objToArray<T>(obj: any, offset: number = 0, pack: Array<T> = []): Array<T> {\n        if ((obj ?? \"__undefined__\") == \"__undefined__\") {\n            return pack ?? null;\n        }\n        //since offset is numeric we cannot use the shortcut due to 0 being false\n        //special condition array delivered no offset no pack\n        if ((<any>obj) instanceof Array && !offset && !pack) return obj;\n\n        return pack.concat(Array.prototype.slice.call(obj, offset));\n    }\n\n    /**\n     * equalsIgnoreCase, case insensitive comparison of two strings\n     *\n     * @param source\n     * @param destination\n     */\n    export function equalsIgnoreCase(source?: string, destination?: string): boolean {\n        let finalSource = source ?? \"___no_value__\";\n        let finalDest = destination ?? \"___no_value__\";\n\n        //in any other case we do a strong string comparison\n        return finalSource.toLowerCase() === finalDest.toLowerCase();\n    }\n\n\n    /**\n     * runtime type assertion\n     *\n     * @param probe the probe to be tested for a type\n     * @param theType the type to be tested for\n     */\n    export function assertType(probe: any, theType: any): boolean {\n        return isString(theType) ? typeof probe == theType : probe instanceof theType;\n    }\n\n    /**\n     * Backported from dojo\n     * a failsafe string determination method\n     * (since in javascript String != \"\" typeof alone fails!)\n     * @param it {|Object|} the object to be checked for being a string\n     * @return true in case of being a string false otherwise\n     */\n    export function isString(it?: any): boolean {\n        //\tsummary:\n        //\t\tReturn true if it is a String\n        return !!arguments.length && it != null && (typeof it == \"string\" || it instanceof String); // Boolean\n    }\n\n    export function isFunc(it: any): boolean {\n        return it instanceof Function || typeof it === \"function\";\n    }\n\n    // code from https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\n    // license https://creativecommons.org/licenses/by-sa/2.5/\n    export function objAssign(target: any, ...theArgs: any) { // .length of function is 2\n        if (target == null) { // TypeError if undefined or null\n            throw new TypeError('Cannot convert undefined or null to object');\n        }\n\n        let to = Object(target);\n        if((<any>Object).assign) {\n            theArgs.forEach(item => (<any>Object).assign(to, item));\n            return to;\n        }\n\n        theArgs.filter(item => item != null).forEach(item => {\n            let nextSource = item;\n            Object.keys(nextSource)\n                .filter(nextKey => Object.prototype.hasOwnProperty.call(nextSource, nextKey))\n                .forEach(nextKey => to[nextKey] = nextSource[nextKey]);\n        });\n        return to;\n    }\n\n\n}\n\n","/* Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * A module which keeps  basic monadish like definitions in place without any sidedependencies to other modules.\n * Useful if you need the functions in another library to keep its dependencies down\n */\n\n/*IMonad definitions*/\n\nimport {Lang} from \"./Lang\";\nimport {AssocArrayCollector} from \"./SourcesCollectors\";\nimport {Stream} from \"./Stream\";\nimport objAssign = Lang.objAssign;\n\n/**\n * IFunctor interface,\n * defines an interface which allows to map a functor\n * via a first order function to another functor\n */\nexport interface IFunctor<T> {\n    map<R>(fn: (data: T) => R): IFunctor<R>;\n}\n\n/**\n * IMonad definition, basically a functor with a flaptmap implementation (flatmap reduces all nested monads after a\n * function call f into a monad with the nesting level of 1\n *\n * flatmap flats nested Monads into a IMonad of the deepest nested implementation\n */\nexport interface IMonad<T, M extends IMonad<any, any>> extends IFunctor<T> {\n    flatMap<T, M>(f: (T) => M): IMonad<any, any>;\n}\n\n/**\n * a stateful functor which holds a value upn which a\n * function can be applied\n *\n * as value holder of type T\n */\nexport interface IIdentity<T> extends IFunctor<T> {\n    readonly value: T;\n}\n\n/**\n *  custom value holder definition, since we are not pure functional\n *  but iterative we have structures which allow the assignment of a value\n *  also not all structures are sideffect free\n */\nexport interface IValueHolder<T> {\n    value: T | Array<T>;\n}\n\n/**\n * Implementation of a monad\n * (Sideffect free), no write allowed directly on the monads\n * value state\n */\nexport class Monad<T> implements IMonad<T, Monad<any>>, IValueHolder<T> {\n    constructor(value: T) {\n        this._value = value;\n    }\n\n    protected _value: T;\n\n    get value(): T {\n        return this._value;\n    }\n\n    map<R>(fn?: (data: T) => R): Monad<R> {\n        if (!fn) {\n            fn = (inval: any) => <R>inval;\n        }\n        let result: R = fn(this.value);\n        return new Monad(result);\n    }\n\n    flatMap<R>(fn?: (data: T) => R): Monad<any> {\n        let mapped: Monad<any> = this.map(fn);\n        while (mapped?.value instanceof Monad) {\n            mapped = mapped.value\n        }\n        return mapped;\n    }\n\n}\n\n/**\n * optional implementation, an optional is basically an implementation of a Monad with additional syntactic\n * sugar on top\n * (Sideeffect free, since value assignment is not allowed)\n * */\nexport class Optional<T> extends Monad<T> {\n\n    /*default value for absent*/\n    static absent = Optional.fromNullable(null);\n\n    constructor(value: T) {\n        super(value);\n    }\n\n    get value(): T {\n        if (this._value instanceof Monad) {\n            return this._value.flatMap().value\n        }\n        return this._value;\n    }\n\n    static fromNullable<V extends Optional<T>, T>(value?: T): Optional<T> {\n        return <V> new Optional(value);\n    }\n\n    /*syntactic sugar for absent and present checks*/\n    isAbsent(): boolean {\n        return \"undefined\" == typeof this.value || null == this.value;\n    }\n\n    /**\n     * any value present\n     */\n    isPresent(presentRunnable ?: (val ?: Monad<T>) => void): boolean {\n        let absent = this.isAbsent();\n        if (!absent && presentRunnable) {\n            presentRunnable.call(this, this)\n        }\n        return !absent;\n    }\n\n    ifPresentLazy(presentRunnable: (val ?: Monad<T>) => void = () => {\n    }): Monad<T> {\n        this.isPresent.call(this, presentRunnable);\n        return this;\n    }\n\n    orElse(elseValue: any): Optional<any> {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            //shortcut\n            if (elseValue == null) {\n                return Optional.absent;\n            }\n            return this.flatMap(() => elseValue);\n        }\n    }\n\n    /**\n     * lazy, passes a function which then is lazily evaluated\n     * instead of a direct value\n     * @param func\n     */\n    orElseLazy(func: () => any): Optional<any> {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            return this.flatMap(func);\n        }\n    }\n\n    /*\n     * we need to implement it to fullfill the contract, although it is used only internally\n     * all values are flattened when accessed anyway, so there is no need to call this methiod\n     */\n    flatMap<R>(fn?: (data: T) => R): Optional<any> {\n        let val = super.flatMap(fn);\n        if (!(val instanceof Optional)) {\n            return Optional.fromNullable(val.value);\n        }\n\n        return <Optional<any>>val.flatMap();\n    }\n\n    /*\n     * elvis operation, take care, if you use this you lose typesafety and refactoring\n     * capabilites, unfortunately typesceript does not allow to have its own elvis operator\n     * this is some syntactic sugar however which is quite useful*/\n    getIf<R>(...key: string[]): Optional<R> {\n\n        let currentPos: Optional<any> = this;\n        for (let cnt = 0; cnt < key.length; cnt++) {\n            let currKey = this.keyVal(key[cnt]);\n            let arrPos = this.arrayIndex(key[cnt]);\n\n            if (currKey === \"\" && arrPos >= 0) {\n                currentPos = this.getClass().fromNullable(!(currentPos.value instanceof Array) ? null : (currentPos.value.length < arrPos ? null : currentPos.value[arrPos]));\n                if (currentPos.isAbsent()) {\n                    return currentPos;\n                }\n                continue;\n            } else if (currKey && arrPos >= 0) {\n                if (currentPos.getIfPresent(currKey).isAbsent()) {\n                    return currentPos;\n                }\n                currentPos = (currentPos.getIfPresent(currKey).value instanceof Array) ? this.getClass().fromNullable(currentPos.getIfPresent(currKey).value[arrPos]) : this.getClass().absent;\n                if (currentPos.isAbsent()) {\n                    return currentPos;\n                }\n                continue;\n\n            } else {\n                currentPos = currentPos.getIfPresent(currKey);\n            }\n            if (currentPos.isAbsent()) {\n                return currentPos;\n            } else if (arrPos > -1) {\n                currentPos = this.getClass().fromNullable(currentPos.value[arrPos]);\n            }\n        }\n        let retVal = currentPos;\n\n        return retVal;\n    }\n\n    /**\n     * simple match, if the first order function call returns\n     * true then there is a match, if the value is not present\n     * it never matches\n     *\n     * @param fn the first order function performing the match\n     */\n    match(fn: (item: T) => boolean): boolean {\n        if (this.isAbsent()) {\n            return false\n        }\n        return fn(this.value);\n    }\n\n    /**\n     * convenience function to flatmap the internal value\n     * and replace it with a default in case of being absent\n     *\n     * @param defaultVal\n     * @returns {Optional<any>}\n     */\n    get<R>(defaultVal: any = Optional.absent): Optional<R> {\n        if (this.isAbsent()) {\n            return this.getClass().fromNullable(defaultVal).flatMap();\n        }\n\n        return this.getClass().fromNullable(this.value).flatMap();\n    }\n\n    toJson(): string {\n        return JSON.stringify(this.value);\n    }\n\n    /**\n     * helper to override several implementations in a more fluent way\n     * by having a getClass operation we can avoid direct calls into the constructor or\n     * static methods and do not have to implement several methods which rely on the type\n     * of \"this\"\n     * @returns {Monadish.Optional}\n     */\n    protected getClass(): any {\n        return Optional;\n    }\n\n    /*helper method for getIf with array access aka <name>[<indexPos>]*/\n    protected arrayIndex(key: string): number {\n        let start = key.indexOf(\"[\");\n        let end = key.indexOf(\"]\");\n        if (start >= 0 && end > 0 && start < end) {\n            return parseInt(key.substring(start + 1, end));\n        } else {\n            return -1;\n        }\n    }\n\n    /*helper method for getIf with array access aka <name>[<indexPos>]*/\n    protected keyVal(key: string): string {\n        let start = key.indexOf(\"[\");\n\n        if (start >= 0) {\n            return key.substring(0, start);\n        } else {\n            return key;\n        }\n    }\n\n    /**\n     * additional syntactic sugar which is not part of the usual optional implementation\n     * but makes life easier, if you want to sacrifice typesafety and refactoring\n     * capabilities in typescript\n     */\n    getIfPresent<R>(key: string): Optional<R> {\n        if (this.isAbsent()) {\n            return this.getClass().absent;\n        }\n        return this.getClass().fromNullable(this.value[key]).flatMap();\n    }\n\n    /**\n     * elvis like typesafe functional save resolver\n     * a typesafe option for getIfPresent\n     *\n     * usage myOptional.resolve(value => value.subAttr.subAttr2).orElseLazy(....)\n     * if this is resolvable without any errors an Optional with the value is returned\n     * if not, then an Optional absent is returned, also if you return Optional absent\n     * it is flatmapped into absent\n     *\n     * @param resolver the resolver function, can throw any arbitrary errors, int  the error case\n     * the resolution goes towards absent\n     */\n    resolve<V>(resolver: (item: T) => V): Optional<V> {\n        if (this.isAbsent()) {\n            return Optional.absent;\n        }\n        try {\n            return Optional.fromNullable(resolver(this.value))\n        } catch (e) {\n            return Optional.absent;\n        }\n    }\n\n}\n\n// --------------------- From here onwards we break out the sideffects free limits ------------\n\n/**\n * ValueEmbedder is the writeable version\n * of optional, it basically is a wrappber\n * around a construct which has a state\n * and can be written to.\n *\n * For the readonly version see Optional\n */\nexport class ValueEmbedder<T> extends Optional<T> implements IValueHolder<T> {\n\n    /*default value for absent*/\n    static absent = ValueEmbedder.fromNullable(null);\n\n    protected key: string;\n\n    constructor(rootElem: any, valueKey: string = \"value\") {\n        super(rootElem);\n\n        this.key = valueKey;\n    }\n\n    get value(): T {\n        return this._value ? <T>this._value[this.key] : null;\n    }\n\n    set value(newVal: T) {\n        if (!this._value) {\n            return;\n        }\n        this._value[this.key] = newVal\n    }\n\n    orElse(elseValue: any): Optional<any> {\n        let alternative = {};\n        alternative[this.key] = elseValue;\n        return this.isPresent() ? this : new ValueEmbedder(alternative, this.key);\n    }\n\n    orElseLazy(func: () => any): Optional<any> {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            let alternative = {};\n            alternative[this.key] = func();\n            return new ValueEmbedder(alternative, this.key);\n        }\n    }\n\n    /**\n     * helper to override several implementations in a more fluent way\n     * by having a getClass operation we can avoid direct calls into the constructor or\n     * static methods and do not have to implement several methods which rely on the type\n     * of \"this\"\n     * @returns {Monadish.Optional}\n     */\n    protected getClass(): any {\n        return ValueEmbedder;\n    }\n\n    static fromNullable<V extends Optional<T>,T>(value?: any, valueKey: string = \"value\"): V {\n        return <any> new ValueEmbedder<T>(value, valueKey);\n    }\n\n}\n\n/**\n * specialized value embedder\n * for our Configuration\n */\nclass ConfigEntry<T> extends ValueEmbedder<T> {\n\n    /*default value for absent*/\n    static absent = ConfigEntry.fromNullable(null);\n\n    /**\n     * arrayed value positions\n     */\n    arrPos: number;\n\n    constructor(rootElem: any, key: any, arrPos?: number) {\n        super(rootElem, key);\n\n        this.arrPos = arrPos ?? -1;\n    }\n\n    get value() {\n        if (this.key == \"\" && this.arrPos >= 0) {\n            return this._value[this.arrPos];\n        } else if (this.key && this.arrPos >= 0) {\n            return this._value[this.key][this.arrPos];\n        }\n        return this._value[this.key];\n    }\n\n    set value(val: T) {\n        if (this.key == \"\" && this.arrPos >= 0) {\n            this._value[this.arrPos] = val;\n            return;\n        } else if (this.key && this.arrPos >= 0) {\n            this._value[this.key][this.arrPos] = val;\n            return;\n        }\n        this._value[this.key] = val;\n    }\n}\n\n/**\n * Config, basically an optional wrapper for a json structure\n * (not sideeffect free, since we can alter the internal config state\n * without generating a new config), not sure if we should make it sideffect free\n * since this would swallow a lot of performane and ram\n */\nexport class Config extends Optional<any> {\n    constructor(root: any) {\n        super(root);\n    }\n\n    get shallowCopy(): Config {\n        return new Config(Stream.ofAssoc(this.value).collect(new AssocArrayCollector()));\n    }\n\n    get deepCopy(): Config {\n        return new Config(objAssign({}, this.value));\n    }\n\n    static fromNullable<T>(value?: any): Config {\n        return new Config(value);\n    }\n\n    /**\n     * simple merge for the root configs\n     */\n    shallowMerge(other: Config, overwrite = true, withAppend = false) {\n        for (let key in other.value) {\n            if (overwrite || !(key in this.value)) {\n                if (!withAppend) {\n                    this.assign(key).value = other.getIf(key).value;\n                } else {\n                    if (Array.isArray(other.getIf(key).value)) {\n                        Stream.of(...other.getIf(key).value).each(item => this.append(key).value = item);\n                    } else {\n                        this.append(key).value = other.getIf(key).value;\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * assigns a single value as array, or appends it\n     * to an existing value mapping a single value to array\n     *\n     *\n     * usage myConfig.append(\"foobaz\").value = \"newValue\"\n     *       myConfig.append(\"foobaz\").value = \"newValue2\"\n     *\n     * resulting in myConfig.foobaz == [\"newValue, newValue2\"]\n     *\n     * @param keys\n     */\n    append(...keys): IValueHolder<any> {\n        let noKeys = keys.length < 1;\n        if (noKeys) {\n            return;\n        }\n\n        let lastKey = keys[keys.length - 1];\n        let currKey, finalKey = this.keyVal(lastKey);\n\n        let pathExists = this.getIf(...keys).isPresent();\n        this.buildPath(keys);\n\n        let finalKeyArrPos = this.arrayIndex(lastKey);\n        if (finalKeyArrPos > -1) {\n            throw Error(\"Append only possible on non array properties, use assign on indexed data\");\n        }\n        let value = <any>this.getIf(...keys).value;\n        if (!Array.isArray(value)) {\n            value = this.assign(...keys).value = [value];\n        }\n        if (pathExists) {\n            value.push({});\n        }\n        finalKeyArrPos = value.length - 1;\n\n        let retVal = new ConfigEntry(keys.length == 1 ? this.value : this.getIf.apply(this, keys.slice(0, keys.length - 1)).value,\n            lastKey, finalKeyArrPos\n        );\n\n        return retVal;\n    }\n\n    appendIf(condition: boolean, ...keys): IValueHolder<any> {\n        if (!condition) {\n            return {value: null};\n        }\n        return this.append(...keys);\n    }\n\n    assign(...keys): IValueHolder<any> {\n        if (keys.length < 1) {\n            return;\n        }\n\n        this.buildPath(keys);\n\n        let currKey = this.keyVal(keys[keys.length - 1]);\n        let arrPos = this.arrayIndex(keys[keys.length - 1]);\n        let retVal = new ConfigEntry(keys.length == 1 ? this.value : this.getIf.apply(this, keys.slice(0, keys.length - 1)).value,\n            currKey, arrPos\n        );\n\n        return retVal;\n    }\n\n    assignIf(condition: boolean, ...keys: Array<any>): IValueHolder<any> {\n        return condition ? this.assign(...keys) : {value: null};\n    }\n\n    getIf(...keys: Array<string>): Config {\n        return this.getClass().fromNullable(super.getIf.apply(this, keys).value);\n    }\n\n    get(defaultVal: any): Config {\n        return this.getClass().fromNullable(super.get(defaultVal).value);\n    }\n\n    //empties the current config entry\n    delete(key: string): Config {\n        if (key in this.value) {\n            delete this.value[key];\n        }\n        return this;\n    }\n\n    toJson(): any {\n        return JSON.stringify(this.value);\n    }\n\n    protected getClass(): any {\n        return Config;\n    }\n\n    private setVal(val: any) {\n        this._value = val;\n    }\n\n    /**\n     * builds the config path\n     *\n     * @param keys a sequential array of keys containing either a key name or an array reference name[<index>]\n     */\n    private buildPath(keys: Array<any>): Config {\n        let val = this;\n        let parentVal = this.getClass().fromNullable(null);\n        let parentPos = -1;\n        let alloc = function (arr: Array<any>, length: number) {\n            let length1 = arr.length;\n            let length2 = length1 + length;\n            for (let cnt = length1; cnt < length2; cnt++) {\n                arr.push({});\n            }\n        };\n\n        for (let cnt = 0; cnt < keys.length; cnt++) {\n            let currKey = this.keyVal(keys[cnt]);\n            let arrPos = this.arrayIndex(keys[cnt]);\n\n            if (currKey === \"\" && arrPos >= 0) {\n\n                val.setVal((val.value instanceof Array) ? val.value : []);\n                alloc(val.value, arrPos + 1);\n                if (parentPos >= 0) {\n                    parentVal.value[parentPos] = val.value;\n                }\n                parentVal = val;\n                parentPos = arrPos;\n                val = this.getClass().fromNullable(val.value[arrPos]);\n                continue;\n            }\n\n            let tempVal = <Config>val.getIf(currKey);\n            if (arrPos == -1) {\n                if (tempVal.isAbsent()) {\n                    tempVal = <Config>this.getClass().fromNullable(val.value[currKey] = {});\n                } else {\n                    val = <any>tempVal;\n                }\n            } else {\n                let arr = (tempVal.value instanceof Array) ? tempVal.value : [];\n                alloc(arr, arrPos + 1);\n                val.value[currKey] = arr;\n                tempVal = this.getClass().fromNullable(arr[arrPos]);\n            }\n            parentVal = val;\n            parentPos = arrPos;\n            val = <any>tempVal;\n        }\n\n        return this;\n    }\n}\n\n\n","/* Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Stream, StreamMapper} from \"./Stream\";\nimport {DomQuery} from \"./DomQuery\";\n\n/**\n * Every data source wich feeds data into the lazy stream\n * or stream generally must implement this interface\n *\n * It is basically an iteratable to the core\n */\nexport interface IStreamDataSource<T> {\n\n    /**\n     * @returns true if additional data is present false if not\n     */\n    hasNext(): boolean;\n\n    /**\n     * returns the next element in the stream\n     */\n    next(): T;\n\n    /**\n     * resets the position to the beginning\n     */\n    reset(): void;\n}\n\n/**\n * A collector, needs to be implemented\n */\nexport interface ICollector<T, S> {\n    /**\n     * this method basically takes a single stream element\n     * and does something with it (collecting it one way or the other\n     * in most cases)\n     *\n     * @param element\n     */\n    collect(element: T);\n\n    /**\n     * the final result after all the collecting is done\n     */\n    finalValue: S;\n}\n\n\n/**\n * defines a sequence of numbers for our stream input\n */\nexport class SequenceDataSource implements IStreamDataSource<number> {\n\n    start: number;\n    total: number;\n    value: number;\n\n    constructor(start: number, total: number) {\n        this.total = total;\n        this.start = start;\n        this.value = start;\n    }\n\n\n    hasNext(): boolean {\n        return this.value < this.total;\n    }\n\n    next(): number {\n        return Math.min(this.value++, this.total - 1);\n    }\n\n    reset(): void {\n        this.value = 0;\n    }\n}\n\n\n/**\n * implementation of iteratable on top of array\n */\nexport class ArrayStreamDataSource<T> implements IStreamDataSource<T> {\n    value: Array<T>;\n    dataPos = -1;\n\n    constructor(...value: Array<T>) {\n        this.value = value;\n    }\n\n    hasNext(): boolean {\n        return this.value.length - 1 > this.dataPos;\n    }\n\n    next(): T {\n        this.dataPos++;\n        return this.value[this.dataPos];\n    }\n\n    reset() {\n        this.dataPos = -1;\n    }\n}\n\n/**\n * an intermediate data source which prefilters\n * incoming stream data\n * and lets only the data out which\n * passes the filter function check\n */\nexport class FilteredStreamDatasource<T> implements IStreamDataSource<T> {\n\n    filterFunc: (T) => boolean;\n    inputDataSource: IStreamDataSource<T>;\n\n    filteredNext: T = null;\n\n    constructor(filterFunc: (T) => boolean, parent: IStreamDataSource<T>) {\n        this.filterFunc = filterFunc;\n        this.inputDataSource = parent;\n    }\n\n    /**\n     * in order to filter we have to make a look ahead until the\n     * first next allowed element\n     * hence we prefetch the element and then\n     * serve it via next\n     */\n    hasNext(): boolean {\n        while (this.filteredNext == null && this.inputDataSource.hasNext()) {\n            let next: T = <T>this.inputDataSource.next();\n            if (this.filterFunc(next)) {\n                this.filteredNext = next;\n                return true;\n            } else {\n                this.filteredNext = null;\n            }\n        }\n        return this.filteredNext != null;\n    }\n\n    /**\n     * serve the next element\n     */\n    next(): T {\n        let ret = this.filteredNext;\n        this.filteredNext = null;\n        //We have to call hasNext, to roll another\n        //prefetch in case someone runs next\n        //sequentially without calling hasNext\n        this.hasNext();\n        return ret;\n    }\n\n    reset(): void {\n        this.filteredNext = null;\n        this.inputDataSource.reset();\n    }\n}\n\n/**\n * an intermediate datasource which maps the items from\n * one into another\n */\nexport class MappedStreamDataSource<T, S> implements IStreamDataSource<S> {\n\n    mapFunc: (T) => S;\n    inputDataSource: IStreamDataSource<T>;\n\n    constructor(mapFunc: (T) => S, parent: IStreamDataSource<T>) {\n        this.mapFunc = mapFunc;\n        this.inputDataSource = parent;\n    }\n\n    hasNext(): boolean {\n        return this.inputDataSource.hasNext();\n    }\n\n    next(): S {\n        return this.mapFunc(this.inputDataSource.next());\n    }\n\n    reset(): void {\n        this.inputDataSource.reset();\n    }\n}\n\n/**\n * Same for flatmap to deal with element -> stream mappings\n */\nexport class FlatMapStreamDataSource<T, S> implements IStreamDataSource<S> {\n\n    mapFunc: StreamMapper<T>;\n\n    inputDataSource: IStreamDataSource<T>;\n\n    /**\n     * the currently active stream\n     * coming from an incoming element\n     * once the end of this one is reached\n     * it is swapped out by another one\n     * from the next element\n     */\n    activeDataSource: IStreamDataSource<S>;\n\n    constructor(func: StreamMapper<T>, parent: IStreamDataSource<T>) {\n        this.mapFunc = func;\n        this.inputDataSource = parent;\n    }\n\n    hasNext(): boolean {\n        return this.resolveCurrentNext() || this.resolveNextNext();\n    }\n\n    private resolveCurrentNext() {\n        let next = false;\n        if (this.activeDataSource) {\n            next = this.activeDataSource.hasNext();\n        }\n        return next;\n    }\n\n    private resolveNextNext() {\n        let next = false;\n        while (!next && this.inputDataSource.hasNext()) {\n            let mapped = this.mapFunc(this.inputDataSource.next());\n            if (Array.isArray(mapped)) {\n                this.activeDataSource = new ArrayStreamDataSource(...mapped);\n            } else {\n                this.activeDataSource = mapped;\n            }\n            next = this.activeDataSource.hasNext();\n        }\n        return next;\n    }\n\n    next(): S {\n        return this.activeDataSource.next();\n    }\n\n    reset(): void {\n        this.inputDataSource.reset();\n    }\n}\n\n/**\n * For the time being we only need one collector\n * a collector which collects a stream back into arrays\n */\nexport class ArrayCollector<S> implements ICollector<S, Array<S>> {\n    private data: Array<S> = [];\n\n    collect(element: S) {\n        this.data.push(element);\n    }\n\n    get finalValue(): Array<S> {\n        return this.data;\n    }\n}\n\n/**\n * collects an tuple array stream into an assoc array with elements being collected into arrays\n *\n */\nexport class ArrayAssocArrayCollector<S> implements ICollector<[string, S] | string, {[key: string]: S} > {\n    finalValue: {[key:string]: any} = {};\n\n    collect(element: [string, S] | string) {\n        let key = element?.[0] ?? <string> element;\n        this.finalValue[key] = this.finalValue?.[key] ?? [];\n        this.finalValue[key].push(element?.[1] ?? true);\n    }\n}\n\n/**\n * dummy collector which just triggers a run\n * on lazy streams without collecting anything\n */\nexport class Run<S> implements ICollector<S, any> {\n    collect(element: S) {\n\n    }\n\n    get finalValue(): any {\n        return null;\n    }\n}\n\n/**\n * collects an assoc stream back to an assoc array\n */\nexport class AssocArrayCollector<S> implements ICollector<[string, S] | string, { [key: string]: S }> {\n\n    finalValue: { [key: string]: any } = {};\n\n    collect(element: [string, S] | string) {\n        this.finalValue[element[0] ?? <string>element] = element[1] ?? true;\n    }\n}\n\n/**\n * Form data collector for key value pair streams\n */\nexport class FormDataCollector implements ICollector<{ key: string, value: any }, FormData> {\n    finalValue: FormData = new FormData();\n\n    collect(element: { key: string; value: any }) {\n        this.finalValue.append(element.key, element.value);\n    }\n}\n\n/**\n * Form data collector for DomQuery streams\n */\nexport class QueryFormDataCollector implements ICollector<DomQuery, FormData> {\n    finalValue: FormData = new FormData();\n\n    collect(element: DomQuery) {\n        let toMerge = element.encodeFormElement();\n        if (toMerge.isPresent()) {\n            this.finalValue.append(element.name.value, toMerge.get(element.name).value);\n        }\n    }\n}\n\n/**\n * Encoded String collector from dom query streams\n */\nexport class QueryFormStringCollector implements ICollector<DomQuery, string> {\n\n    formData: [[string, string]] = <any>[];\n\n    collect(element: DomQuery) {\n        let toMerge = element.encodeFormElement();\n        if (toMerge.isPresent()) {\n            this.formData.push([element.name.value, toMerge.get(element.name).value]);\n        }\n    }\n\n    get finalValue(): string {\n        return Stream.of(...this.formData)\n            .map<string>(keyVal => keyVal.join(\"=\"))\n            .reduce((item1, item2) => [item1, item2].join(\"&\"))\n            .orElse(\"\").value;\n    }\n}","/* Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/*\n * A small stream implementation\n */\nimport {IMonad, IValueHolder, Optional} from \"./Monad\";\nimport {\n    ArrayCollector,\n    ArrayStreamDataSource,\n    FilteredStreamDatasource, FlatMapStreamDataSource,\n    ICollector,\n    IStreamDataSource,\n    MappedStreamDataSource\n} from \"./SourcesCollectors\";\n//import {from, Observable} from \"rxjs\";\n\n\n/*\n * some typedefs to make the code more reabable\n */\nexport type StreamMapper<T> = (data: T) => IStreamDataSource<any>;\nexport type ArrayMapper<T> = (data: T) => Array<any>;\nexport type IteratableConsumer<T> = (data: T, pos ?: number) => void | boolean;\nexport type Reducable<T, V> = (val1: T | V, val2: T) => V;\nexport type Matchable<T> = (data: T) => boolean;\nexport type Mappable<T, R> = (data: T) => R;\nexport type Comparator<T> = (el1: T, el2: T) => number;\n\n/**\n * Generic interface defining a stream\n */\nexport interface IStream<T> {\n    /**\n     * Perform the operation fn on a single element in the stream at a time\n     * then pass the stream over for further processing\n     * This is basically an intermediate point in the stream\n     * with further processing happening later, do not use\n     * this method to gather data or iterate over all date for processing\n     * (for the second case each has to be used)\n     *\n     * @param fn the processing function, if it returns false, further processing is stopped\n     */\n    onElem(fn: IteratableConsumer<T>): IStream<T>;\n\n    /**\n     * Iterate over all elements in the stream and do some processing via fn\n     *\n     * @param fn takes a single element and if it returns false\n     * then further processing is stopped\n     */\n    each(fn: IteratableConsumer<T>): void;\n\n    /**\n     * maps a single element into another via fn\n     * @param fn function which takes one element in and returns another\n     */\n    map<R>(fn?: Mappable<T, R>): IStream<R>;\n\n    /**\n     * Takes an element in and returns a set of something\n     * the set then is flatted into a single stream to be further processed\n     *\n     * @param fn\n     */\n    flatMap<R>(fn?: StreamMapper<T> | ArrayMapper<T>): IStream<R>;\n\n    /**\n     * filtering, takes an element in and is processed by fn.\n     * If it returns false then further processing on this element is skipped\n     * if it returns true it is passed down the chain.\n     *\n     * @param fn\n     */\n    filter(fn?: Matchable<T>): IStream<T>;\n\n    /**\n     * functional reduce... takes two elements in the stream and reduces to\n     * one from left to right\n     *\n     * @param fn the reduction function for instance (val1,val2) => val1l+val2\n     * @param startVal an optional starting value, if provided the the processing starts with this element\n     * and further goes down into the stream, if not, then the first two elements are taken as reduction starting point\n     */\n    reduce<V>(fn: Reducable<T, V>, startVal: T | V): Optional<T | V>;\n\n    /**\n     * returns the first element in the stream is given as Optional\n     */\n    first(): Optional<T>;\n\n    /**\n     * Returns the last stream element (note in endless streams without filtering and limiting you will never reach that\n     * point hence producing an endless loop)\n     */\n    last(): Optional<T>;\n\n    /**\n     * returns true if there is at least one element where a call fn(element) produces true\n     *\n     * @param fn\n     */\n    anyMatch(fn: Matchable<T>): boolean;\n\n    /**\n     * returns true if all elmements produce true on a call to fn(element)\n     *\n     * @param fn\n     */\n    allMatch(fn: Matchable<T>): boolean;\n\n    /**\n     * returns true if no elmements produce true on a call to fn(element)\n     *\n     * @param fn\n     */\n    noneMatch(fn: Matchable<T>): boolean;\n\n    /**\n     * Collect the elements with a collector given\n     * There are a number of collectors provided\n     *\n     * @param collector\n     */\n    collect(collector: ICollector<T, any>): any;\n\n    /**\n     * sort on the stream, this is a special case\n     * of an endpoint, so your data which is fed in needs\n     * to be limited otherwise it will fail\n     * it still returns a stream for further processing\n     *\n     * @param comparator\n     */\n    sort(comparator: Comparator<T>): IStream<T>;\n\n    /**\n     * Limits the stream to a certain number of elements\n     *\n     * @param end the limit of the stream\n     */\n    limits(end: number): IStream<T>;\n\n\n    concat(...toAppend: Array<IStream<T>>): IStream<T>\n\n    /**\n     * returns the stream collected into an array (90% use-case abbreviation\n     */\n    value: Array<T>;\n\n    /**\n     * returns an observable of the given stream\n     */\n    [Symbol.iterator](): Iterator<T>;\n\n    //observable: Observable<T>;\n}\n\n/**\n * A simple typescript based reimplementation of streams\n *\n * This is the early eval version\n * for a lazy eval version check, LazyStream, which is api compatible\n * to this implementation, however with the benefit of being able\n * to provide infinite data sources and generic data providers, the downside\n * is, it might be a tad slower in some situations\n */\nexport class Stream<T> implements IMonad<T, Stream<any>>, IValueHolder<Array<T>>, IStream<T> {\n\n    value: Array<T>;\n    _limits = -1;\n\n    private pos = -1;\n\n    constructor(...value: T[]) {\n        this.value = value;\n    }\n\n    static of<T>(...data: Array<T>): Stream<T> {\n        return new Stream<T>(...data);\n    }\n\n    static ofAssoc<T>(data: { [key: string]: T }): Stream<[string, T]> {\n        return this.of(...Object.keys(data)).map(key => [key, data[key]]);\n    }\n\n    static ofDataSource<T>(dataSource: IStreamDataSource<T>) {\n        let value: T[] = [];\n        while (dataSource.hasNext()) {\n            value.push(dataSource.next());\n        }\n\n        return new Stream(...value);\n    }\n\n    limits(end: number): Stream<T> {\n        this._limits = end;\n        return this;\n    }\n\n    /**\n     * concat for streams, so that you can concat two streams together\n     * @param toAppend\n     */\n    concat(...toAppend: Array<IStream<T>>): Stream<T> {\n        //let dataSource = new MultiStreamDatasource<T>(this, ...toAppend);\n        //return Stream.ofDataSource<T>(dataSource);\n\n        return Stream.of(<IStream<T>>this, ...toAppend).flatMap(item => item);\n    }\n\n\n    onElem(fn: (data: T, pos ?: number) => void | boolean): Stream<T> {\n        for (let cnt = 0; cnt < this.value.length && (this._limits == -1 || cnt < this._limits); cnt++) {\n            if (fn(this.value[cnt], cnt) === false) {\n                break;\n            }\n        }\n        return this;\n    }\n\n    each(fn: (data: T, pos ?: number) => void | boolean) {\n        this.onElem(fn);\n    }\n\n    map<R>(fn?: (data: T) => R): Stream<R> {\n        if (!fn) {\n            fn = (inval: any) => <R>inval;\n        }\n        let res: R[] = [];\n        this.each((item, cnt) => {\n            res.push(fn(item))\n        });\n\n        return new Stream<R>(...res);\n    }\n\n    /*\n     * we need to implement it to fullfill the contract, although it is used only internally\n     * all values are flattened when accessed anyway, so there is no need to call this methiod\n     */\n\n    flatMap<IStreamDataSource>(fn: (data: T) => IStreamDataSource | Array<any>): Stream<any> {\n        let ret = [];\n        this.each(item => {\n            let strmR: any = fn(item);\n            ret = Array.isArray(strmR) ? ret.concat(strmR) : ret.concat(...strmR.value);\n        });\n        return <Stream<any>>Stream.of(...ret);\n    }\n\n    filter(fn?: (data: T) => boolean): Stream<T> {\n        let res: Array<T> = [];\n        this.each((data) => {\n            if (fn(data)) {\n                res.push(data);\n            }\n        });\n        return new Stream<T>(...res);\n    }\n\n    reduce<V>(fn: Reducable<T, V | T>, startVal: V = null): Optional<V | T> {\n        let offset = startVal != null ? 0 : 1;\n        let val1: V | T = startVal != null ? startVal : this.value.length ? this.value[0] : null;\n\n        for (let cnt = offset; cnt < this.value.length && (this._limits == -1 || cnt < this._limits); cnt++) {\n            val1 = fn(val1, this.value[cnt]);\n        }\n        return Optional.fromNullable<Optional<any>, V | T>(val1);\n    }\n\n    first(): Optional<T> {\n        return this.value && this.value.length ? Optional.fromNullable(this.value[0]) : Optional.absent;\n    }\n\n    last(): Optional<T> {\n        //could be done via reduce, but is faster this way\n        let length = this._limits > 0 ? Math.min(this._limits, this.value.length) : this.value.length;\n\n        return Optional.fromNullable(length ? this.value[length - 1] : null);\n    }\n\n    anyMatch(fn: Matchable<T>): boolean {\n        for (let cnt = 0; cnt < this.value.length && (this._limits == -1 || cnt < this._limits); cnt++) {\n            if (fn(this.value[cnt])) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    allMatch(fn: Matchable<T>): boolean {\n        if (!this.value.length) {\n            return false;\n        }\n        let matches = 0;\n        for (let cnt = 0; cnt < this.value.length; cnt++) {\n            if (fn(this.value[cnt])) {\n                matches++;\n            }\n        }\n        return matches == this.value.length;\n    }\n\n    noneMatch(fn: Matchable<T>): boolean {\n        let matches = 0;\n        for (let cnt = 0; cnt < this.value.length; cnt++) {\n            if (!fn(this.value[cnt])) {\n                matches++;\n            }\n        }\n        return matches == this.value.length;\n    }\n\n    sort(comparator: Comparator<T>): IStream<T> {\n        let newArr = this.value.slice().sort(comparator);\n        return Stream.of(...newArr);\n    }\n\n\n    collect(collector: ICollector<T, any>): any {\n        this.each(data => collector.collect(data));\n        return collector.finalValue;\n    }\n\n    //-- internally exposed methods needed for the interconnectivity\n    hasNext(): boolean {\n        let isLimitsReached = this._limits != -1 && this.pos >= this._limits - 1;\n        let isEndOfArray = this.pos >= this.value.length - 1;\n        return !(isLimitsReached || isEndOfArray);\n    }\n\n    next(): T {\n        if (!this.hasNext()) {\n            return null;\n        }\n        this.pos++;\n        return this.value[this.pos];\n    }\n\n    [Symbol.iterator]() : Iterator<T> {\n        return {\n            next: () => {\n                let done = !this.hasNext();\n                let val = this.next();\n                return {\n                    done: done,\n                    value: <T>val\n                }\n            }\n        }\n    }\n\n    /*get observable(): Observable<T> {\n        return from(this);\n    }*/\n\n    reset() {\n        this.pos = -1;\n    }\n}\n\n/**\n * Lazy implementation of a Stream\n * The idea is to connect the intermediate\n * streams as datasources like a linked list\n * with reverse referencing and for special\n * operations like filtering flatmapping\n * have intermediate datasources in the list\n * with specialized functions.\n *\n * Sort of a modified pipe valve pattern\n * the streams are the pipes the intermediate\n * data sources are the valves\n *\n * We then can use passed in functions to control\n * the flow in the valves\n *\n * That way we can have a lazy evaluating stream\n *\n * So if an endpoint requests data\n * a callback trace goes back the stream list\n * which triggers an operation upwards\n * which sends data down the drain which then is processed\n * and filtered until one element hits the endpoint.\n *\n * That is repeated, until all elements are processed\n * or an internal limit is hit.\n *\n */\nexport class LazyStream<T> implements IStreamDataSource<T>, IStream<T>, IMonad<T, LazyStream<any>> {\n\n    protected dataSource: IStreamDataSource<T>;\n    _limits = -1;\n\n    /*\n     * needed to have the limits check working\n     * we need to keep track of the current position\n     * in the stream\n     */\n    pos = -1;\n\n    static of<T>(...values: Array<T>): LazyStream<T> {\n        return new LazyStream<T>(new ArrayStreamDataSource(...values));\n    }\n\n    static ofAssoc<T>(data: { [key: string]: T }): LazyStream<[string, T]> {\n        return this.of(...Object.keys(data)).map(key => [key, data[key]]);\n    }\n\n    static ofStreamDataSource<T>(value: IStreamDataSource<T>): LazyStream<T> {\n        return new LazyStream(value);\n    }\n\n    constructor(parent: IStreamDataSource<T>) {\n        this.dataSource = parent;\n\n    }\n\n    hasNext(): boolean {\n        if (this.isOverLimits()) {\n            return false;\n        }\n\n        return this.dataSource.hasNext();\n    }\n\n    next(): T {\n        let next = this.dataSource.next();\n        // @ts-ignore\n        this.pos++;\n        return next;\n    }\n\n    reset(): void {\n        this.dataSource.reset();\n        this.pos = 0;\n        this._limits = -1;\n    }\n\n    /**\n     * concat for streams, so that you can concat two streams together\n     * @param toAppend\n     */\n    concat(...toAppend: Array<IStream<T>>): LazyStream<T> {\n        //this.dataSource =  new MultiStreamDatasource<T>(this, ... toAppend);\n        //return this;\n        return LazyStream.of(<IStream<T>>this, ...toAppend).flatMap(item => item);\n    }\n\n    nextFilter(fn: Matchable<T>): T {\n        if (this.hasNext()) {\n            let newVal: T = this.next();\n            if (!fn(newVal)) {\n                return this.nextFilter(fn);\n            }\n            return <T>newVal;\n        }\n        return null;\n    }\n\n    limits(max: number): LazyStream<T> {\n        this._limits = max;\n        return this;\n    }\n\n    //main stream methods\n    collect(collector: ICollector<T, any>): any {\n        while (this.hasNext()) {\n            let t = this.next();\n            collector.collect(<T>t);\n        }\n        return collector.finalValue;\n    }\n\n    onElem(fn: IteratableConsumer<T>): LazyStream<T> {\n        return new LazyStream(new MappedStreamDataSource((el) => {\n            if (fn(el, this.pos) === false) {\n                this.stop();\n            }\n            return el;\n        }, this));\n    }\n\n    filter(fn: Matchable<T>): LazyStream<T> {\n        return <LazyStream<T>>new LazyStream<T>(new FilteredStreamDatasource<any>(fn, this));\n    }\n\n    map<R>(fn: Mappable<T, R>): LazyStream<any> {\n        return new LazyStream(new MappedStreamDataSource(fn, this));\n    }\n\n    flatMap<StreamMapper>(fn: StreamMapper | ArrayMapper<any>): LazyStream<any> {\n\n        return new LazyStream<any>(new FlatMapStreamDataSource(<any>fn, this));\n    }\n\n    //endpoint\n    each(fn: IteratableConsumer<T>) {\n        while (this.hasNext()) {\n            if (fn(this.next()) === false) {\n                this.stop();\n            }\n        }\n    }\n\n    reduce<V>(fn: Reducable<T, V>, startVal: T | V = null): Optional<T | V> {\n        if (!this.hasNext()) {\n            return Optional.absent;\n        }\n        let value1 = null;\n        let value2 = null;\n        if (startVal != null) {\n            value1 = startVal;\n            value2 = this.next();\n        } else {\n            value1 = this.next();\n            if (!this.hasNext()) {\n                return Optional.fromNullable(value1);\n            }\n            value2 = this.next();\n        }\n        value1 = fn(value1, value2);\n        while (this.hasNext()) {\n            value2 = this.next();\n            value1 = fn(value1, value2);\n        }\n\n        return Optional.fromNullable(value1);\n    }\n\n    last(): Optional<T> {\n        if (!this.hasNext()) {\n            return Optional.absent;\n        }\n        return this.reduce((el1, el2) => el2);\n    }\n\n    first(): Optional<T> {\n        this.reset();\n        if (!this.hasNext()) {\n            return Optional.absent;\n        }\n        return Optional.fromNullable(this.next());\n    }\n\n    anyMatch(fn: Matchable<T>): boolean {\n        while (this.hasNext()) {\n            if (fn(this.next())) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    allMatch(fn: Matchable<T>): boolean {\n        while (this.hasNext()) {\n            if (!fn(this.next())) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    noneMatch(fn: Matchable<T>): boolean {\n        while (this.hasNext()) {\n            if (fn(this.next())) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    sort(comparator: Comparator<T>): IStream<T> {\n        let arr = this.collect(new ArrayCollector());\n        arr = arr.sort(comparator);\n        return LazyStream.of(...arr);\n    }\n\n    get value(): Array<T> {\n        return this.collect(new ArrayCollector<T>());\n    }\n\n    [Symbol.iterator]() : Iterator<T> {\n        return {\n            next: () => {\n                let done = !this.hasNext();\n                let val = this.next();\n                return {\n                    done: done,\n                    value: <T>val\n                }\n            }\n        }\n    }\n\n    /*get observable(): Observable<T> {\n        return from(this);\n    }*/\n\n    private stop() {\n        this.pos = this._limits + 1000000000;\n    }\n\n    private isOverLimits() {\n        return this._limits != -1 && this.pos >= this._limits - 1;\n    }\n\n}\n\n\n","/* Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Lang} from \"./Lang\";\nimport {DomQuery} from \"./DomQuery\";\nconst isString = Lang.isString;\n\ndeclare var ActiveXObject: (type: string) => void;\n\n/**\n * xml query as specialized case for DomQuery\n */\nexport class XMLQuery extends DomQuery {\n\n    constructor(rootNode: Document | string | DomQuery, docType: string = \"text/xml\") {\n\n        let createIe11DomQueryShim = (): DOMParser => {\n            //at the time if wroting ie11 is the only relevant browser\n            //left withut any DomQuery support\n            let parser = new ActiveXObject(\"Microsoft.XMLDOM\");\n            parser.async = false;\n            //we shim th dom parser from ie in\n            return <any>{\n                parseFromString: (text: string, contentType: string): Document => {\n                    return parser.loadXML(text);\n                }\n            }\n        };\n\n        let parseXML = (xml: string): Document => {\n            if (xml == null) {\n                return null;\n            }\n            let domParser: DOMParser = Lang.saveResolveLazy<DOMParser>(\n                () => new window.DOMParser(),\n                (): DOMParser => createIe11DomQueryShim()\n            ).value;\n            return domParser.parseFromString(xml, <any> docType);\n        };\n\n        if (isString(rootNode)) {\n            super(parseXML(<string>rootNode))\n        } else {\n            super(rootNode);\n        }\n    }\n\n    isXMLParserError(): boolean {\n        return this.querySelectorAll(\"parsererror\").isPresent();\n    }\n\n    toString(): string {\n        let ret = [];\n        this.eachElem((node: any) => {\n            let serialized = (<any>window)?.XMLSerializer?.constructor()?.serializeToString(node) ?? node?.xml;\n            if (!!serialized) {\n                ret.push(serialized);\n            }\n        });\n        return ret.join(\"\");\n    }\n\n    parserErrorText(joinstr: string): string {\n        return this.querySelectorAll(\"parsererror\").textContent(joinstr);\n    }\n\n    static parseXML(txt: string): XMLQuery {\n        return new XMLQuery(txt);\n    }\n\n    static parseHTML(txt: string): XMLQuery {\n        return new XMLQuery(txt, \"text/html\");\n    }\n\n    static fromString(txt: string, parseType: string = \"text/xml\"): XMLQuery {\n        return new XMLQuery(txt, parseType);\n    }\n}\n\nexport const XQ = XMLQuery;\nexport type XQ = XMLQuery;","export {DomQuery, ElementAttribute, DomQueryCollector, DQ} from \"./DomQuery\";\nexport {Lang} from \"./Lang\";\nexport {Config, Monad, IValueHolder, IFunctor, IMonad, IIdentity, Optional, ValueEmbedder} from \"./Monad\";\nexport {XMLQuery, XQ} from \"./XmlQuery\";\nexport {Stream, LazyStream, IteratableConsumer, IStream} from \"./Stream\";\nexport {\n    ArrayStreamDataSource,\n    MappedStreamDataSource,\n    FilteredStreamDatasource,\n    FlatMapStreamDataSource,\n    SequenceDataSource,\n    QueryFormStringCollector,\n    IStreamDataSource,\n    ICollector,\n    ArrayCollector,\n    AssocArrayCollector,\n    FormDataCollector,\n    QueryFormDataCollector\n} from \"./SourcesCollectors\";\n\n\n\n\n\n\n","/* Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n///<reference types='../../types/typedefs'/>\n\nimport {Implementation} from \"../impl/AjaxImpl\";\nimport {PushImpl} from \"../impl/PushImpl\";\n\nexport module jsf {\n    \"use strict\";\n\n    /*\n     * Version of the implementation for the jsf.js.\n     * <p />\n     * as specified within the jsf specifications jsf.html:\n     * <ul>\n     * <li>left two digits major release number</li>\n     * <li>middle two digits minor spec release number</li>\n     * <li>right two digits bug release number</li>\n     * </ul>\n     * @constant\n     */\n    export var specversion = 220000;\n    /**\n     * Implementation version as specified within the jsf specification.\n     * <p />\n     * A number increased with every implementation version\n     * and reset by moving to a new spec release number\n     *\n     * @constant\n     */\n    export var implversion = 0;\n\n    /**\n     * SeparatorChar as defined by UINamingContainer.getNamingContainerSeparatorChar()\n     * @type {Char}\n     */\n    export var separatorchar = getSeparatorChar();\n\n    /**\n     * This method is responsible for the return of a given project stage as defined\n     * by the jsf specification.\n     * <p/>\n     * Valid return values are:\n     * <ul>\n     *     <li>&quot;Production&quot;</li>\n     *     <li>&quot;Development&quot;</li>\n     *     <li>&quot;SystemTest&quot;</li>\n     *     <li>&quot;UnitTest&quot;</li>\n     * </li>\n     *\n     * @return {String} the current project state emitted by the server side method:\n     * <i>javax.faces.application.Application.getProjectStage()</i>\n     */\n    export function getProjectStage(): string {\n        return Implementation.getProjectStage();\n    }\n\n    /**\n     * collect and encode data for a given form element (must be of type form)\n     * find the javax.faces.ViewState element and encode its value as well!\n     * return a concatenated string of the encoded values!\n     *\n     * @throws an exception in case of the given element not being of type form!\n     * https://issues.apache.org/jira/browse/MYFACES-2110\n     */\n    export function getViewState(formElement: Element | string): string {\n        return Implementation.getViewState(formElement);\n    }\n\n    /**\n     * returns the window identifier for the given node / window\n     * @return the window identifier or null if none is found\n     * @param rootNode\n     */\n    export function getClientWindow(rootNode?: Element | string): string {\n        return Implementation.getClientWindow(rootNode);\n    }\n\n    //private helper functions\n    function getSeparatorChar() {\n        return Implementation.getSeparatorChar();\n    }\n\n\n    export module ajax {\n        \"use strict\";\n\n        /**\n         * this function has to send the ajax requests\n         *\n         * following requestInternal conditions must be met:\n         * <ul>\n         *  <li> the requestInternal must be sent asynchronously! </li>\n         *  <li> the requestInternal must be a POST!!! requestInternal </li>\n         *  <li> the requestInternal url must be the form action attribute </li>\n         *  <li> all requests must be queued with a client side requestInternal queue to ensure the requestInternal ordering!</li>\n         * </ul>\n         *\n         * @param {String|Node} element: any dom element no matter being it html or jsf, from which the event is emitted\n         * @param {EVENT} event: any javascript event supported by that object\n         * @param {Map} options : map of options being pushed into the ajax cycle\n         */\n        export function request(element: Element, event?: Event, options?: Context) {\n            Implementation.request(element, event, options)\n            //Implementation.getInstance().requestInternal(element, event, options);\n        }\n\n        /**\n         * response handler\n         * @param request the request object having triggered this response\n         * @param context the request context\n         *\n         * TODO add info on what can be in the context\n         */\n        export function response(request: XMLHttpRequest, context?: Context) {\n            Implementation.response(request, context);\n        }\n\n        /**\n         * Adds an error handler to our global error queue.\n         * the error handler must be of the format <i>function errorListener(&lt;errorData&gt;)</i>\n         * with errorData being of following format:\n         * <ul>\n         *     <li> errorData.type : &quot;error&quot;</li>\n         *     <li> errorData.status : the error status message</li>\n         *     <li> errorData.serverErrorName : the server error name in case of a server error</li>\n         *     <li> errorData.serverErrorMessage : the server error message in case of a server error</li>\n         *     <li> errorData.source  : the issuing source element which triggered the requestInternal </li>\n         *     <li> eventData.responseCode: the response code (aka http requestInternal response code, 401 etc...) </li>\n         *     <li> eventData.responseText: the requestInternal response text </li>\n         *     <li> eventData.responseXML: the requestInternal response xml </li>\n         * </ul>\n         *\n         * @param {function} errorListener error handler must be of the format <i>function errorListener(&lt;errorData&gt;)</i>\n         */\n        export function addOnError(errorFunc: (data: ErrorData) => void) {\n            Implementation.addOnError(<any>errorFunc);\n        }\n\n        /**\n         * Adds a global event listener to the ajax event queue. The event listener must be a function\n         * of following format: <i>function eventListener(&lt;eventData&gt;)</i>\n         *\n         * @param {function} eventListener event must be of the format <i>function eventListener(&lt;eventData&gt;)</i>\n         */\n        export function addOnEvent(eventFunc: (data: EventData) => void) {\n            Implementation.addOnEvent(<any>eventFunc);\n        }\n    }\n\n    export module util {\n\n        /**\n         * varargs function which executes a chain of code (functions or any other code)\n         *\n         * if any of the code returns false, the execution\n         * is terminated prematurely skipping the rest of the code!\n         *\n         * @param {DomNode} source, the callee object\n         * @param {Event} event, the event object of the callee event triggering this function\n         * @param funcs ... arbitrary array of functions or strings\n         * @returns true if the chain has succeeded false otherwise\n         */\n        export function chain(source, event, ...funcs: Array<Function | string>): boolean {\n            return Implementation.chain(source, event, ...(funcs as EvalFuncs));\n        }\n    }\n\n    export module push {\n        /**\n         * @param {function} onopen The function to be invoked when the web socket is opened.\n         * @param {function} onmessage The function to be invoked when a message is received.\n         * @param {function} onclose The function to be invoked when the web socket is closed.\n         * @param {boolean} autoconnect Whether or not to immediately open the socket. Defaults to <code>false</code>.\n         */\n        export function init(socketClientId: string,\n                    uri: string,\n                    channel: string,\n                    onopen: Function,\n                    onmessage: Function,\n                    onclose: Function,\n                    behaviorScripts: any,\n                    autoconnect: boolean) {\n            PushImpl.init(socketClientId, uri, channel, onopen, onmessage, onclose, behaviorScripts, autoconnect);\n        }\n\n        /**\n         * Open the web socket on the given channel.\n         * @param {string} channel The name of the web socket channel.\n         * @throws {Error} When channel is unknown.\n         */\n        export function open(socketClientId: string) {\n            PushImpl.open(socketClientId);\n        }\n\n        /**\n         * Close the web socket on the given channel.\n         * @param {string} channel The name of the web socket channel.\n         * @throws {Error} When channel is unknown.\n         */\n        export function close(socketClientId: string) {\n            PushImpl.close(socketClientId);\n        }\n\n    }\n\n    //We hook the old namespace system into our npm system\n    //if (\"undefined\" == window.jsf) {\n    //    window.jsf = jsf;\n    //}\n\n\n}\n\n\n\n//fullfill the window contract\nexport module myfaces {\n\n    /**\n     * AB function similar to mojarra and Primefaces\n     * not part of the spec but a convenience accessor method\n     * Code provided by Thomas Andraschko\n     *\n     * @param source the event source\n     * @param event the event\n     * @param eventName event name for java.javax.faces.behavior.evemnt\n     * @param execute execute list as passed down in jsf.ajax.request\n     * @param render\n     * @param options\n     */\n    export function ab(source: Element, event: Event, eventName: string, execute: string, render: string, options: Context = {}) {\n        if (eventName) {\n            options[\"javax.faces.behavior.event\"] = eventName;\n        }\n        if (execute) {\n            options[\"execute\"] = execute;\n        }\n        if (render) {\n            options[\"render\"] = render;\n        }\n\n        jsf.ajax.request(source, event, options);\n    }\n}\n\n\n","/* Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {IListener} from \"./util/ListenerQueue\";\nimport {Response} from \"./xhrCore/Response\";\nimport {XhrRequest} from \"./xhrCore/XhrRequest\";\nimport {AsynchronousQueue} from \"./util/AsyncQueue\";\nimport {AssocArrayCollector, Config, DQ, Lang, Optional, Stream} from \"mona-dish\";\nimport {Assertions} from \"./util/Assertions\";\nimport {XhrFormData} from \"./xhrCore/XhrFormData\";\nimport {ExtDomquery} from \"./util/ExtDomQuery\";\nimport {ErrorData} from \"./xhrCore/ErrorData\";\nimport {EventData} from \"./xhrCore/EventData\";\nimport {ExtLang} from \"./util/Lang\";\nimport {\n    CTX_PARAM_EXECUTE,\n    CTX_PARAM_PASS_THR,\n    CTX_PARAM_SRC_CTL_ID,\n    CTX_PARAM_SRC_FRM_ID,\n    CTX_PARAM_TR_TYPE,\n    IDENT_ALL,\n    IDENT_FORM,\n    IDENT_NONE,\n    IDENT_THIS,\n    MYFACES,\n    ON_ERROR,\n    ON_EVENT,\n    P_AJAX,\n    P_CLIENT_WINDOW,\n    P_EVT,\n    P_EXECUTE,\n    P_PARTIAL_SOURCE,\n    P_RENDER,\n    P_RESET_VALUES,\n    P_WINDOW_ID,\n    RENDER,\n    REQ_TYPE_POST,\n    SOURCE,\n    TAG_FORM\n} from \"./core/Const\";\nimport {\n    resolveDefaults,\n    resolveDelay,\n    resolveForm,\n    resolveTimeout\n} from \"./xhrCore/RequestDataResolver\";\n\n\ndeclare var jsf: any;\n\n/*\n * allowed project stages\n */\nenum ProjectStages {\n    Production = \"Production\",\n    Development = \"Development\",\n    SystemTest = \"SystemTest\",\n    UnitTest = \"UnitTest\"\n}\n\n/*\n *   blockfilter for the passthrough filtering; the attributes given here\n *   will not be transmitted from the options into the passthrough\n */\nenum BlockFilter {\n    onerror = \"onerror\",\n    onevent = \"onevent\",\n    render = \"render\",\n    execute = \"execute\",\n    myfaces = \"myfaces\",\n    delay = \"delay\",\n    timeout = \"timeout\",\n    windowId = \"windowId\"\n}\n\n/**\n * Core Implementation\n * to distinct between api and impl\n *\n * The original idea was to make the implementation pluggable\n * but this is pointless, you always can overwrite the thin api layer\n * however a dedicated api makes sense for readability reasons\n */\nexport module Implementation {\n\n    import trim = Lang.trim;\n    import getMessage = ExtLang.getMessage;\n    import getGlobalConfig = ExtLang.getGlobalConfig;\n    import assert = Assertions.assert;\n\n\n\n    let projectStage: string = null;\n    let separator: string = null;\n    let eventQueue = [];\n    let errorQueue = [];\n    export let requestQueue: AsynchronousQueue<XhrRequest> = null;\n    /*error reporting threshold*/\n    let threshold = \"ERROR\";\n\n    /**\n     * fetches the separator char from the given script tags\n     *\n     * @return {char} the separator char for the given script tags\n     */\n    export function getSeparatorChar(): string {\n        return resolveGlobalConfig()?.separator ??\n            this?.separator ??\n            (separator = ExtDomquery.searchJsfJsFor(/separator=([^&;]*)/).orElse(\":\").value);\n    }\n\n    /**\n     * this is for testing purposes only, since AjaxImpl is a module\n     * we need to reset for every unit test its internal states\n     */\n    export function reset() {\n        projectStage = null;\n        separator = null;\n        eventQueue = [];\n        errorQueue = [];\n        requestQueue = null;\n    }\n\n    /**\n     * @return the project stage also emitted by the server:\n     * it cannot be cached and must be delivered over the server\n     * The value for it comes from the requestInternal parameter of the jsf.js script called \"stage\".\n     */\n    export function getProjectStage(): string | null {\n        return resolveGlobalConfig()?.projectStage ??\n            this?.projectStage ??\n            (projectStage = resolveProjectStateFromURL());\n    }\n\n    /**\n     * resolves the project stage as url parameter\n     * @return the project stage or null\n     */\n    export function resolveProjectStateFromURL(): string | null {\n\n        /* run through all script tags and try to find the one that includes jsf.js */\n        let foundStage = <string>ExtDomquery.searchJsfJsFor(/stage=([^&;]*)/).value;\n        return (foundStage in ProjectStages) ? foundStage : null;\n    }\n\n    /**\n     * implementation of the jsf.util.chain functionality\n     *\n     * @param source\n     * @param event\n     * @param funcs\n     */\n    export function chain(source: any, event: Event, ...funcs: EvalFuncs): boolean {\n\n        let ret = true;\n        let resolveAndExecute = function (func: Function | string) {\n            if (\"string\" != typeof func) {\n                //function is passed down as chain parameter, can be executed as is\n                return (ret = ret && ((<Function>func).call(source, event) !== false));\n            } else {\n                //either a function or a string can be passed in case of a string we have to wrap it into another function\n                //it it is not a plain executable code but a definition\n                let sourceCode = trim(<string>func);\n                if (sourceCode.indexOf(\"function \") == 0) {\n                    sourceCode = `return ${sourceCode} (event)`;\n                }\n                return (ret = ret && (new Function(\"event\", sourceCode).call(source, event) !== false));\n            }\n        };\n\n        //we can use our stream each functionality to run our chain here..\n        //the no return value == false stop stream functionality is handled by our resolveAndExecute\n        <any>Stream.of(...funcs).each(func => resolveAndExecute(func));\n        return ret;\n    }\n\n    /**\n     * this function has to send the ajax requests\n     *\n     * following request conditions must be met:\n     * <ul>\n     *  <li> the request must be sent asynchronously! </li>\n     *  <li> the request must be a POST!!! request </li>\n     *  <li> the request url must be the form action attribute </li>\n     *  <li> all requests must be queued with a client side request queue to ensure the request ordering!</li>\n     * </ul>\n     *\n     * @param el any dom element no matter being it html or jsf, from which the event is emitted\n     * @param event any javascript event supported by that object\n     * @param opts  map of options being pushed into the ajax cycle\n     *\n     * a) transformArguments out of the function\n     * b) passThrough handling with a map copy with a filter map block map\n     */\n    export function request(el: ElemDef, event?: Event, opts ?: Options) {\n\n        const {\n            resolvedEvent,\n            options,\n            elem,\n            elementId,\n            requestCtx,\n            internalCtx,\n            windowId,\n            isResetValues\n        } = resolveDefaults(event, opts, el);\n\n        Assertions.assertRequestIntegrity(options, elem);\n\n        requestCtx.assignIf(!!windowId, P_WINDOW_ID).value = windowId;\n\n        requestCtx.assign(CTX_PARAM_PASS_THR).value = filterPassthroughValues(options.value);\n\n        requestCtx.assignIf(!!resolvedEvent, CTX_PARAM_PASS_THR, P_EVT).value = resolvedEvent?.type;\n\n        /**\n         * ajax pass through context with the source\n         * onresolvedEvent and onerror\n         */\n        requestCtx.assign(SOURCE).value = elementId.value;\n\n        /**\n         * on resolvedEvent and onError...\n         * those values will be traversed later on\n         * also into the response context\n         */\n        requestCtx.assign(ON_EVENT).value = options.value?.onevent;\n        requestCtx.assign(ON_ERROR).value = options.value?.onerror;\n\n        /**\n         * lets drag the myfaces config params also in\n         */\n        requestCtx.assign(MYFACES).value = options.value?.myfaces;\n        /**\n         * fetch the parent form\n         *\n         * note we also add an override possibility here\n         * so that people can use dummy forms and work\n         * with detached objects\n         */\n        let form: DQ = resolveForm(requestCtx, elem, resolvedEvent);\n\n        /**\n         * binding contract the javax.faces.source must be set\n         */\n        requestCtx.assign(CTX_PARAM_PASS_THR, P_PARTIAL_SOURCE).value = elementId.value;\n\n        /**\n         * javax.faces.partial.ajax must be set to true\n         */\n        requestCtx.assign(CTX_PARAM_PASS_THR, P_AJAX).value = true;\n\n        /**\n         * binding contract the javax.faces.source must be set\n         */\n        requestCtx.assign(CTX_PARAM_PASS_THR, P_PARTIAL_SOURCE).value = elementId.value;\n\n        /**\n         * if resetValues is set to true\n         * then we have to set javax.faces.resetValues as well\n         * as pass through parameter\n         * the value has to be explicitly true, according to\n         * the specs jsdoc\n         */\n        requestCtx.assignIf(isResetValues, CTX_PARAM_PASS_THR, P_RESET_VALUES).value = true;\n\n        //additional meta information to speed things up, note internal non jsf\n        //pass through options are stored under _mfInternal in the context\n        internalCtx.assign(CTX_PARAM_SRC_FRM_ID).value = form.id.value;\n        internalCtx.assign(CTX_PARAM_SRC_CTL_ID).value = elementId.value;\n        internalCtx.assign(CTX_PARAM_TR_TYPE).value = REQ_TYPE_POST;\n\n        //mojarra compatibility, mojarra is sending the form id as well\n        //this is not documented behavior but can be determined by running\n        //mojarra under blackbox conditions\n        //i assume it does the same as our formId_submit=1 so leaving it out\n        //wont hurt but for the sake of compatibility we are going to add it\n\n        requestCtx.assign(CTX_PARAM_PASS_THR, form.id.value).value = form.id.value;\n\n        assignClientWindowId(form, requestCtx);\n\n        assignExecute(options, requestCtx, form, elementId.value);\n        assignRender(options, requestCtx, form, elementId.value);\n\n        let delay: number = resolveDelay(options);\n        let timeout: number = resolveTimeout(options);\n\n        //now we enqueue the request as asynchronous runnable into our request\n        //queue and let the queue take over the rest\n        queueHandler.addRequestToQueue(elem, form, requestCtx, internalCtx, delay, timeout);\n    }\n\n    /**\n     * Spec. 13.3.3\n     * Examining the response markup and updating the DOM tree\n     * @param {XMLHttpRequest} request - the ajax request\n     * @param {Object} context - the ajax context\n     */\n    export function response(request: XMLHttpRequest, context: Context) {\n        Response.processResponse(request, context);\n    }\n\n    /**\n     * adds an error handler to the error queue\n     *\n     * @param errorListener the error listener handler\n     */\n    export function addOnError(errorListener: IListener<ErrorData>) {\n        /*error handling already done in the assert of the queue*/\n        errorQueue.push(errorListener);\n    }\n\n    /**\n     * adds an event handler to the event queue\n     *\n     * @param eventListener the event listener handler\n     */\n    export function addOnEvent(eventListener: IListener<EventData>) {\n        /*error handling already done in the assert of the queue*/\n        eventQueue.push(eventListener);\n    }\n\n    // noinspection JSUnusedLocalSymbols\n    /**\n     * sends an event to the event handlers\n     *\n     * @param data the event data object hosting the event data according to the spec @see EventData for what is reachable\n     * @param localHandler an optional event handler, which is processed before the event handler chain\n     */\n    export function sendEvent(data: EventData, localHandler = function (data: EventData) {\n    }) {\n        /*now we serve the queue as well*/\n        localHandler(data);\n        eventQueue.forEach(fn => fn(data));\n    }\n\n    /**\n     * error handler behavior called internally\n     * and only into the impl it takes care of the\n     * internal message transformation to a myfaces internal error\n     * and then uses the standard send error mechanisms\n     * also a double error logging prevention is done as well\n     *\n     * @param request the request currently being processed\n     * @param context the context affected by this error\n     * @param exception the exception being thrown\n     * @param clearRequestQueue if set to true, clears the request queue of all pending requests\n     */\n    export function stdErrorHandler(request: XMLHttpRequest,\n                                    context: Config,\n                                    exception: any,\n                                    clearRequestQueue = false) {\n        //newer browsers do not allow to hold additional values on native objects like exceptions\n        //we hence capsule it into the request, which is gced automatically\n        //on ie as well, since the stdErrorHandler usually is called between requests\n        //this is a valid approach\n        try {\n            if (threshold == \"ERROR\") {\n                let errorData = ErrorData.fromClient(exception);\n                sendError(errorData);\n            }\n        } finally {\n            if (clearRequestQueue) {\n                requestQueue.cleanup();\n            }\n        }\n    }\n\n    // noinspection JSUnusedLocalSymbols\n    /**\n     * implementation triggering the error chain\n     *\n     *\n     *\n     *  handles the errors, in case of an onError exists within the context the onError is called as local error handler\n     *  the registered error handlers in the queue received an error message to be dealt with\n     *  and if the projectStage is at development an alert box is displayed\n     *\n     *  note: we have additional functionality here, via the global config myfaces.config.defaultErrorOutput a function can be provided\n     *  which changes the default output behavior from alert to something else\n     *\n     * @param errorData the error data to be displayed\n     * @param localHandler an optional local error handler which has to be processed before the error handler queue\n     */\n    export function sendError(errorData: ErrorData, localHandler = function (data: any) {\n    }) {\n\n        localHandler(errorData);\n        errorQueue.forEach((errorCallback: Function) => {\n            errorCallback(errorData);\n        });\n        let displayError: (string) => void = getGlobalConfig(\"defaultErrorOutput\", (console ? console.error : alert));\n        displayError(errorData);\n    }\n\n    /**\n     * @node optional element or id defining a rootnode where an element with the id \"javax.faces.windowId\" is hosted\n     * @return the client window id of the current window, if one is given if none is found, null is returned\n     */\n    export function getClientWindow(node ?: Element | string): string | null {\n        const ALTERED = \"___mf_id_altered__\";\n        const INIT = \"___init____\";\n\n        /**\n         * the search root for the dom element search\n         */\n        let searchRoot = new DQ(node || document.body).querySelectorAll(`form input [name='${P_CLIENT_WINDOW}']`);\n\n        /**\n         * lazy helper to fetch the window id from the window url\n         */\n        let fetchWindowIdFromUrl = () => ExtDomquery.searchJsfJsFor(/jfwid=([^&;]*)/).orElse(null).value;\n\n        /**\n         * functional double check based on stream reduction\n         * the values should be identical or on INIT value which is a premise to\n         * skip the first check\n         *\n         * @param value1\n         * @param value2\n         */\n        let differenceCheck = (value1: string, value2: string) => {\n            if(value1 == INIT) {\n                return value2;\n            } else if (value1 == ALTERED || value1 != value2) {\n                return ALTERED;\n            }\n            return value2;\n        };\n\n        /**\n         * helper for cleaner code, maps the value from an item\n         *\n         * @param item\n         */\n        let getValue = (item: DQ) => item.attr(\"value\").value;\n        /**\n         * fetch the window id from the forms\n         * window ids must be present in all forms\n         * or non existent. If they exist all of them must be the same\n         */\n\n        let formWindowId: Optional<string> = searchRoot.stream.map<string>(getValue).reduce(differenceCheck, INIT);\n\n\n        //if the resulting window id is set on altered then we have an unresolvable problem\n        assert(ALTERED != formWindowId.value, \"Multiple different windowIds found in document\");\n\n        /**\n         * return the window id or null\n         * prio, forms under node/document and if not given then from the url\n         */\n        return formWindowId.value != INIT ? formWindowId.value : fetchWindowIdFromUrl();\n    }\n\n    /**\n     * collect and encode data for a given form element (must be of type form)\n     * find the javax.faces.ViewState element and encode its value as well!\n     * @return a concatenated string of the encoded values!\n     *\n     * @throws Error in case of the given element not being of type form!\n     * https://issues.apache.org/jira/browse/MYFACES-2110\n     */\n    export function getViewState(form: Element | string): string {\n        /**\n         *  typecheck assert!, we opt for strong typing here\n         *  because it makes it easier to detect bugs\n         */\n\n        let element: DQ = DQ.byId(form, true);\n        if (!element.isTag(TAG_FORM)) {\n            throw new Error(getMessage(\"ERR_VIEWSTATE\"));\n        }\n\n        let formData = new XhrFormData(element);\n        return formData.toString();\n    }\n\n    /**\n     * this at the first sight looks like a weird construct, but we need to do it this way\n     * for testing, we cannot proxy addRequestToQueue from the testing frameworks directly\n     * but we need to keep it under unit tests.\n     */\n    export let queueHandler = {\n        /**\n         * public to make it shimmable for tests\n         *\n         * adds a new request to our queue for further processing\n         */\n        addRequestToQueue: function (elem: DQ, form: DQ, reqCtx: Config, respPassThr: Config, delay = 0, timeout = 0) {\n            requestQueue = requestQueue ?? new AsynchronousQueue<XhrRequest>();\n            requestQueue.enqueue(new XhrRequest(elem, form, reqCtx, respPassThr, [], timeout), delay);\n        }\n    };\n\n    //----------------------------------------------- Methods ---------------------------------------------------------------------\n\n    /**\n     * the idea is to replace some placeholder parameters with their respective values\n     * placeholder params like  @all, @none, @form, @this need to be replaced by\n     * the values defined by the specification\n     *\n     * This function does it for the render parameters\n     *\n     * @param requestOptions the source options coming in as options object from jsf.ajax.request (options parameter)\n     * @param targetContext the receiving target context\n     * @param issuingForm the issuing form\n     * @param sourceElementId the executing element triggering the jsf.ajax.request (id of it)\n     */\n    function assignRender(requestOptions: Config, targetContext: Config, issuingForm: DQ, sourceElementId: string) {\n        if (requestOptions.getIf(RENDER).isPresent()) {\n            remapDefaultConstants(targetContext.getIf(CTX_PARAM_PASS_THR).get({}), P_RENDER, <string>requestOptions.getIf(RENDER).value, issuingForm, <any>sourceElementId);\n        }\n    }\n\n    /**\n     * the idea is to replace some placeholder parameters with their respective values\n     * placeholder params like  @all, @none, @form, @this need to be replaced by\n     * the values defined by the specification\n     *\n     * This function does it for the execute parameters\n     *\n     * @param requestOptions the source options coming in as options object from jsf.ajax.request (options parameter)\n     * @param targetContext the receiving target context\n     * @param issuingForm the issuing form\n     * @param sourceElementId the executing element triggering the jsf.ajax.request (id of it)\n     */\n    function assignExecute(requestOptions: Config, targetContext: Config, issuingForm: DQ, sourceElementId: string) {\n\n        if (requestOptions.getIf(CTX_PARAM_EXECUTE).isPresent()) {\n            /*the options must be a blank delimited list of strings*/\n            /*compliance with Mojarra which automatically adds @this to an execute\n             * the spec rev 2.0a however states, if none is issued nothing at all should be sent down\n             */\n            requestOptions.assign(CTX_PARAM_EXECUTE).value = [requestOptions.getIf(CTX_PARAM_EXECUTE).value, IDENT_THIS].join(\" \");\n            remapDefaultConstants(targetContext.getIf(CTX_PARAM_PASS_THR).get({}), P_EXECUTE, <string>requestOptions.getIf(CTX_PARAM_EXECUTE).value, issuingForm, <any>sourceElementId);\n        } else {\n            targetContext.assign(CTX_PARAM_PASS_THR, P_EXECUTE).value = sourceElementId;\n        }\n    }\n\n    /**\n     * apply the browser tab where the request was originating from\n     *\n     * @param form the form hosting the client window id\n     * @param targetContext the target context receiving the value\n     */\n    function assignClientWindowId(form: DQ, targetContext: Config) {\n        let clientWindow = jsf.getClientWindow(form.getAsElem(0).value);\n        if (clientWindow) {\n            targetContext.assign(CTX_PARAM_PASS_THR, P_CLIENT_WINDOW).value = clientWindow;\n        }\n    }\n\n    /**\n     * transforms the user values to the expected one\n     * with the proper none all form and this handling\n     * (note we also could use a simple string replace but then\n     * we would have had double entries under some circumstances)\n     *\n     * there are several standardized constants which need a special treatment\n     * like @all, @none, @form, @this\n     *\n     * @param targetConfig the target configuration receiving the final values\n     * @param targetKey the target key\n     * @param userValues the passed user values (aka input string which needs to be transformed)\n     * @param issuingForm the form where the issuing element originates\n     * @param issuingElementId the issuing element\n     */\n    function remapDefaultConstants(targetConfig: Config, targetKey: string, userValues: string, issuingForm: DQ, issuingElementId: string): Config {\n        //a cleaner implementation of the transform list method\n\n        let iterValues = (userValues) ? trim(userValues).split(/\\s+/gi) : [];\n        let ret = [];\n        let processed = {};\n\n        //the idea is simply to loop over all values and then replace\n        //their generic values and filter out doubles\n        //this is more readable than the old indexed based solution\n        //and not really slower because we had to build up the index in our old solution\n        //anyway\n        for (let cnt = 0; cnt < iterValues.length; cnt++) {\n            //avoid doubles\n            if (iterValues[cnt] in processed) {\n                continue;\n            }\n            switch (iterValues[cnt]) {\n                //@none no values should be sent\n                case IDENT_NONE:\n                    return targetConfig.delete(targetKey);\n                //@all is a pass through case according to the spec\n                case IDENT_ALL:\n                    targetConfig.assign(targetKey).value = IDENT_ALL;\n                    return targetConfig;\n                //@form pushes the issuing form id into our list\n                case IDENT_FORM:\n                    ret.push(issuingForm.id.value);\n                    processed[issuingForm.id.value] = true;\n                    break;\n                //@this is replaced with the current issuing element id\n                case IDENT_THIS:\n                    if (!(issuingElementId in processed)) {\n                        ret.push(issuingElementId);\n                        processed[issuingElementId] = true;\n                    }\n                    break;\n                default:\n                    ret.push(iterValues[cnt]);\n                    processed[iterValues[cnt]] = true;\n            }\n        }\n        //We now add the target as joined list\n        targetConfig.assign(targetKey).value = ret.join(\" \");\n        return targetConfig;\n    }\n\n    /**\n     * filter the options given with a blacklist so that only\n     * the values required for passthough land in the ajax request\n     *\n     * @param {Context} mappedOpts the options to be filtered\n     */\n    function filterPassthroughValues(mappedOpts: Context): Context {\n        //we now can use the full code reduction given by our stream api\n        //to filter\n        return Stream.ofAssoc(mappedOpts)\n            .filter(item => !(item[0] in BlockFilter))\n            .collect(new AssocArrayCollector());\n    }\n\n    function resolveGlobalConfig(): any {\n        return  window?.[MYFACES]?.config ?? {};\n    }\n\n}\n","/**\n * Typescript port of the jsf.push part in the myfaces implementation\n */\n\n//TODO still work in progress\n//this is a 1:1 port for the time being\nimport {jsf} from \"../api/Jsf\";\nimport {MAX_RECONNECT_ATTEMPTS, REASON_EXPIRED, RECONNECT_INTERVAL} from \"./core/Const\";\n\n\n/**\n * Implementation class for the push functionality\n */\nexport module PushImpl {\n\n\n\n    const URL_PROTOCOL = window.location.protocol.replace(\"http\", \"ws\") + \"//\";\n\n\n    //we expose the member variables for testing purposes\n    //they are not directly touched outside of tests\n\n    /* socket map by token */\n    export let sockets = {};\n    /* component attributes by clientId */\n    export let components = {};\n    /* client ids by token (share websocket connection) */\n    export let clientIdsByTokens = {};\n\n\n    //needed for testing\n    export function reset() {\n        sockets = {};\n        components = {}\n        clientIdsByTokens = {}\n    }\n\n    /*\n     * Api implementations, exposed functions\n     */\n\n    /**\n     *\n     * @param {function} onopen The function to be invoked when the web socket is opened.\n     * @param {function} onmessage The function to be invoked when a message is received.\n     * @param {function} onclose The function to be invoked when the web socket is closed.\n     * @param {boolean} autoconnect Whether or not to immediately open the socket. Defaults to <code>false</code>.\n     */\n    export function init(socketClientId: string,\n                         uri: string,\n                         channel: string,\n                         onopen: Function,\n                         onmessage: Function,\n                         onclose: Function,\n                         behaviorScripts: any,\n                         autoconnect: boolean) {\n        onclose = resolveFunction(onclose);\n\n        if (!window.WebSocket) { // IE6-9.\n            onclose(-1, channel);\n            return;\n        }\n\n        let channelToken = uri.substr(uri.indexOf('?') + 1);\n\n        if (!components[socketClientId]) {\n            components[socketClientId] = {\n                'channelToken': channelToken,\n                'onopen': resolveFunction(onopen),\n                'onmessage' : resolveFunction(onmessage),\n                'onclose': onclose,\n                'behaviors': behaviorScripts,\n                'autoconnect': autoconnect};\n            if (!clientIdsByTokens[channelToken]) {\n                clientIdsByTokens[channelToken] = [];\n            }\n            clientIdsByTokens[channelToken].push(socketClientId);\n            if (!sockets[channelToken]){\n                sockets[channelToken] = new Socket(channelToken,\n                    getBaseURL(uri), channel);\n            }\n        }\n\n        if (autoconnect) {\n            jsf.push.open(socketClientId);\n        }\n    }\n\n    export function open(socketClientId: string) {\n        getSocket(components?.[socketClientId]?.channelToken).open();\n    }\n\n    export function close(socketClientId: string) {\n        getSocket(components?.[socketClientId].channelToken).close();\n    }\n\n    // Private helper classes\n    // Private classes functions ----------------------------------------------------------------------------------\n    /**\n     * Creates a reconnecting web socket. When the web socket successfully connects on first attempt, then it will\n     * automatically reconnect on timeout with cumulative intervals of 500ms with a maximum of 25 attempts (~3 minutes).\n     * The <code>onclose</code> function will be called with the error code of the last attempt.\n     * @constructor\n     * @param {string} channelToken the channel token associated with this websocket connection\n     * @param {string} url The URL of the web socket\n     * @param {string} channel The name of the web socket channel.\n     */\n\n    class Socket {\n\n        socket: WebSocket;\n        reconnectAttempts = 0;\n\n        constructor(private channelToken: string, private url: string, private channel: string) {\n        }\n\n        open() {\n            if (this.socket && this.socket.readyState == 1) {\n                return;\n            }\n            this.socket = new WebSocket(this.url);\n\n            this.bindCallbacks();\n        }\n\n        onopen(event: any) {\n            if (!this.reconnectAttempts) {\n                let clientIds = clientIdsByTokens[this.channelToken];\n                for (let i = clientIds.length - 1; i >= 0; i--) {\n                    let socketClientId = clientIds[i];\n                    components[socketClientId]['onopen'](this.channel);\n                }\n            }\n            this.reconnectAttempts = 0;\n        }\n\n        onmmessage(event: any) {\n            let message = JSON.parse(event.data);\n            for (let i = clientIdsByTokens[this.channelToken].length - 1; i >= 0; i--) {\n                let socketClientId = clientIdsByTokens[this.channelToken][i];\n                if (document.getElementById(socketClientId)) {\n                    try {\n                        components[socketClientId]['onmessage'](message, this.channel, event);\n                    } catch (e) {\n                        //Ignore\n                    }\n                    let behaviors = components[socketClientId]['behaviors'];\n                    let functions = behaviors[message];\n                    if (functions && functions.length) {\n                        for (let j = 0; j < functions.length; j++) {\n                            try {\n                                functions[j](null);\n                            } catch (e) {\n                                //Ignore\n                            }\n                        }\n                    }\n                } else {\n                    clientIdsByTokens[this.channelToken].splice(i, 1);\n                }\n            }\n            if (clientIdsByTokens[this.channelToken].length == 0) {\n                //tag dissapeared\n                this.close();\n            }\n        }\n\n        onclose(event: any) {\n            if (!this.socket\n                || (event.code == 1000 && event.reason == REASON_EXPIRED)\n                || (event.code == 1008)\n                || (!this.reconnectAttempts)\n                || (this.reconnectAttempts >= MAX_RECONNECT_ATTEMPTS)) {\n                let clientIds = clientIdsByTokens[this.channelToken];\n                for (let i = clientIds.length - 1; i >= 0; i--) {\n                    let socketClientId = clientIds[i];\n                    components[socketClientId]['onclose'](event?.code, this?.channel, event);\n                }\n            } else {\n                setTimeout(this.open, RECONNECT_INTERVAL * this.reconnectAttempts++);\n            }\n        };\n\n        close() {\n            if (this.socket) {\n                let s = this.socket;\n                this.socket = null;\n                s.close();\n            }\n        }\n\n        /**\n         * bind the callbacks to the socket callbacks\n         */\n        private bindCallbacks() {\n            this.socket.onopen = (event: Event) => this.onopen(event);\n            this.socket.onmessage = (event: Event) => this.onmmessage(event);\n            this.socket.onclose = (event: Event) => this.onclose(event);\n        }\n    }\n\n    // Private static functions ---------------------------------------------------------------------------------------\n\n    function getBaseURL(url: string) {\n        if (url.indexOf(\"://\") < 0) {\n            let base = window.location.hostname + \":\" + window.location.port;\n            return URL_PROTOCOL + base + url;\n        } else {\n            return url;\n        }\n    }\n\n    /**\n     * Get socket associated with given channelToken.\n     * @param {string} channelToken The name of the web socket channelToken.\n     * @return {Socket} Socket associated with given channelToken.\n     * @throws {Error} When channelToken is unknown, you may need to initialize\n     *                 it first via <code>init()</code> function.\n     */\n    function getSocket(channelToken: string): Socket {\n        let socket = sockets[channelToken];\n        if (socket) {\n            return socket;\n        } else {\n            throw new Error(\"Unknown channelToken: \" + channelToken);\n        }\n    }\n\n    function resolveFunction(fn: Function | string = () => {\n    }): Function {\n        return <Function>((typeof fn !== \"function\") && (fn = window[fn]), fn);\n    }\n\n}","/* Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/*\n * [export const] constants\n */\n\nexport const P_PARTIAL_SOURCE = \"javax.faces.source\";\nexport const PARTIAL_ID = \"partialId\";\nexport const P_VIEWSTATE = \"javax.faces.ViewState\";\nexport const P_VIEWROOT = \"javax.faces.ViewRoot\";\nexport const P_VIEWHEAD = \"javax.faces.ViewHead\";\nexport const P_VIEWBODY = \"javax.faces.ViewBody\";\n\n/*some useful definitions*/\n\nexport const EMPTY_FUNC = Object.freeze(() => {\n});\nexport const EMPTY_STR = \"\";\nexport const EMPTY_MAP = Object.freeze({});\n\nexport const HTML_VIEWSTATE = [\"<input type='hidden'\", \"id='\", P_VIEWSTATE, \"' name='\", P_VIEWSTATE, \"' value='' />\"].join(EMPTY_STR);\n\n\n/*internal identifiers for options*/\nexport const IDENT_ALL = \"@all\";\nexport const IDENT_NONE = \"@none\";\nexport const IDENT_THIS = \"@this\";\nexport const IDENT_FORM = \"@form\";\n\n\nexport const P_AJAX = \"javax.faces.partial.ajax\";\nexport const P_EXECUTE = \"javax.faces.partial.execute\";\nexport const P_RENDER = \"javax.faces.partial.render\";\nexport const P_EVT = \"javax.faces.partial.event\";\nexport const P_CLIENT_WINDOW = \"javax.faces.ClientWindow\";\nexport const P_RESET_VALUES = \"javax.faces.partial.resetValues\";\n\nexport const P_WINDOW_ID = \"javax.faces.windowId\";\n\nexport const RENDER = \"render\";\nexport const WINDOW_ID = \"windowId\";\n\n/* message types */\nexport const ERROR = \"error\";\nexport const EVENT = \"event\";\n\nexport const ON_ERROR = \"onerror\";\nexport const ON_EVENT = \"onevent\";\n\n/* event emitting stages */\nexport const BEGIN = \"begin\";\nexport const COMPLETE = \"complete\";\nexport const SUCCESS = \"success\";\n\nexport const SOURCE = \"source\";\nexport const STATUS = \"status\";\n\n\nexport const ERROR_NAME = \"error-name\";\nexport const ERROR_MESSAGE = \"error-message\";\n\n\nexport const RESPONSE_TEXT = \"responseText\";\nexport const RESPONSE_XML = \"responseXML\";\n\n/*ajax errors spec 14.4.2*/\nexport const HTTPERROR = \"httpError\";\nexport const EMPTY_RESPONSE = \"emptyResponse\";\nexport const MALFORMEDXML = \"malformedXML\";\nexport const SERVER_ERROR = \"serverError\";\nexport const CLIENT_ERROR = \"clientError\";\nexport const TIMEOUT_EVENT = \"timeout\";\n\nexport const CTX_PARAM_MF_INTERNAL = \"_mfInternal\";\n\nexport const CTX_PARAM_SRC_FRM_ID = \"_mfSourceFormId\";\nexport const CTX_PARAM_SRC_CTL_ID = \"_mfSourceControlId\";\nexport const CTX_PARAM_TR_TYPE = \"_mfTransportType\";\nexport const CTX_PARAM_PASS_THR = \"passThrgh\";\nexport const CTX_PARAM_DELAY = \"delay\";\nexport const CTX_PARAM_TIMEOUT = \"timeout\";\nexport const CTX_PARAM_RST = \"resetValues\";\nexport const CTX_PARAM_EXECUTE = \"execute\";\n\nexport const STAGE_DEVELOPMENT = \"Development\";\n\n\nexport const CONTENT_TYPE = \"Content-Type\";\nexport const HEAD_FACES_REQ = \"Faces-Request\";\nexport const REQ_ACCEPT = \"Accept\";\nexport const VAL_AJAX = \"partial/ajax\";\nexport const ENCODED_URL = \"javax.faces.encodedURL\";\nexport const REQ_TYPE_GET = \"GET\";\nexport const REQ_TYPE_POST = \"POST\";\nexport const STATE_EVT_BEGIN = \"begin\"; //TODO remove this\nexport const STATE_EVT_TIMEOUT = \"TIMEOUT_EVENT\";\nexport const STATE_EVT_COMPLETE = \"complete\"; //TODO remove this\nexport const URL_ENCODED = \"application/x-www-form-urlencoded\";\nexport const MULTIPART = \"multipart/form-data\";\nexport const NO_TIMEOUT = 0;\nexport const STD_ACCEPT = \"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\";\n\nexport const TAG_HEAD = \"head\";\nexport const TAG_FORM = \"form\";\nexport const TAG_BODY = \"body\";\nexport const TAG_BEFORE = \"before\";\nexport const TAG_AFTER = \"after\";\n\nexport const TAG_ATTR = \"attribute\";\n\n\nexport const SEL_VIEWSTATE_ELEM = \"[name='\" + P_VIEWSTATE + \"']\";\nexport const SEL_CLIENT_WINDOW_ELEM = \"[name='\" + P_CLIENT_WINDOW + \"']\";\nexport const SEL_RESPONSE_XML = \"responseXML\";\n\nexport const PHASE_PROCESS_RESPONSE = \"processResponse\";\n\n\nexport const ERR_NO_PARTIAL_RESPONSE = \"Partial response not set\";\n\nexport const ATTR_URL = \"url\";\nexport const ATTR_NAME = \"name\";\nexport const ATTR_VALUE = \"value\";\nexport const ATTR_ID = \"id\";\n\n/*partial response types*/\nexport const RESP_PARTIAL = \"partial-response\";\n\n/*partial commands*/\nexport const CMD_CHANGES = \"changes\";\nexport const CMD_UPDATE = \"update\";\nexport const CMD_DELETE = \"delete\";\nexport const CMD_INSERT = \"insert\";\nexport const CMD_EVAL = \"eval\";\nexport const CMD_ERROR = \"error\";\nexport const CMD_ATTRIBUTES = \"attributes\";\nexport const CMD_EXTENSION = \"extension\";\nexport const CMD_REDIRECT = \"redirect\";\n\n/*other constants*/\n\nexport const UPDATE_FORMS = \"_updateForms\";\nexport const UPDATE_ELEMS = \"_updateElems\";\n\nexport const MYFACES = \"myfaces\";\n\nexport const SEL_SCRIPTS_STYLES = \"script, style, link\";\n\nexport const MF_NONE = \"__mf_none__\";\n\nexport const REASON_EXPIRED = \"Expired\";\n\nexport const APPLIED_VST = \"appliedViewState\";\nexport const APPLIED_CLIENT_WINDOW = \"appliedClientWindow\";\n\nexport const RECONNECT_INTERVAL = 500;\nexport const MAX_RECONNECT_ATTEMPTS = 25;\n\nexport const UNKNOWN = \"UNKNOWN\";\n","/* Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {EMPTY_STR, P_VIEWSTATE} from \"./Const\";\n\nexport interface IdValueHolder {\n\n    readonly id: string;\n    readonly value: string;\n\n}\n\n/**\n * a helper class to isolate the\n * view state and client window and other\n * future states which follow a similar pattern\n */\nexport class StateHolder implements IdValueHolder {\n\n    nameSpace: string;\n\n    constructor(public id: string, public value: string) {\n        let viewStatePos = id.indexOf(P_VIEWSTATE);\n        this.nameSpace = viewStatePos > 0 ? id.substr(0, viewStatePos - 1) : EMPTY_STR;\n    }\n\n    get hasNameSpace(): boolean {\n        return !!(this?.nameSpace ?? EMPTY_STR).length;\n    }\n}\n","/* Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport class Messages {\n    MSG_TEST = \"Testmessage\";\n\n    /*Messages*/\n    /** @constant */\n    MSG_DEV_MODE = \"Note, this message is only sent, because project stage is development and no \" +\n        \"other error listeners are registered.\";\n    /** @constant */\n    MSG_AFFECTED_CLASS = \"Affected Class=\";\n    /** @constant */\n    MSG_AFFECTED_METHOD = \"Affected Method=\";\n    /** @constant */\n    MSG_ERROR_NAME = \"Error Name=\";\n    /** @constant */\n    MSG_ERROR_MESSAGE = \"Error Message=\";\n    /** @constant */\n    MSG_SERVER_ERROR_NAME = \"Server Error Name=\";\n\n    /** @constant */\n    MSG_ERROR_DESC = \"Error Description=\";\n    /** @constant */\n    MSG_ERROR_NO = \"Error Number=\";\n    /** @constant */\n    MSG_ERROR_LINENO = \"Error Line Number=\";\n\n    /*Errors and messages*/\n    /** @constant */\n    ERR_FORM = \"Sourceform could not be determined, either because element is not attached to a form or we have multiple forms with named elements of the same identifier or name, stopping the ajax processing\";\n    /** @constant */\n    ERR_VIEWSTATE = \"jsf.viewState= param value not of type form!\";\n    /** @constant */\n    ERR_TRANSPORT = \"Transport type {0} does not exist\";\n    /** @constant */\n    ERR_EVT_PASS = \"an event must be passed down (either a an event object null or undefined) \";\n    /** @constant */\n    ERR_CONSTRUCT = \"Parts of the response couldn't be retrieved when constructing the event data= {0} \";\n    /** @constant */\n    ERR_MALFORMEDXML = \"The server response could not be parsed, the server has returned with a response which is not xml !\";\n    /** @constant */\n    ERR_SOURCE_FUNC = \"source cannot be a function (probably source and event were not defined or set to null\";\n    /** @constant */\n    ERR_EV_OR_UNKNOWN = \"An event object or unknown must be passed as second parameter\";\n    /** @constant */\n    ERR_SOURCE_NOSTR = \"source cannot be a string\";\n    /** @constant */\n    ERR_SOURCE_DEF_NULL = \"source must be defined or null\";\n\n    //_Lang.js\n    /** @constant */\n    ERR_MUST_STRING = \"{0}: {1} namespace must be of type String\";\n    /** @constant */\n    ERR_REF_OR_ID = \"{0}: {1} a reference node or identifier must be provided\";\n    /** @constant */\n    ERR_PARAM_GENERIC = \"{0}: parameter {1} must be of type {2}\";\n    /** @constant */\n    ERR_PARAM_STR = \"{0}: {1} param must be of type string\";\n    /** @constant */\n    ERR_PARAM_STR_RE = \"{0}: {1} param must be of type string or a regular expression\";\n    /** @constant */\n    ERR_PARAM_MIXMAPS = \"{0}: both a source as well as a destination map must be provided\";\n    /** @constant */\n    ERR_MUST_BE_PROVIDED = \"{0}: an {1} and a {2} must be provided\";\n    /** @constant */\n    ERR_MUST_BE_PROVIDED1 = \"{0}: {1} must be set\";\n\n    /** @constant */\n    ERR_REPLACE_EL = \"replaceElements called while evalNodes is not an array\";\n\n    /** @constant */\n    ERR_EMPTY_RESPONSE = \"{0}: The response cannot be null or empty!\";\n    /** @constant */\n    ERR_ITEM_ID_NOTFOUND = \"{0}: item with identifier {1} could not be found\";\n    /** @constant */\n    ERR_PPR_IDREQ = \"{0}: Error in PPR Insert, id must be present\";\n    /** @constant */\n    ERR_PPR_INSERTBEFID = \"{0}: Error in PPR Insert, before id or after id must be present\";\n    /** @constant */\n    ERR_PPR_INSERTBEFID_1 = \"{0}: Error in PPR Insert, before  node of id {1} does not exist in document\";\n    /** @constant */\n    ERR_PPR_INSERTBEFID_2 = \"{0}: Error in PPR Insert, after  node of id {1} does not exist in document\";\n\n    /** @constant */\n    ERR_PPR_DELID = \"{0}: Error in delete, id not in xml markup\";\n    /** @constant */\n    ERR_PPR_UNKNOWNCID = \"{0}:  Unknown Html-Component-ID= {1}\";\n\n    /** @constant */\n    ERR_NO_VIEWROOTATTR = \"{0}: Changing of ViewRoot attributes is not supported\";\n    /** @constant */\n    ERR_NO_HEADATTR = \"{0}: Changing of Head attributes is not supported\";\n    /** @constant */\n    ERR_RED_URL = \"{0}: Redirect without url\";\n\n    /** @constant */\n    ERR_REQ_FAILED_UNKNOWN = \"Request failed with unknown status\";\n\n    /** @constant */\n    ERR_REQU_FAILED = \"Request failed with status {0} and reason {1}\";\n\n    /** @constant */\n    UNKNOWN = \"UNKNOWN\";\n}","import {Config, Lang, XMLQuery} from \"mona-dish\";\n\nimport {DQ} from \"mona-dish\";\nimport {ExtLang} from \"./Lang\";\nimport getMessage = ExtLang.getMessage;\nimport makeException = ExtLang.makeException;\nimport {\n    ATTR_URL,\n    EMPTY_RESPONSE,\n    EMPTY_STR, ERR_NO_PARTIAL_RESPONSE, MALFORMEDXML,\n    ON_ERROR,\n    ON_EVENT,\n    PHASE_PROCESS_RESPONSE,\n    RESP_PARTIAL\n} from \"../core/Const\";\n\n/**\n * a set of internal code assertions\n * which raise an error\n *\n */\nexport module Assertions {\n\n    export function assertRequestIntegrity(options: Config, elem: DQ): void | never {\n        /*assert if the onerror is set and once if it is set it must be of type function*/\n        assertFunction(options.getIf(ON_ERROR).value);\n        /*assert if the onevent is set and once if it is set it must be of type function*/\n        assertFunction(options.getIf(ON_EVENT).value);\n        //improve the error messages if an empty elem is passed\n        //Assertions.assertElementExists(elem);\n        assert(elem.isPresent(), getMessage(\"ERR_MUST_BE_PROVIDED1\", \"{0}: source  must be provided or exist\", \"source element id\"), \"jsf.ajax.request\", \"ArgNotSet\",  )\n    }\n\n    export function assertUrlExists(node: XMLQuery): void | never {\n        if (node.attr(ATTR_URL).isAbsent()) {\n            throw Assertions.raiseError(new Error(), getMessage(\"ERR_RED_URL\", null, \"_Ajaxthis.processRedirect\"), \"processRedirect\");\n        }\n    }\n\n    /**\n     * checks the xml for various issues which can occur\n     * and prevent a proper processing\n     */\n    export function assertValidXMLResponse(responseXML: XMLQuery) : void | never  {\n        assert(!responseXML.isAbsent(), EMPTY_RESPONSE, PHASE_PROCESS_RESPONSE);\n        assert(!responseXML.isXMLParserError(),  responseXML.parserErrorText(EMPTY_STR), PHASE_PROCESS_RESPONSE);\n        assert(responseXML.querySelectorAll(RESP_PARTIAL).isPresent(), ERR_NO_PARTIAL_RESPONSE, PHASE_PROCESS_RESPONSE);\n    }\n\n    /**\n     * internal helper which raises an error in the\n     * format we need for further processing\n     *\n     * @param error\n     * @param message the message\n     * @param caller\n     * @param title the title of the error (optional)\n     * @param name the name of the error (optional)\n     */\n    export function raiseError(error: any, message: string, caller ?: string, title ?: string, name ?: string): Error {\n\n        let finalTitle = title ?? MALFORMEDXML;\n        let finalName = name ?? MALFORMEDXML;\n        let finalMessage = message ?? EMPTY_STR;\n\n        //TODO clean up the messy makeException, this is a perfect case for encapsulation and sane defaults\n        return makeException(error, finalTitle, finalName, \"Response\", caller || (((<any>arguments).caller) ? (<any>arguments).caller.toString() : \"_raiseError\"), finalMessage);\n    }\n\n    /*\n     * using the new typescript 3.7 compiler assertion functionality to improve compiler hinting\n     * we are not fully there yet, but soon\n     */\n\n    export function assert(value: any, msg = EMPTY_STR, caller=EMPTY_STR, title=\"Assertion Error\"): asserts value {\n        if(!value) {\n            throw Assertions.raiseError(new Error(), msg ,caller, title);\n        }\n    }\n\n\n    export function assertType(value: any, theType: any, msg = EMPTY_STR, caller=EMPTY_STR, title=\"Type Assertion Error\"): asserts value {\n        if((!!value) && !Lang.assertType(value,theType)) {\n            throw Assertions.raiseError(new Error(), msg ,caller, title);\n        }\n    }\n\n    export function assertFunction(value: any, msg = EMPTY_STR, caller=EMPTY_STR, title=\"Assertion Error\"): asserts value is Function {\n        assertType(value, \"function\", msg, caller, title);\n    }\n}\n\n\n","import {AsyncRunnable} from \"./AsyncRunnable\";\n\n/**\n * Asynchronous queue which starts to work\n * through the callbacks until the queue is empty\n *\n * Every callback must be of async runnable\n * which is sort of an extended promise which has\n * added a decicated cancel and start point\n *\n * This interface can be used as wrapper contract\n * for normal promises if needed.\n */\nexport class AsynchronousQueue<T extends AsyncRunnable<any>> {\n\n    private runnableQueue = [];\n    private delayTimeout: null | ReturnType<typeof setTimeout>;\n\n    currentlyRunning: AsyncRunnable<any>;\n\n    constructor() {\n    }\n\n    get isEmpty(): boolean {\n        return !this.runnableQueue.length;\n    }\n\n    /**\n     * enequeues an element and starts the\n     * asynchronous work loop if not already running\n     *\n     * @param element the element to be queued and processed\n     * @param delay possible delay after our usual process or drop if something newer is incoming algorithm\n     */\n    enqueue(element: T, delay = 0) {\n        if (this.delayTimeout) {\n            clearTimeout(this.delayTimeout);\n            this.delayTimeout = null;\n        }\n        if (delay) {\n            this.delayTimeout = setTimeout(() => {\n                this.appendElement(element);\n            });\n        } else {\n            this.appendElement(element);\n        }\n    }\n\n    dequeue(): T {\n        return this.runnableQueue.shift();\n    }\n\n    cleanup() {\n        this.currentlyRunning = null;\n        this.runnableQueue.length = 0;\n    }\n\n    private appendElement(element: T) {\n        //only if the first element is added we start with a trigger\n        //otherwise a process already is running and not finished yet at that\n        //time\n        this.runnableQueue.push(element);\n        if (!this.currentlyRunning) {\n            this.runEntry();\n        }\n    }\n\n    private runEntry() {\n        if (this.isEmpty) {\n            this.currentlyRunning = null;\n            return;\n        }\n        this.currentlyRunning = this.dequeue();\n        this.currentlyRunning\n            .catch((e) => {\n                //in case of an error we always clean up the remaining calls\n                //to allow a clean recovery of the application\n                this.cleanup();\n                throw e;\n            })\n            .then(\n                //the idea is to trigger the next over an event to reduce\n                //the number of recursive calls (stacks might be limited\n                //compared to ram)\n                //naturally give we have a DOM, the DOM is the natural event dispatch system\n                //which we can use, to decouple the calls from a recursive stack call\n                //(the browser engine will take care of that)\n                () => this.callForNextElementToProcess()\n            ).start();\n    }\n\n    cancel() {\n        try {\n            if (this.currentlyRunning) {\n                this.currentlyRunning.cancel();\n            }\n        } finally {\n            this.cleanup();\n        }\n    }\n\n    private callForNextElementToProcess() {\n        this.runEntry();\n    }\n}","import {Config, IValueHolder, Optional, DomQuery, DQ} from \"mona-dish\";\nimport {EMPTY_STR, P_WINDOW_ID} from \"../core/Const\";\n\ndeclare let window: any;\n\n\n/**\n * detects whether a source is a jsf.js request\n *\n * @param source the source string for the jsf.js request\n * @return true if a jsf.js loading pattern is detected\n * @constructor\n */\nconst IS_JSF_SOURCE = (source?: string): boolean => {\n    return source && !!(source?.search(/\\/javax\\.faces\\.resource.*\\/jsf\\.js.*/) != -1 ||\n        source?.search(/\\/jsf\\-development\\.js.*/) != -1 ||\n        source?.search(/\\/jsf\\-uncompressed\\.js.*/) != -1 ||\n        source?.search(/\\/jsf[^\\.]\\.js.*ln\\=javax.faces.*/gi) != -1);\n}\n\n/**\n * namespace myfaces.testscripts can be used as extension point for internal\n * tests, those will be handled similarly to jsf.js regarding\n * reload blocking on ajax requests\n *\n * @param source the source to check\n * @constructor\n */\nconst IS_INTERNAL_SOURCE = (source: string): boolean => {\n    return  source.search(/\\/jsf[^\\.]\\.js.*ln\\=myfaces.testscripts.*/gi) != -1;\n}\n\n\n/**\n * Extension which adds implementation specific\n * meta data to our dom query\n *\n * Usage\n * el = new ExtDQ(oldReference)\n * nonce = el.nonce\n * windowId = el.getWindowId\n */\nexport class ExtDomquery extends DQ {\n\n    static get windowId() {\n        return new ExtDomquery(document.body).windowId;\n    }\n\n    static get nonce(): string {\n        return new ExtDomquery(document.body).nonce;\n    }\n\n    get windowId(): string | null {\n\n        const fetchWindowIdFromURL = function (): string | null {\n            let href = window.location.href;\n            let windowId = \"windowId\";\n            let regex = new RegExp(\"[\\\\?&]\" + windowId + \"=([^&#\\\\;]*)\");\n            let results = regex.exec(href);\n            //initial trial over the url and a regexp\n            if (results != null) return results[1];\n            return null;\n        };\n\n        //byId ($)\n        if (this.value.isPresent()) {\n            let result = this.querySelectorAll(\"form input[name='\" + P_WINDOW_ID + \"']\");\n            if (result.length > 0) {\n                throw Error(\"Multiple different windowIds found in document\");\n            }\n\n            return (result.isPresent()) ? (<HTMLInputElement>result.getAsElem(0).value).value : fetchWindowIdFromURL();\n        } else {\n            return fetchWindowIdFromURL();\n        }\n    }\n\n    /*\n    * determines the jsf.js nonce and adds them to the namespace\n    * this is done once and only lazily\n    */\n    get nonce(): string | null {\n        //already processed\n        let myfacesConfig = new Config(window.myfaces);\n        let nonce: IValueHolder<string> = myfacesConfig.getIf(\"config\", \"cspMeta\", \"nonce\");\n        if (nonce.value) {\n            return <string>nonce.value;\n        }\n\n        let curScript = new DQ(document.currentScript);\n        //since our baseline atm is ie11 we cannot use document.currentScript globally\n        if (curScript.attr(\"nonce\").value != null) {\n            // fastpath for modern browsers\n            return curScript.attr(\"nonce\").value;\n        }\n        // fallback if the currentScript method fails, we just search the jsf tags for nonce, this is\n        // the last possibility\n        let nonceScript = DQ\n            .querySelectorAll(\"script[src], link[src]\")\n            .lazyStream\n            .filter((item) => item.attr(\"nonce\").value != null && item.attr(\"src\") != null)\n            .map(item => IS_JSF_SOURCE(item.attr('src').value))\n            .first();\n\n        if (nonceScript.isPresent()) {\n            nonce.value = DomQuery.byId(nonceScript.value, true).attr(\"nonce\").value;\n        }\n        return <string>nonce.value;\n    }\n\n    static searchJsfJsFor(item: RegExp): Optional<String> {\n        return new ExtDomquery(document).searchJsfJsFor(item);\n    }\n\n    /**\n     * searches the embedded jsf.js for items like separator char etc..\n     * expects a match as variable under position 1 in the result match\n     * @param rexp\n     */\n    searchJsfJsFor(rexp: RegExp): Optional<string> {\n        //perfect application for lazy stream\n        return DQ.querySelectorAll(\"script[src], link[src]\").lazyStream\n                .filter(item => IS_JSF_SOURCE(item.attr('src').value))\n                .map(item => item.attr(\"src\").value.match(rexp))\n                .filter(item => item != null && item.length > 1)\n                .map((result: string[]) => {\n                    return decodeURIComponent(result[1]);\n                }).first();\n    }\n\n    globalEval(code: string, nonce ?: string): DQ {\n        return super.globalEval(code, nonce ?? this.nonce);\n    }\n\n    /**\n     * decorated run scripts which takes our jsf extensions into consideration\n     * (standard DomQuery will let you pass anything)\n     * @param whilteListed\n     */\n    runScripts(whilteListed?: (src: string) => boolean): DomQuery {\n        const whitelistFunc = (src: string): boolean => {\n            return (whilteListed?.(src) ?? true) && !IS_JSF_SOURCE(src)  && !IS_INTERNAL_SOURCE(src);\n        };\n        return super.runScripts(whitelistFunc);\n    }\n\n    /**\n     * byId producer\n     *\n     * @param selector id\n     * @return a DomQuery containing the found elements\n     */\n    static byId(selector: string | DomQuery | Element, deep = false): DomQuery {\n        const ret = DomQuery.byId(selector, deep);\n        //return new ExtDomquery(ret);\n        return ret;\n    }\n}\n\nexport const ExtDQ = DQ;","/* Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * todo replace singleton with module definition\n *\n */\n\nimport {Lang as LangBase, Config, Optional, DomQuery, DQ, Stream} from \"mona-dish\";\nimport {Messages} from \"../i18n/Messages\";\nimport {EMPTY_STR, TAG_FORM} from \"../core/Const\";\nimport {getEventTarget} from \"../xhrCore/RequestDataResolver\";\n\nexport module ExtLang {\n\n    let installedLocale: Messages;\n    let nameSpace = \"impl/util/Lang/\";\n\n    export function getLanguage(): string {\n        //TODO global config override\n\n        let language: string = (<any>navigator).languages?.[0] ?? navigator?.language;\n        language = language.split(\"-\")[0];\n        return language;\n    }\n\n    //should be in lang, but for now here to avoid recursive imports, not sure if typescript still has a problem with those\n    /**\n     * helper function to savely resolve anything\n     * this is not an elvis operator, it resolves\n     * a value without exception in a tree and if\n     * it is not resolvable then an optional of\n     * a default value is restored or Optional.empty\n     * if none is given\n     *\n     * usage\n     * <code>\n     *     let var: Optional<string> = saveResolve(() => a.b.c.d.e, \"foobaz\")\n     * </code>\n     *\n     * @param resolverProducer a lambda which can produce the value\n     * @param defaultValue an optional default value if the producer failes to produce anything\n     * @returns an Optional of the produced value\n     */\n    export function failSaveResolve<T>(resolverProducer: () => T, defaultValue: T = null): Optional<T> {\n        return LangBase.saveResolve(resolverProducer, defaultValue);\n    }\n\n    /**\n     * under some conditions it makes sense to swallow errors and return a default value in the error case\n     * classical example the optional resolution of values in a chain (thankfully now covered by Typescript itself)\n     * another example which we have in our system is that some operations fail only under test due to test framework\n     * limitations while they cannot fail in the real world.\n     *\n     * @param resolverProducer a producer function which produces a value in the non error case\n     * @param defaultValue the default value in case of a fail of the function\n     */\n    export function failSaveExecute<T>(resolverProducer: () => any, defaultValue: T = null): void {\n        LangBase.saveResolve(resolverProducer, defaultValue);\n    }\n\n    /**\n     * returns a given localized message upon a given key\n     * basic java log like templating functionality is included\n     *\n     * @param {String} key the key for the message\n     * @param {String} defaultMessage optional default message if none was found\n     *\n     * Additionally you can pass additional arguments, which are used\n     * in the same way java log templates use the params\n     *\n     * @param templateParams the param list to be filled in\n     */\n    export function getMessage(key: string, defaultMessage?: string, ...templateParams: Array<string>): string {\n        installedLocale = installedLocale ?? new Messages();\n\n        let msg = installedLocale[key] ?? defaultMessage ?? key;\n\n        Stream.of(...templateParams).each((param, cnt) => {\n            msg = msg.replace(new RegExp([\"\\\\{\", cnt, \"\\\\}\"].join(EMPTY_STR), \"g\"), param);\n        });\n\n        return msg;\n    }\n\n    /**\n     * transforms a key value pair into a string\n     * @param key the key\n     * @param val the value\n     * @param delimiter the delimiter\n     */\n    export function keyValToStr(key: string, val: string, delimiter: string = \"\\n\") {\n        return [key, val].join(delimiter);\n    }\n\n    /**\n     * creates an exeption with additional internal parameters\n     * for extra information\n     *\n     * @param error\n     * @param {String} title the exception title\n     * @param {String} name  the exception name\n     * @param {String} callerCls the caller class\n     * @param {String} callFunc the caller function\n     * @param {String} message the message for the exception\n     */\n    export function makeException(error: Error, title: string, name: string, callerCls: string, callFunc: string, message: string): Error {\n\n        return new Error(message + (callerCls ?? nameSpace) + callFunc ?? (EMPTY_STR + (<any>arguments).caller.toString()));\n\n    }\n\n    /**\n     * fetches a global config entry\n     * @param {String} configName the name of the configuration entry\n     * @param {Object} defaultValue\n     *\n     * @return either the config entry or if none is given the default value\n     */\n    export function getGlobalConfig(configName: string, defaultValue: any): any {\n        /**\n         * note we could use exists but this is an heavy operation, since the config name usually\n         * given this function here is called very often\n         * is a single entry without . in between we can do the lighter shortcut\n         */\n        return (<any>window)?.myfaces?.config?.[configName] ?? defaultValue;\n    }\n\n    /**\n     * fetches the form in an fuzzy manner depending\n     * on an element or event target.\n     *\n     * The idea is that according to the jsf spec\n     * the enclosing form of the issuing element needs to be fetched.\n     *\n     * This is fine, but since then html5 came into the picture with the form attribute the element\n     * can be anywhere referencing its parent form.\n     *\n     * Also theoretically you can have the case of an issuing element enclosing a set of forms\n     * (not really often used, but theoretically it could be input button allows to embed html for instance)\n     *\n     * So the idea is not to limit the issuing form determination to the spec case\n     * but also cover the theoretical and html5 corner case.\n     *\n     * @param elem\n     * @param event\n     */\n    export function getForm(elem: Element, event ?: Event): DQ | never {\n\n        let queryElem = new DQ(elem);\n        let eventTarget = new DQ(getEventTarget(event));\n\n        if (queryElem.isTag(TAG_FORM)) {\n            return queryElem;\n        }\n\n        //html 5 for handling\n        if (queryElem.attr(TAG_FORM).isPresent()) {\n            let formId = queryElem.attr(TAG_FORM).value;\n            let foundForm = DQ.byId(formId, true);\n            if (foundForm.isPresent()) {\n                return foundForm;\n            }\n        }\n\n        let form = queryElem.parents(TAG_FORM)\n            .orElseLazy(() => queryElem.byTagName(TAG_FORM, true))\n            .orElseLazy(() => eventTarget.parents(TAG_FORM))\n            .orElseLazy(() => eventTarget.byTagName(TAG_FORM))\n            .first();\n\n        assertFormExists(form);\n\n        return form;\n    }\n\n    /**\n     * gets the local or global options with local ones having higher priority\n     * if no local or global one was found then the default value is given back\n     *\n     * @param {String} configName the name of the configuration entry\n     * @param {String} localOptions the local options root for the configuration myfaces as default marker is added implicitely\n     *\n     * @param {Object} defaultValue\n     *\n     * @return either the config entry or if none is given the default value\n     */\n    export function getLocalOrGlobalConfig(localOptions: Config, configName: string, defaultValue: any): any {\n        return localOptions.value?.myfaces?.config?.[configName] ??\n            (<any>window)?.myfaces?.config?.[configName] ??\n            defaultValue;\n    }\n\n    /**\n     * assert that the form exists and throw an exception in the case it does not\n     * (TODO move this into the assertions)\n     *\n     * @param form the form to check for\n     */\n    function assertFormExists(form: DomQuery): void | never {\n        if (form.isAbsent()) {\n            throw makeException(new Error(), null, null, \"Impl\", \"getForm\", getMessage(\"ERR_FORM\"));\n        }\n    }\n\n}","import {\n    EMPTY_STR,\n    ERROR_MESSAGE,\n    ERROR_NAME,\n    RESPONSE_TEXT,\n    RESPONSE_XML,\n    SOURCE,\n    STATUS,\n    UNKNOWN\n} from \"../core/Const\";\nimport {Config} from \"mona-dish\";\n\nimport {EventData} from \"./EventData\";\nimport {ExtLang} from \"../util/Lang\";\nimport getMessage = ExtLang.getMessage;\n\n\nexport enum ErrorType {\n    SERVER_ERROR = \"serverError\",\n    HTTP_ERROR = \"httpError\",\n    CLIENT_ERROR = \"clientErrror\",\n    TIMEOUT = \"timeout\"\n}\n\n/**\n * the spec has a problem of having the error\n * object somewhat underspecified, there is no clear\n * description of the required contents.\n * I want to streamline it with mojarra here\n * hence we are going to move\n * everything into the same attributes,\n * I will add deprecated myfaces backwards compatibility attributes as well\n */\nexport class ErrorData extends EventData {\n\n    type: string = \"error\";\n    source: string;\n    errorName: string;\n    errorMessage: string;\n\n    responseText: string;\n    responseXML: any;\n\n    status: string;\n    typeDetails: ErrorType;\n\n    //TODO backwards compatible attributes\n    serverErrorName: string;\n    serverErrorMessage: string;\n    message: string;\n\n    constructor(source: string, errorName: string, errorMessage: string, responseText: string = null, responseXML: any = null, responseCode: string = \"200\", status: string = \"UNKNOWN\", type = ErrorType.CLIENT_ERROR) {\n        super();\n        this.source = source;\n        this.type = \"error\";\n        this.errorName = errorName;\n        this.message = this.errorMessage = errorMessage;\n        this.responseCode = responseCode;\n        this.responseText = responseText;\n        this.status = status;\n        this.typeDetails = type;\n\n        if (type == ErrorType.SERVER_ERROR) {\n            this.serverErrorName = this.errorName;\n            this.serverErrorMessage = this.errorMessage;\n        }\n    }\n\n    static fromClient(e: Error): ErrorData {\n        return new ErrorData(\"client\", e?.name ?? '', e?.message ?? '', e?.stack ?? '');\n    }\n\n    static fromHttpConnection(source: any, name: string, message: string, responseText, responseCode: number, status: string = 'UNKNOWN'): ErrorData {\n        return new ErrorData(source, name, message, responseText, responseCode, `${responseCode}`, status, ErrorType.HTTP_ERROR);\n    }\n\n    static fromGeneric(context: Config, errorCode: number, errorType: ErrorType = ErrorType.SERVER_ERROR): ErrorData {\n\n        let getMsg = this.getMsg;\n\n        let source = getMsg(context, SOURCE);\n        let errorName = getMsg(context, ERROR_NAME);\n        let errorMessage = getMsg(context, ERROR_MESSAGE);\n        let status = getMsg(context, STATUS);\n        let responseText = getMsg(context, RESPONSE_TEXT);\n        let responseXML = getMsg(context, RESPONSE_XML);\n        return new ErrorData(source, errorName, errorMessage, responseText, responseXML, errorCode + EMPTY_STR, status, errorType);\n    }\n\n    private static getMsg(context, param) {\n        return getMessage(context.getIf(param).orElse(UNKNOWN).value);\n    }\n\n    static fromServerError(context: Config): ErrorData {\n        return this.fromGeneric(context, -1);\n    }\n\n}","import {Config, DQ} from \"mona-dish\";\nimport {BEGIN, CTX_PARAM_PASS_THR, EVENT, P_PARTIAL_SOURCE, SOURCE} from \"../core/Const\";\n\nexport class EventData {\n    type: string;\n    status: string;\n    source: any;\n    responseCode: string;\n    responseText: string;\n    responseXML: Document;\n\n    static createFromRequest(request: XMLHttpRequest, context: Config, /*event name*/ name: string): EventData {\n\n        let eventData = new EventData();\n\n        eventData.type = EVENT;\n        eventData.status = name;\n\n        let sourceId: string = context.getIf(SOURCE)\n            .orElse(context.getIf(P_PARTIAL_SOURCE).value)\n            .orElse(context.getIf(CTX_PARAM_PASS_THR, P_PARTIAL_SOURCE).value).value;\n        if (sourceId) {\n            eventData.source = DQ.byId(sourceId, true).first().value.value;\n        }\n\n        if (name !== BEGIN) {\n            eventData.responseCode = request?.status?.toString();\n            eventData.responseText = request?.responseText;\n            eventData.responseXML = request?.responseXML;\n        }\n        return eventData;\n    }\n}\n","/* Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Config, DomQuery, DQ} from \"mona-dish\";\nimport {\n    CTX_PARAM_DELAY,\n    CTX_PARAM_TIMEOUT,\n    EMPTY_FUNC,\n    EMPTY_STR,\n    ENCODED_URL,\n    MF_NONE,\n    REQ_TYPE_GET,\n    REQ_TYPE_POST\n} from \"../core/Const\";\nimport {XhrFormData} from \"./XhrFormData\";\nimport {ExtLang} from \"../util/Lang\";\nimport {ExtDomquery} from \"../util/ExtDomQuery\";\n\n/**\n * Resolver functions for various aspects of the request data\n *\n * stateless because it might be called from various\n * parts of the response classes\n */\n\n/**\n * resolves the event handlers lazly\n * so that if some decoration happens in between we can deal with it\n *\n * @param requestContext\n * @param responseContext\n * @param funcName\n */\nexport function resolveHandlerFunc(requestContext: Config, responseContext: Config, funcName: string) {\n    return responseContext.getIf(funcName)\n        .orElse(requestContext.getIf(funcName).value)\n        .orElse(EMPTY_FUNC).value;\n}\n\nexport function resolveTargetUrl(srcFormElement: HTMLFormElement) {\n    return (typeof srcFormElement.elements[ENCODED_URL] == 'undefined') ?\n        srcFormElement.action :\n        srcFormElement.elements[ENCODED_URL].value;\n}\n\nexport function resolveFinalUrl(sourceForm: DomQuery, formData: XhrFormData, ajaxType = REQ_TYPE_POST) {\n    let targetUrl = resolveTargetUrl(<HTMLFormElement>sourceForm.getAsElem(0).value);\n\n    return targetUrl + (ajaxType == REQ_TYPE_GET ? \"?\" + formData.toString() : EMPTY_STR);\n}\n\n/**\n * form resolution the same way our old implementation did\n * it is either the id or the parent form of the element or an embedded form\n * of the element\n *\n * @param requestCtx\n * @param elem\n * @param event\n */\nexport function resolveForm(requestCtx: Config, elem: DQ, event: Event): DQ {\n    const configId = requestCtx.value?.myfaces?.form ?? MF_NONE; //requestCtx.getIf(MYFACES, \"form\").orElse(MF_NONE).value;\n    return DQ\n        .byId(configId, true)\n        .orElseLazy(() => ExtLang.getForm(elem.getAsElem(0).value, event));\n}\n\nexport function resolveTimeout(options: Config): number {\n    let getCfg = ExtLang.getLocalOrGlobalConfig;\n    return options.getIf(CTX_PARAM_TIMEOUT).value ?? getCfg(options.value, CTX_PARAM_TIMEOUT, 0);\n}\n\n/**\n * resolve the delay from the options and/or the request context and or the configuration\n *\n * @param options ... the options object, in most cases it will host the delay value\n */\nexport function resolveDelay(options: Config): number {\n    let getCfg = ExtLang.getLocalOrGlobalConfig;\n\n    return options.getIf(CTX_PARAM_DELAY).value ?? getCfg(options.value, CTX_PARAM_DELAY, 0);\n}\n\n/**\n * resolves the window Id from various sources\n *\n * @param options\n */\nexport function resolveWindowId(options: Config) {\n    return options?.value?.windowId ?? ExtDomquery.windowId;\n}\n\n/**\n * cross port from the dojo lib\n * browser save event resolution\n * @param evt the event object\n * (with a fallback for ie events if none is present)\n */\nexport function getEventTarget(evt: Event): Element {\n    //ie6 and 7 fallback\n    let finalEvent = evt;\n    /**\n     * evt source is defined in the jsf events\n     * seems like some component authors use our code\n     * so we add it here see also\n     * https://issues.apache.org/jira/browse/MYFACES-2458\n     * not entirely a bug but makes sense to add this\n     * behavior. I dont use it that way but nevertheless it\n     * does not break anything so why not\n     * */\n    let t = finalEvent?.srcElement ?? finalEvent?.target ?? (<any>finalEvent)?.source;\n    while ((t) && (t.nodeType != 1)) {\n        t = t.parentNode;\n    }\n    return t;\n}\n\n/**\n * resolves a bunch of default values\n * which can be further processed from the given\n * call parameters of jsf.ajax.request\n *\n * @param event\n * @param opts\n * @param el\n */\nexport function resolveDefaults(event: Event, opts: any = {}, el: Element | string = null) {\n    //deep copy the options, so that further transformations to not backfire into the callers\n    const resolvedEvent = event,\n        options = new Config(opts).deepCopy,\n        elem = DQ.byId(el || <Element>resolvedEvent.target, true),\n        elementId = elem.id, requestCtx = new Config({}),\n        internalCtx = new Config({}), windowId = resolveWindowId(options),\n        isResetValues = true === options.value?.resetValues;\n\n    return {resolvedEvent, options, elem, elementId, requestCtx, internalCtx, windowId, isResetValues};\n}","/* Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Config, Optional, XMLQuery} from \"mona-dish\";\n\nimport {Assertions} from \"../util/Assertions\";\nimport {DQ} from \"mona-dish\";\nimport {\n    CTX_PARAM_MF_INTERNAL,\n    CTX_PARAM_SRC_CTL_ID,\n    CTX_PARAM_SRC_FRM_ID,\n    SEL_RESPONSE_XML,\n    SOURCE,\n    TAG_FORM,\n    UPDATE_ELEMS,\n    UPDATE_FORMS\n} from \"../core/Const\";\n\n/**\n * Resolver functions for various aspects of the response data\n *\n * stateless because it might be called from various\n * parts of the response classes\n */\n\n/**\n * fetches the response XML\n * as XML Query object\n *\n * @param request the request hosting the responseXML\n *\n * Throws an error in case of non existent or wrong xml data\n *\n */\nexport function resolveResponseXML(request: Config): XMLQuery {\n    let ret = new XMLQuery(request.getIf(SEL_RESPONSE_XML).value);\n    Assertions.assertValidXMLResponse(ret);\n\n    return ret;\n}\n\n/**\n * Splits the incoming passthrough context apart\n * in an internal and an external nomalized context\n * the internal one is just for our internal processing\n *\n * @param context the root context as associative array\n */\nexport function resolveContexts(context: { [p: string]: any }): any {\n    /**\n     * we split the context apart into the external one and\n     * some internal values\n     */\n    let externalContext = Config.fromNullable(context);\n    let internalContext = externalContext.getIf(CTX_PARAM_MF_INTERNAL);\n    if (!internalContext.isPresent()) {\n        internalContext = Config.fromNullable({});\n    }\n\n    /**\n     * prepare storage for some deferred operations\n     */\n    internalContext.assign(UPDATE_FORMS).value = [];\n    internalContext.assign(UPDATE_ELEMS).value = [];\n    return {externalContext, internalContext};\n}\n\n/**\n * fetches the source element out of our conexts\n *\n * @param context the external context which shpuld host the source id\n * @param internalContext internal passthrough fall back\n *\n */\nexport function resolveSourceElement(context: Config, internalContext: Config): DQ {\n    let elemId = resolveSourceElementId(context, internalContext);\n    return DQ.byId(elemId.value, true);\n}\n\n/**\n * fetches the source form if it still exists\n * also embedded forms and parent forms are taken into consideration\n * as fallbacks\n *\n * @param internalContext\n * @param elem\n */\nexport function resolveSourceForm(internalContext: Config, elem: DQ): DQ {\n    let sourceFormId = internalContext.getIf(CTX_PARAM_SRC_FRM_ID);\n    let sourceForm = new DQ(sourceFormId.isPresent() ? document.forms[sourceFormId.value] : null);\n\n    sourceForm = sourceForm.orElse(elem.parents(TAG_FORM))\n        .orElse(elem.querySelectorAll(TAG_FORM))\n        .orElse(DQ.querySelectorAll(TAG_FORM));\n\n    return sourceForm;\n}\n\nfunction resolveSourceElementId(context: Config, internalContext: Config): Optional<string> {\n    //?internal context?? used to be external one\n    return internalContext.getIf(CTX_PARAM_SRC_CTL_ID)\n        .orElseLazy(() => context.getIf(SOURCE, \"id\").value);\n}\n\n","/* Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Config, DQ, XMLQuery} from \"mona-dish\";\nimport {ResponseProcessor} from \"./ResponseProcessor\";\n\nimport {IResponseProcessor} from \"./IResponseProcessor\";\nimport {\n    CMD_ATTRIBUTES,\n    CMD_CHANGES,\n    CMD_DELETE,\n    CMD_ERROR,\n    CMD_EVAL,\n    CMD_EXTENSION,\n    CMD_INSERT,\n    CMD_REDIRECT,\n    CMD_UPDATE,\n    P_VIEWBODY,\n    P_VIEWHEAD,\n    P_VIEWROOT,\n    PARTIAL_ID,\n    RESP_PARTIAL,\n    RESPONSE_XML,\n    TAG_AFTER,\n    TAG_BEFORE\n} from \"../core/Const\";\nimport {resolveContexts, resolveResponseXML} from \"./ResonseDataResolver\";\n\n\n\nexport module Response {\n\n\n    /**\n     * Standardized jsf.js response\n     * this one is called straight from jsf.js.response\n     *\n     * The processing follows the spec by going for the responseXML\n     * and processing its tags\n     *\n     * @param {XMLHttpRequest} request (xhrRequest) - xhr request object\n     * @param ASSOC_ARR<any> context (Map) - AJAX context\n     *\n     */\n    export function processResponse(request: XMLHttpRequest, context: Context) {\n\n        let req = Config.fromNullable(request);\n        let {externalContext, internalContext} = resolveContexts(context);\n        let responseXML: XMLQuery = resolveResponseXML(req);\n        let responseProcessor = new ResponseProcessor(req, externalContext, internalContext);\n\n        internalContext.assign(RESPONSE_XML).value = responseXML;\n\n        //we now process the partial tags, or in none given raise an error\n        responseXML.querySelectorAll(RESP_PARTIAL)\n            .each(item => processPartialTag(<XMLQuery>item, responseProcessor, internalContext));\n\n        //we now process the viewstates, client windows and the evals deferred\n        //the reason for this is that often it is better\n        //to wait until the document has caught up before\n        //doing any evals even on embedded scripts\n        //usually this does not matter, the client window comes in almost last always anyway\n        //we maybe drop this deferred assignment in the future, but myfaces did it until now\n        responseProcessor.fixViewStates();\n        responseProcessor.fixClientWindow();\n        responseProcessor.globalEval();\n\n        responseProcessor.done();\n    }\n\n    /**\n     * highest node partial-response from there the main operations are triggered\n     */\n     function processPartialTag(node: XMLQuery, responseProcessor: IResponseProcessor, internalContext) {\n\n        internalContext.assign(PARTIAL_ID).value = node.id;\n        const SEL_SUB_TAGS = [CMD_ERROR, CMD_REDIRECT, CMD_CHANGES].join(\",\");\n\n        //now we can process the main operations\n        node.getIf(SEL_SUB_TAGS).each((node: XMLQuery) => {\n            switch (node.tagName.value) {\n                case CMD_ERROR:\n                    responseProcessor.error(node);\n                    break;\n                case CMD_REDIRECT:\n                    responseProcessor.redirect(node);\n                    break;\n                case CMD_CHANGES:\n                    processChangesTag(node, responseProcessor);\n                    break;\n            }\n        });\n\n    }\n\n    let processInsert = function (responseProcessor: IResponseProcessor, node: XMLQuery) {\n         //path1 insert after as child tags\n         if(node.querySelectorAll([TAG_BEFORE, TAG_AFTER].join(\",\")).length) {\n             responseProcessor.insertWithSubtags(node);\n         } else { //insert before after with id\n             responseProcessor.insert(node);\n         }\n\n    };\n\n    /**\n     * next level changes tag\n     *\n     * @param node\n     * @param responseProcessor\n     */\n     function processChangesTag(node: XMLQuery, responseProcessor: IResponseProcessor): boolean {\n        const ALLOWED_TAGS = [CMD_UPDATE, CMD_EVAL, CMD_INSERT, CMD_DELETE, CMD_ATTRIBUTES, CMD_EXTENSION].join(\",\");\n        node.getIf(ALLOWED_TAGS).each(\n            (node: XMLQuery) => {\n                switch (node.tagName.value) {\n                    case CMD_UPDATE:\n                        processUpdateTag(node, responseProcessor);\n                        break;\n\n                    case CMD_EVAL:\n                        responseProcessor.eval(node);\n                        break;\n\n                    case CMD_INSERT:\n                        processInsert(responseProcessor, node);\n                        break;\n\n                    case CMD_DELETE:\n                        responseProcessor.delete(node);\n                        break;\n\n                    case CMD_ATTRIBUTES:\n                        responseProcessor.attributes(node);\n                        break;\n\n                    case CMD_EXTENSION:\n                        break;\n                }\n            }\n        );\n        return true;\n    }\n\n    /**\n     * checks and stores a state update for delayed processing\n     *\n     * @param responseProcessor the response processor to perform the store operation\n     * @param node the xml node to check for the state\n     *\n     * @private\n     */\n    function storeState(responseProcessor: IResponseProcessor, node: XMLQuery) {\n        return responseProcessor.processViewState(node) || responseProcessor.processClientWindow(node);\n    }\n\n    /**\n     * branch tag update.. drill further down into the updates\n     * special case viewstate in that case it is a leaf\n     * and the viewstate must be processed\n     *\n     * @param node\n     * @param responseProcessor\n     */\n     function processUpdateTag(node: XMLQuery, responseProcessor: IResponseProcessor) {\n         //early state storing, if no state we perform a normal update cycle\n        if (!storeState(responseProcessor, node)) {\n            handleElementUpdate(node, responseProcessor);\n        }\n    }\n\n    /**\n     * element update\n     *\n     * @param node\n     * @param responseProcessor\n     */\n     function handleElementUpdate(node: XMLQuery, responseProcessor: IResponseProcessor) {\n        let cdataBlock = node.cDATAAsString;\n        switch (node.id.value) {\n            case P_VIEWROOT :\n                responseProcessor.replaceViewRoot(DQ.fromMarkup(cdataBlock.substring(cdataBlock.indexOf(\"<html\"))));\n                break;\n\n            case P_VIEWHEAD:\n                responseProcessor.replaceHead(DQ.fromMarkup(cdataBlock));\n                break;\n\n            case P_VIEWBODY:\n                responseProcessor.replaceBody(DQ.fromMarkup(cdataBlock));\n                break;\n\n            default://htmlItem replacement\n                responseProcessor.update(node, cdataBlock);\n                break;\n\n        }\n    }\n}","/* Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Config, DomQuery, DQ, Lang, Stream, XMLQuery} from \"mona-dish\";\nimport {Implementation} from \"../AjaxImpl\";\nimport {Assertions} from \"../util/Assertions\";\nimport {IResponseProcessor} from \"./IResponseProcessor\";\nimport {ErrorData} from \"./ErrorData\";\nimport {StateHolder} from \"../core/ImplTypes\";\nimport {EventData} from \"./EventData\";\n\nimport {\n    APPLIED_CLIENT_WINDOW,\n    APPLIED_VST,\n    ATTR_ID,\n    ATTR_NAME,\n    ATTR_URL,\n    ATTR_VALUE,\n    EMPTY_FUNC,\n    EMPTY_STR,\n    ERROR_MESSAGE,\n    ERROR_NAME,\n    HTML_VIEWSTATE,\n    ON_ERROR,\n    ON_EVENT, P_CLIENT_WINDOW,\n    P_PARTIAL_SOURCE,\n    P_VIEWSTATE,\n    RESPONSE_XML, SEL_CLIENT_WINDOW_ELEM,\n    SEL_SCRIPTS_STYLES,\n    SEL_VIEWSTATE_ELEM,\n    SOURCE,\n    SUCCESS,\n    TAG_AFTER,\n    TAG_ATTR,\n    TAG_BEFORE,\n    TAG_BODY,\n    TAG_FORM,\n    TAG_HEAD,\n    UPDATE_ELEMS,\n    UPDATE_FORMS\n} from \"../core/Const\";\nimport trim = Lang.trim;\nimport {ExtDomquery} from \"../util/ExtDomQuery\";\n\n/**\n * Response processor\n *\n * Each  XML tag is either a node or a leaf\n * or both\n *\n * the processor provides a set of operations\n * which are executed on a single leaf node per operation\n * and present the core functionality of our response\n *\n * Note the response processor is stateful hence we bundle it in a class\n * to reduce code we keep references tot contexts in place\n */\nexport class ResponseProcessor implements IResponseProcessor {\n\n    constructor(private request: Config, private externalContext: Config, private internalContext: Config) {\n\n    }\n\n    replaceHead(shadowDocument: XMLQuery | DQ) {\n        let shadowHead = shadowDocument.querySelectorAll(TAG_HEAD);\n        if (!shadowHead.isPresent()) {\n            return;\n        }\n\n        let oldHead = DQ.querySelectorAll(TAG_HEAD);\n\n        //delete all to avoid script and style overlays\n        oldHead.querySelectorAll(SEL_SCRIPTS_STYLES).delete();\n\n        this.storeForEval(shadowHead);\n    }\n\n    /**\n     * replaces the body in the expected manner\n     * which means the entire body content is refreshed\n     * however also the body attributes must be transferred\n     * keeping event handlers etc... in place\n     *\n     * @param shadowDocument .. an incoming shadow document hosting the new nodes\n     */\n    replaceBody(shadowDocument: XMLQuery | DQ) {\n\n        let shadowBody = shadowDocument.querySelectorAll(TAG_BODY);\n        if (!shadowBody.isPresent()) {\n            return;\n        }\n\n        let shadowInnerHTML: string = <string>shadowBody.html().value;\n\n        let resultingBody = <DQ>DQ.querySelectorAll(TAG_BODY).html(shadowInnerHTML);\n        let updateForms = resultingBody.querySelectorAll(TAG_FORM);\n\n        resultingBody.copyAttrs(shadowBody);\n\n        this.storeForPostProcessing(updateForms, resultingBody);\n    }\n\n    /**\n     * Leaf Tag eval... process whatever is in the evals cdata block\n     *\n     * @param node the node to eval\n     */\n    eval(node: XMLQuery) {\n        DQ.globalEval(node.cDATAAsString);\n    }\n\n    /**\n     * processes an incoming error from the response\n     * which is hosted under the &lt;error&gt; tag\n     * @param node the node hosting the error in our response xml\n     * @param node the node in the xml hosting the error message\n     */\n    error(node: XMLQuery) {\n        /**\n         * <error>\n         *      <error-name>String</error-name>\n         *      <error-message><![CDATA[message]]></error-message>\n         * <error>\n         */\n\n        let mergedErrorData = new Config({});\n        mergedErrorData.assign(SOURCE).value = this.externalContext.getIf(P_PARTIAL_SOURCE).get(0).value;\n        mergedErrorData.assign(ERROR_NAME).value = node.querySelectorAll(ERROR_NAME).textContent(EMPTY_STR);\n        mergedErrorData.assign(ERROR_MESSAGE).value = node.querySelectorAll(ERROR_MESSAGE).cDATAAsString;\n\n        let hasResponseXML = this.internalContext.get(RESPONSE_XML).isPresent();\n\n        //we now store the response xml also in the error data for further details\n        mergedErrorData.assignIf(hasResponseXML, RESPONSE_XML).value = this.internalContext.getIf(RESPONSE_XML).value.get(0).value;\n\n        // error post processing and enrichment (standard messages from keys)\n        let errorData = ErrorData.fromServerError(mergedErrorData);\n\n        // we now trigger an internally stored onError function which might be a attached to the context\n        // either we haven an internal on error, or an on error has been bassed via params from the outside\n        // in both cases they are attached to our contexts\n\n        this.triggerOnError(errorData);\n        Implementation.sendError(errorData);\n    }\n\n    private triggerOnError(errorData: ErrorData) {\n        this.externalContext.getIf(ON_ERROR).orElse(this.internalContext.getIf(ON_ERROR).value).orElse(EMPTY_FUNC).value(errorData);\n    }\n\n    /**\n     * process the redirect operation\n     *\n     * @param node\n     */\n    redirect(node: XMLQuery) {\n        Assertions.assertUrlExists(node);\n\n        let redirectUrl = trim(node.attr(ATTR_URL).value);\n        if (redirectUrl != EMPTY_STR) {\n            (<any>window).location.href = redirectUrl;\n        }\n    }\n\n    /**\n     * processes the update operation and updates the node with the cdata block\n     * @param node the xml response node hosting the update info\n     * @param cdataBlock the cdata block with the new html code\n     */\n    update(node: XMLQuery, cdataBlock: string) {\n        let result = ExtDomquery.byId(node.id.value, true).outerHTML(cdataBlock, false, false);\n        let sourceForm = result?.parents(TAG_FORM).orElse(result.byTagName(TAG_FORM, true));\n        if (sourceForm) {\n            this.storeForPostProcessing(sourceForm, result);\n        }\n    }\n\n    delete(node: XMLQuery) {\n        DQ.byId(node.id.value, true).delete();\n    }\n\n    /**\n     * attributes leaf tag... process the attributes\n     *\n     * @param node\n     */\n    attributes(node: XMLQuery) {\n        let elem = DQ.byId(node.id.value, true);\n\n        node.byTagName(TAG_ATTR).each((item: XMLQuery) => {\n            elem.attr(item.attr(ATTR_NAME).value).value = item.attr(ATTR_VALUE).value;\n        });\n    }\n\n    /**\n     * @param shadowDocument a shadow document which is needed for further processing\n     */\n    replaceViewRoot(shadowDocument: XMLQuery) {\n        this.replaceHead(shadowDocument);\n        this.replaceBody(shadowDocument);\n    }\n\n    /**\n     * insert handling, either before or after\n     *\n     * @param node\n     */\n    insert(node: XMLQuery) {\n        //let insertId = node.id; //not used atm\n\n        let before = node.attr(TAG_BEFORE);\n        let after = node.attr(TAG_AFTER);\n\n        let insertNodes = DQ.fromMarkup(<any>node.cDATAAsString);\n\n        if (before.isPresent()) {\n            DQ.byId(before.value, true).insertBefore(insertNodes);\n            this.internalContext.assign(UPDATE_ELEMS).value.push(insertNodes);\n        }\n        if (after.isPresent()) {\n            let domQuery = DQ.byId(after.value, true);\n            domQuery.insertAfter(insertNodes);\n\n            this.internalContext.assign(UPDATE_ELEMS).value.push(insertNodes);\n        }\n    }\n\n    /**\n     * handler for the case &lt;insert <&lt; before id=\"...\n     *\n     * @param node the node hosting the insert data\n     */\n    insertWithSubtags(node: XMLQuery) {\n        let before = node.querySelectorAll(TAG_BEFORE);\n        let after = node.querySelectorAll(TAG_AFTER);\n\n        before.each(item => {\n            let insertId = item.attr(ATTR_ID);\n            let insertNodes = DQ.fromMarkup(<any>item.cDATAAsString);\n            if (insertId.isPresent()) {\n                DQ.byId(insertId.value, true).insertBefore(insertNodes);\n                this.internalContext.assign(UPDATE_ELEMS).value.push(insertNodes);\n            }\n        });\n\n        after.each(item => {\n            let insertId = item.attr(ATTR_ID);\n            let insertNodes = DQ.fromMarkup(<any>item.cDATAAsString);\n            if (insertId.isPresent()) {\n                DQ.byId(insertId.value, true).insertAfter(insertNodes);\n                this.internalContext.assign(UPDATE_ELEMS).value.push(insertNodes);\n            }\n        });\n    }\n\n    /**\n     * process the viewState update, update the affected\n     * forms with their respective new viewstate values\n     *\n     */\n    processViewState(node: XMLQuery): boolean {\n        if (ResponseProcessor.isViewStateNode(node)) {\n            let state = node.cDATAAsString;\n            this.internalContext.assign(APPLIED_VST, node.id.value).value = new StateHolder(node.id.value, state);\n            return true;\n        }\n        return false;\n    }\n\n    processClientWindow(node: XMLQuery): boolean {\n        if (ResponseProcessor.isClientWindowNode(node)) {\n            let state = node.cDATAAsString;\n            this.internalContext.assign(APPLIED_CLIENT_WINDOW, node.id.value).value = new StateHolder(node.id.value, state);\n            return true;\n        }\n    }\n\n    /**\n     * generic global eval which runs the embedded css and scripts\n     */\n    globalEval() {\n        let updateElems = new ExtDomquery(...this.internalContext.getIf(UPDATE_ELEMS).value);\n        updateElems.runCss();\n        updateElems.runScripts();\n    }\n\n    /**\n     * post processing viewstate fixing\n     */\n    fixViewStates() {\n        Stream.ofAssoc<StateHolder>(this.internalContext.getIf(APPLIED_VST).orElse({}).value)\n            .each((item: Array<any>) => {\n                let value: StateHolder = item[1];\n                let nameSpace = DQ.byId(value.nameSpace, true).orElse(document.body);\n                let affectedForms = nameSpace.byTagName(TAG_FORM);\n                let affectedForms2 = nameSpace.filter(item => item.tagName.orElse(EMPTY_STR).value.toLowerCase() == TAG_FORM);\n\n                this.appendViewStateToForms(new DomQuery(affectedForms, affectedForms2), value.value);\n            });\n    }\n\n    fixClientWindow() {\n        Stream.ofAssoc<StateHolder>(this.internalContext.getIf(APPLIED_CLIENT_WINDOW).orElse({}).value)\n            .each((item: Array<any>) => {\n                let value: StateHolder = item[1];\n                let nameSpace = DQ.byId(value.nameSpace, true).orElse(document.body);\n                let affectedForms = nameSpace.byTagName(TAG_FORM);\n                let affectedForms2 = nameSpace.filter(item => item.tagName.orElse(EMPTY_STR).value.toLowerCase() == TAG_FORM);\n\n                this.appendClientWindowToForms(new DomQuery(affectedForms, affectedForms2), value.value);\n            });\n    }\n\n    /**\n     * all processing done we can close the request and send the appropriate events\n     */\n    done() {\n        let eventData = EventData.createFromRequest(this.request.value, this.externalContext, SUCCESS);\n\n        //because some frameworks might decorate them over the context in the response\n        let eventHandler = this.externalContext.getIf(ON_EVENT).orElse(this.internalContext.getIf(ON_EVENT).value).orElse(EMPTY_FUNC).value;\n        Implementation.sendEvent(eventData, eventHandler);\n    }\n\n    /**\n     * proper viewstate -> form assignment\n     *\n     * @param forms the forms to append the viewstate to\n     * @param viewState the final viewstate\n     */\n    private appendViewStateToForms(forms: DQ, viewState: string) {\n        this.assignState(forms, SEL_VIEWSTATE_ELEM, viewState);\n    }\n\n\n    /**\n     * proper clientwindow -> form assignment\n     *\n     * @param forms the forms to append the viewstate to\n     * @param clientWindow the final viewstate\n     */\n    private appendClientWindowToForms(forms: DQ, clientWindow: string) {\n        this.assignState(forms, SEL_CLIENT_WINDOW_ELEM, clientWindow);\n    }\n\n    /**\n     * generic append state which appends a certain state as hidden element to an existing set of forms\n     *\n     * @param forms the forms to append or change to\n     * @param selector the selector for the state\n     * @param state the state itself which needs to be assigned\n     *\n     * @private\n     */\n    private assignState(forms: DQ, selector: string, state: string) {\n        forms.each((form: DQ) => {\n            let stateHolders = form.querySelectorAll(selector)\n                .orElseLazy(() => ResponseProcessor.newViewStateElement(form));\n\n            stateHolders.attr(\"value\").value = state;\n        });\n    }\n\n    /**\n     * Helper to Create a new JSF ViewState Element\n     *\n     * @param parent, the parent node to attach the viewstate element to\n     * (usually a form node)\n     */\n    private static newViewStateElement(parent: DQ): DQ {\n        let newViewState = DQ.fromMarkup(HTML_VIEWSTATE);\n        newViewState.appendTo(parent);\n        return newViewState;\n    }\n\n    /**\n     * Stores certain aspects of the dom for later post processing\n     *\n     * @param updateForms the update forms which should receive standardized internal jsf data\n     * @param toBeEvaled the resulting elements which should be evaled\n     */\n    private storeForPostProcessing(updateForms: DQ, toBeEvaled: DQ) {\n        this.storeForUpdate(updateForms);\n        this.storeForEval(toBeEvaled);\n    }\n\n    /**\n     * helper to store a given form for the update post processing (viewstate)\n     *\n     * @param updateForms the dom query object pointing to the forms which need to be updated\n     */\n    private storeForUpdate(updateForms: DQ) {\n        this.internalContext.assign(UPDATE_FORMS).value.push(updateForms);\n    }\n\n    /**\n     * same for eval (js and css)\n     *\n     * @param toBeEvaled\n     */\n    private storeForEval(toBeEvaled: DQ) {\n        this.internalContext.assign(UPDATE_ELEMS).value.push(toBeEvaled);\n    }\n\n    /**\n     * check whether a given XMLQuery node is an explicit viewstate node\n     *\n     * @param node the node to check\n     * @returns true of it ii\n     */\n    private static isViewStateNode(node: XMLQuery): boolean {\n        let separatorChar = (<any>window).jsf.separatorchar;\n        return \"undefined\" != typeof node?.id?.value && (node?.id?.value == P_VIEWSTATE ||\n            node?.id?.value?.indexOf([separatorChar, P_VIEWSTATE].join(EMPTY_STR)) != -1 ||\n            node?.id?.value?.indexOf([P_VIEWSTATE, separatorChar].join(EMPTY_STR)) != -1);\n    }\n\n    /**\n     * incoming client window node also needs special processing\n     *\n     * @param node the node to check\n     * @returns true of it ii\n     */\n    private static isClientWindowNode(node: XMLQuery): boolean {\n        let separatorChar = (<any>window).jsf.separatorchar;\n        return \"undefined\" != typeof node?.id?.value && (node?.id?.value == P_CLIENT_WINDOW ||\n            node?.id?.value?.indexOf([separatorChar, P_CLIENT_WINDOW].join(EMPTY_STR)) != -1 ||\n            node?.id?.value?.indexOf([P_CLIENT_WINDOW, separatorChar].join(EMPTY_STR)) != -1);\n    }\n\n}","/* Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {ArrayCollector, Config, DomQuery, DomQueryCollector, Lang, LazyStream} from \"mona-dish\";\n\nimport {Stream, DQ} from \"mona-dish\";\nimport isString = Lang.isString;\nimport {EMPTY_STR, P_VIEWSTATE} from \"../core/Const\";\n\n\n/**\n * A unified form data class\n * which builds upon our configuration.\n *\n * We cannot use standard html5 forms everywhere\n * due to api constraints on the HTML Form object in IE11\n * and due to the url encoding constraint given by the jsf.js spec\n *\n * TODO not ideal. too many encoding calls\n * probably only one needed and one overlay!\n * the entire fileinput storing probably is redundant now\n * that domquery has been fixed\n */\nexport class XhrFormData extends Config {\n\n    private fileInputs = {};\n\n    /**\n     * data collector from a given form\n     *\n     * @param dataSource either a form as DomQuery object or an encoded url string\n     * @param partialIdsArray partial ids to collect, to reduce the data sent down\n     */\n    constructor(private dataSource: DQ | string, private partialIdsArray?: string[], private encode = true) {\n        super({});\n        //a call to getViewState before must pass the encoded line\n        //a call from getViewState passes the form element as datasource\n        //so we have two call points\n        if (isString(dataSource)) {\n            this.assignEncodedString(<string>this.dataSource);\n        } else {\n            this.handleFormSource();\n        }\n    }\n\n    /**\n     * generic application of ids\n     * @param executes\n     */\n    applyFileInputs(...executes: Array<string>) {\n\n        let fetchInput = (id: string): DQ => {\n            if (id == \"@all\") {\n                return DQ.querySelectorAllDeep(\"input[type='file']\");\n            } else if (id == \"@form\") {\n                return (<DQ>this.dataSource).querySelectorAllDeep(\"input[type='file']\");\n            } else {\n                let element = DQ.byId(id, true);\n                return this.getFileInputs(element);\n            }\n        };\n\n        let inputExists = (item: DQ) => {\n            return !!item.length;\n        };\n\n        let applyInput = (item: DQ) => {\n            this.fileInputs[this.resolveSubmitIdentifier(<HTMLInputElement>item.getAsElem(0).value)] = true;\n        };\n\n        LazyStream.of(...executes)\n            .map(fetchInput)\n            .filter(inputExists)\n            .each(applyInput);\n    }\n\n    private getFileInputs(rootElment: DQ): DQ {\n\n        let resolveFileInputs = item => {\n\n            if (item.length == 1) {\n                if ((<string>item.tagName.get(\"booga\").value).toLowerCase() == \"input\" &&\n                    (<string>item.attr(\"type\")?.value || '').toLowerCase() == \"file\") {\n                    return item;\n                }\n\n                return rootElment.querySelectorAllDeep(\"input[type='file']\");\n            }\n            return this.getFileInputs(item);\n        };\n\n        let itemExists = (item: DQ) => {\n            return !!item?.length;\n        }\n\n        let ret = rootElment.lazyStream\n            .map(resolveFileInputs)\n            .filter(itemExists)\n            .collect(new DomQueryCollector());\n\n        return ret;\n    }\n\n\n    private handleFormSource() {\n        //encode and append the issuing item if not a partial ids array of ids is passed\n        /*\n         * Spec. 13.3.1\n         * Collect and encode input elements.\n         * Additionally the hidden element javax.faces.ViewState\n         * Enhancement partial page submit\n         *\n         */\n        this.encodeSubmittableFields(this, <DQ>this.dataSource, this.partialIdsArray);\n\n        if (this.getIf(P_VIEWSTATE).isPresent()) {\n            return;\n        }\n\n        this.applyViewState(<DQ>this.dataSource);\n    }\n\n    /**\n     * special case viewstate handling\n     *\n     * @param form the form holding the viewstate value\n     */\n    private applyViewState(form: DQ) {\n        let viewState = form.byId(P_VIEWSTATE, true).inputValue;\n        this.appendIf(viewState.isPresent(), P_VIEWSTATE).value = viewState.value;\n    }\n\n    /**\n     * assignes a url encoded string to this xhrFormData object\n     * as key value entry\n     * @param encoded\n     */\n    assignEncodedString(encoded: string) {\n        //this code filters out empty strings as key value pairs\n        let keyValueEntries = decodeURIComponent(encoded).split(/&/gi).filter(item => !!(item || '').replace(/\\s+/g,''));\n        this.assignString(keyValueEntries);\n    }\n\n    assignString(keyValueEntries: string[]) {\n        let toMerge = new Config({});\n\n        Stream.of(...keyValueEntries)\n            //split only the first =\n            .map(line => line.split(/=(.*)/gi))\n            //special case of having keys without values\n            .map(keyVal => keyVal.length < 3 ? [keyVal?.[0] ?? [], keyVal?.[1] ?? []] : keyVal)\n            .each(keyVal => {\n                toMerge.append(keyVal[0]).value = keyVal?.splice(1)?.join(\"\") ?? \"\";\n            });\n        //merge with overwrite but no append! (aka no double entries are allowed)\n        this.shallowMerge(toMerge);\n    }\n\n// noinspection JSUnusedGlobalSymbols\n    /**\n     * @returns a Form data representation\n     */\n    toFormData(): FormData {\n        let ret: any = new FormData();\n\n        LazyStream.of(...Object.keys(this.value))\n            .filter(key => !(key in this.fileInputs))\n            .each(key => {\n                Stream.of(...this.value[key]).each(item => ret.append(key, item));\n            });\n        Stream.of<string>(...Object.keys(this.fileInputs)).each((key: string) => {\n            DQ.querySelectorAllDeep(`[name='${key}'], [id=\"${key}\"]`).eachElem((elem: HTMLInputElement) => {\n                let identifier = this.resolveSubmitIdentifier(elem);\n                if (!elem?.files?.length) {\n                    ret.append(identifier, elem.value);\n                    return;\n                }\n\n                ret.append(identifier, elem.files[0]);\n            })\n        });\n        return ret;\n    }\n\n    resolveSubmitIdentifier(elem: HTMLInputElement) {\n        let identifier = elem.name;\n        identifier = ((elem?.name ?? \"\").replace(/s+/gi, \"\") == \"\") ? elem.id : identifier;\n        return identifier;\n    }\n\n    /**\n     * returns an encoded string representation of our xhr form data\n     *\n     * @param defaultStr optional default value if nothing is there to encode\n     */\n    toString(defaultStr = EMPTY_STR): string {\n        if (this.isAbsent()) {\n            return defaultStr;\n        }\n        let entries = LazyStream.of(...Object.keys(this.value))\n            .filter(key => this.value.hasOwnProperty(key))\n            .flatMap(key => Stream.of(...this.value[key]).map(val => [key, val]).collect(new ArrayCollector()))\n            .map(keyVal => {\n                return `${encodeURIComponent(keyVal[0])}=${encodeURIComponent(keyVal[1])}`;\n            })\n            .collect(new ArrayCollector());\n\n        return entries.join(\"&\")\n    }\n\n    /**\n     * determines fields to submit\n     * @param {Object} targetBuf - the target form buffer receiving the data\n     * @param {Node} parentItem - form element item is nested in\n     * @param {Array} partialIds - ids fo PPS\n     */\n    private encodeSubmittableFields(targetBuf: Config,\n                                    parentItem: DQ, partialIds ?: string[]) {\n        let toEncode = null;\n        if (this.partialIdsArray && this.partialIdsArray.length) {\n            //in case of our myfaces reduced ppr we only\n            //only submit the partials\n            this._value = {};\n            toEncode = new DQ(...this.partialIdsArray);\n\n        } else {\n            if (parentItem.isAbsent()) throw \"NO_PARITEM\";\n            toEncode = parentItem;\n        }\n\n        //lets encode the form elements\n\n        this.shallowMerge(toEncode.deepElements.encodeFormElement());\n    }\n\n    /**\n     * checks if the given datasource is a multipart request source\n     * multipart is only needed if one of the executes is a file input\n     * since file inputs are stateless, they fall out of the viewstate\n     * and need special handling\n     */\n    get isMultipartRequest(): boolean {\n        return !!Object.keys(this.fileInputs).length;\n    }\n\n}","/* Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {AsyncRunnable} from \"../util/AsyncRunnable\";\nimport {Config, DQ, Stream} from \"mona-dish\";\nimport {Implementation} from \"../AjaxImpl\";\n\nimport {XhrFormData} from \"./XhrFormData\";\nimport {ErrorData} from \"./ErrorData\";\nimport {EventData} from \"./EventData\";\nimport {ExtLang} from \"../util/Lang\";\nimport {\n    BEGIN,\n    COMPLETE,\n    CONTENT_TYPE,\n    CTX_PARAM_MF_INTERNAL,\n    CTX_PARAM_PASS_THR,\n    ERROR,\n    HEAD_FACES_REQ,\n    MALFORMEDXML,\n    NO_TIMEOUT,\n    ON_ERROR,\n    ON_EVENT, P_EXECUTE,\n    REQ_ACCEPT,\n    REQ_TYPE_GET,\n    REQ_TYPE_POST,\n    STATE_EVT_TIMEOUT,\n    STD_ACCEPT,\n    URL_ENCODED,\n    VAL_AJAX\n} from \"../core/Const\";\nimport {resolveFinalUrl, resolveHandlerFunc} from \"./RequestDataResolver\";\nimport failSaveExecute = ExtLang.failSaveExecute;\n\n/**\n * JSFed XHR Request Wrapper\n * as Asyncrunnable for our Asynchronous queue\n *\n * The idea is that we basically just enqueue\n * a single ajax request into our queue\n * and let the queue do the processing.\n *\n */\n\ndeclare let jsf: any;\n\nexport class XhrRequest implements AsyncRunnable<XMLHttpRequest> {\n\n    private responseContext: Config;\n\n    private stopProgress = false;\n\n    /**\n     * helper support so that we do not have to drag in Promise shims\n     */\n    private catchFuncs: Array<Function> = [];\n    private thenFunc: Array<Function> = [];\n\n    /**\n     * Reqired Parameters\n     *\n     * @param source the issuing element\n     * @param sourceForm the form which is related to the issuing element\n     * @param requestContext the request context with allö pass through values\n     *\n     * Optional Parameters\n     *\n     * @param partialIdsArray an optional restricting partial ids array for encoding\n     * @param timeout optional xhr timeout\n     * @param ajaxType optional request type, default \"POST\"\n     * @param contentType optional content type, default \"application/x-www-form-urlencoded\"\n     * @param xhrObject optional xhr object which must fullfill the XMLHTTPRequest api, default XMLHttpRequest\n     */\n    constructor(\n        private source: DQ,\n        private sourceForm: DQ,\n        private requestContext: Config,\n        private internalContext: Config,\n        private partialIdsArray = [],\n        private timeout = NO_TIMEOUT,\n        private ajaxType = REQ_TYPE_POST,\n        private contentType = URL_ENCODED,\n        private xhrObject = new XMLHttpRequest()\n    ) {\n        /*\n        * we omit promises here\n        * some browsers do not support it and we do not need shim code\n        */\n        this.registerXhrCallbacks((data: any) => {\n            this.resolve(data)\n        }, (data: any) => {\n            this.reject(data)\n        });\n    }\n\n    start(): AsyncRunnable<XMLHttpRequest> {\n\n        let ignoreErr = failSaveExecute;\n        let xhrObject = this.xhrObject;\n\n        let executesArr = () => {\n            return this.requestContext.getIf(CTX_PARAM_PASS_THR, P_EXECUTE).get(\"none\").value.split(/\\s+/gi);\n        };\n        try {\n\n            let formElement = this.sourceForm.getAsElem(0).value;\n            let viewState = jsf.getViewState(formElement);\n            //encoded we need to decode\n            //We generated a base representation of the current form\n            let formData: XhrFormData = new XhrFormData(this.sourceForm);\n            //in case someone has overloaded the viewstate with addtional decorators we merge\n            //that in, there is no way around it, the spec allows it and getViewState\n            //must be called, so whatever getViewState delivers has higher priority then\n            //whatever the formData object delivers\n            formData.assignEncodedString(viewState);\n            formData.applyFileInputs(...executesArr());\n\n            this.contentType = formData.isMultipartRequest ? \"undefined\" : this.contentType;\n\n            //next step the pass through parameters are merged in for post params\n            let requestContext = this.requestContext;\n            let passThroughParams = requestContext.getIf(CTX_PARAM_PASS_THR);\n            formData.shallowMerge(passThroughParams, true, true);\n\n            this.responseContext = passThroughParams.deepCopy;\n\n            //we have to shift the internal passthroughs around to build up our response context\n            let responseContext = this.responseContext;\n\n            responseContext.assign(CTX_PARAM_MF_INTERNAL).value = this.internalContext.value;\n\n            //per spec the onevent and onerrors must be passed through to the response\n            responseContext.assign(ON_EVENT).value = requestContext.getIf(ON_EVENT).value;\n            responseContext.assign(ON_ERROR).value = requestContext.getIf(ON_ERROR).value;\n\n            xhrObject.open(this.ajaxType, resolveFinalUrl(this.sourceForm, formData, this.ajaxType), true);\n\n            //adding timeout\n            this.timeout ? xhrObject.timeout = this.timeout : null;\n\n            //a bug in the xhr stub library prevents the setRequestHeader to be properly executed on fake xhr objects\n            //normal browsers should resolve this\n            //tests can quietly fail on this one\n            if(this.contentType != \"undefined\") {\n                ignoreErr(() => xhrObject.setRequestHeader(CONTENT_TYPE, `${this.contentType}; charset=utf-8`));\n            }\n\n            ignoreErr(() => xhrObject.setRequestHeader(HEAD_FACES_REQ, VAL_AJAX));\n\n            //probably not needed anymore, will test this\n            //some webkit based mobile browsers do not follow the w3c spec of\n            // setting the accept headers automatically\n            ignoreErr(() => xhrObject.setRequestHeader(REQ_ACCEPT, STD_ACCEPT));\n\n            this.sendEvent(BEGIN);\n\n            this.sendRequest(formData);\n\n        } catch (e) {\n            //_onError//_onError\n            this.handleError(e);\n        }\n        return this;\n    }\n\n    cancel() {\n        try {\n            this.xhrObject.abort();\n        } catch (e) {\n            this.handleError(e);\n        }\n    }\n\n    resolve(data: any) {\n        Stream.of(...this.thenFunc).reduce((inputVal: any, thenFunc: any) => {\n            return thenFunc(inputVal);\n        }, data);\n    }\n\n    reject(data: any) {\n        Stream.of(...this.catchFuncs).reduce((inputVal: any, catchFunc: any) => {\n            return catchFunc(inputVal);\n        }, data);\n    }\n\n    catch(func: (data: any) => any): AsyncRunnable<XMLHttpRequest> {\n        //this.$promise.catch(func);\n        this.catchFuncs.push(func);\n        return this;\n    }\n\n    finally(func: () => void): AsyncRunnable<XMLHttpRequest> {\n        //no ie11 support we probably are going to revert to shims for that one\n        //(<any>this.$promise).then(func).catch(func);\n        this.catchFuncs.push(func);\n        this.thenFunc.push(func);\n        return this;\n    }\n\n    then(func: (data: any) => any): AsyncRunnable<XMLHttpRequest> {\n        //this.$promise.then(func);\n        this.thenFunc.push(func);\n        return this;\n    }\n\n    /**\n     * attaches the internal event and processing\n     * callback within the promise to our xhr object\n     *\n     * @param resolve\n     * @param reject\n     */\n    protected registerXhrCallbacks(resolve: Consumer<any>, reject: Consumer<any>) {\n        let xhrObject = this.xhrObject;\n\n        xhrObject.onabort = () => {\n            this.onAbort(resolve, reject);\n        };\n        xhrObject.ontimeout = () => {\n            this.onTimeout(resolve, reject);\n        };\n        xhrObject.onload = () => {\n            this.onSuccess(this.xhrObject, resolve, reject)\n        };\n        xhrObject.onloadend = () => {\n            this.onDone(this.xhrObject, resolve, reject);\n        };\n        xhrObject.onerror = (errorData: any) => {\n            this.onError(errorData, resolve, reject);\n        };\n    }\n\n    /*\n     * xhr processing callbacks\n     *\n     * Those methods are the callbacks called by\n     * the xhr object depending on its own state\n     */\n\n    protected onAbort(resolve: Consumer<any>, reject: Consumer<any>) {\n        reject();\n    }\n\n    protected onTimeout(resolve: Consumer<any>, reject: Consumer<any>) {\n        this.sendEvent(STATE_EVT_TIMEOUT);\n        reject();\n    }\n\n    protected onSuccess(data: any, resolve: Consumer<any>, reject: Consumer<any>) {\n\n        this.sendEvent(COMPLETE);\n\n        //malforms always result in empty response xml\n        if (!this?.xhrObject?.responseXML) {\n            this.handleMalFormedXML(resolve, reject);\n            return;\n        }\n\n        jsf.ajax.response(this.xhrObject, this.responseContext.value ?? {});\n    }\n\n    private handleMalFormedXML(resolve: Function, reject: Function) {\n        this.stopProgress = true;\n        let errorData = {\n            type: ERROR,\n            status: MALFORMEDXML,\n            responseCode: 200,\n            responseText: this.xhrObject?.responseText,\n            source: {\n                id: this.source.id.value\n            }\n        };\n        try {\n            this.handleError(errorData, true);\n        } finally {\n            //we issue a resolve in this case to allow the system to recover\n            resolve(errorData);\n            //reject();\n        }\n        //non blocking non clearing\n    }\n\n    protected onDone(data: any, resolve: Consumer<any>, reject: Consumer<any>) {\n        if (this.stopProgress) {\n            return;\n        }\n        resolve(data);\n    }\n\n    protected onError(errorData: any, resolve: Consumer<any>, reject: Consumer<any>) {\n        this.handleError(errorData);\n        reject();\n    }\n\n    /*\n     * other helpers\n     */\n    private sendEvent(evtType: string) {\n        let eventData = EventData.createFromRequest(this.xhrObject, this.requestContext, evtType);\n        try {\n            //user code error, we might cover\n            //this in onError but also we cannot swallow it\n            //we need to resolve the local handlers lazyly,\n            //because some frameworks might decorate them over the context in the response\n            let eventHandler = resolveHandlerFunc(this.requestContext, this.responseContext, ON_EVENT);\n\n            Implementation.sendEvent(eventData, eventHandler);\n        } catch (e) {\n            this.handleError(e);\n            throw e;\n        }\n    }\n\n    private handleError(exception, responseFormatError: boolean = false) {\n        let errorData = (responseFormatError) ? ErrorData.fromHttpConnection(exception.source, exception.type, exception.status, exception.responseText, exception.responseCode, exception.status) : ErrorData.fromClient(exception);\n\n        let eventHandler = resolveHandlerFunc(this.requestContext, this.responseContext, ON_ERROR);\n        Implementation.sendError(errorData, eventHandler);\n    }\n\n    protected sendRequest(formData: XhrFormData) {\n        let isPost = this.ajaxType != REQ_TYPE_GET;\n        if (formData.isMultipartRequest) {\n            //in case of a multipart request we send in a formData object as body\n            this.xhrObject.send((isPost) ? formData.toFormData() : null);\n        } else {\n            //in case of a normal request we send it normally\n            this.xhrObject.send((isPost) ? formData.toString() : null);\n        }\n    }\n\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(486);\n"],"names":["Submittables","trim","Lang","objToArray","isString","equalsIgnoreCase","waitUntilDom","root","condition","options","attributes","childList","subtree","timeout","interval","Promise","success","error","MUT_ERROR","Error","window","MutationObserver","setTimeout","mutationList","observer","found","DomQuery","map","mut","target","first","isPresent","clearTimeout","eachElem","item","observe","setInterval","childNodes","querySelectorAll","absent","clearInterval","element","name","defaultVal","val","this","get","orElse","values","length","getAttribute","value","cnt","setAttribute","getClass","ElementAttribute","fromNullable","valueKey","ValueEmbedder","DEFAULT_WHITELIST","src","rootNode","pos","_limits","Optional","isAbsent","foundElement","push","getAsElem","allElems","getIf","isTag","tagName","nodeName","toLowerCase","Stream","of","allMatch","el","checked","newChecked","querySelectorAllDeep","queryStr","queryRes","shadowRoots","shadowRoot","shadowRes","attr","disabled","removeAttribute","childNodeArr","concat","asArray","LazyStream","filter","byId","collect","ArrayCollector","selector","document","indexOf","_querySelectorAllDeep","_querySelectorAll","deep","byIdDeep","byTagName","globalEval","code","nonce","fromMarkup","markup","doc","implementation","createHTMLDocument","lowerMarkup","documentElement","innerHTML","startsWithTag","str","tag1","join","tag2","dummyPlaceHolder","createElement","html","detach","index","defaults","filesFromElem","files","presentRunnable","call","ifPresentLazy","delete","node","parentNode","removeChild","nodes","res","foundNodes","selectors","split","cnt2","levelSelector","id","includeRoot","subItems","reduce","reduction","defaultValue","hasClass","clazz","hasIt","classList","contains","addClass","add","removeClass","remove","isMultipartCandidate","stream","firstElem","isCandidate","inval","innerHtml","dispatchEvent","evt","elem","retArr","inVal","_mozMatchesSelector","toMatch","prot","matchesSelector","mozMatchesSelector","msMatchesSelector","oMatchesSelector","webkitMatchesSelector","s","matches","ownerDocument","i","filterSelector","matched","selectorStage","nodeSelector","func","len","each","reArr","head","getElementsByTagName","script","type","newScriptElement","appendChild","appendTo","orElseLazy","theItem","loadScriptEval","defer","charSet","xhr","XMLHttpRequest","open","setRequestHeader","send","onload","responseData","responseText","replace","onerror","data","insertAfter","existingItem","existingElement","nextSibling","toInsertParams","insertElem","insertBefore","elseValue","parents","retSet","Set","lowerTagName","resolveItem","has","host","copyAttrs","sourceItem","sourceNode","resolveAttributeHolder","attrName","ret","outerHTML","runEmbeddedScripts","runEmbeddedCss","focusElementId","activeElement","caretPosition","getCaretPosition","toReplace","firstInsert","replaced","replaceChild","insertAdditionalItems","slice","runScripts","runCss","focusElement","setCaretPosition","whilteListed","finalScripts","equi","execScrpt","itemType","evalText","text","innerText","go","substring","flatMap","sort","node1","node2","compareDocumentPosition","e","console","message","description","applyStyle","style","newSS","styleSheet","sheet","cssText","createTextNode","Array","prototype","forEach","child","execCss","click","fireEvent","addEventListener","listener","removeEventListener","eventName","nodeType","eventClass","createEvent","initEvent","synthetic","createEventObject","textContent","joinstr","text1","text2","encodeFormElement","toMerge","Config","shallowCopy","elemType","selectElem","selectedIndex","uLen","u","selected","elementOption","append","SELECT","BUTTON","RESET","SUBMIT","IMAGE","CHECKBOX","RADIO","inputValue","lazyStream","reduced","subNodes","from","to","Math","min","limits","end","hasNext","isLimitsReached","isEndOfArray","next","reset","attachShadow","params","mode","shadowElement","mapped","hasShadow","ctrl","caretPos","selection","focus","createRange","moveStart","setSelectiongRange","Symbol","iterator","done","DomQueryCollector","DQ","ws","test","charAt","it","arguments","String","saveResolve","resolverProducer","result","saveResolveLazy","strToArray","splitter","obj","offset","pack","source","destination","finalDest","assertType","probe","theType","isFunc","Function","objAssign","TypeError","Object","assign","theArgs","nextSource","keys","nextKey","hasOwnProperty","_value","fn","Monad","currentPos","key","currKey","keyVal","arrPos","arrayIndex","getIfPresent","match","toJson","JSON","stringify","start","parseInt","resolve","resolver","rootElem","newVal","alternative","ConfigEntry","ofAssoc","AssocArrayCollector","shallowMerge","other","overwrite","withAppend","isArray","noKeys","lastKey","pathExists","buildPath","finalKeyArrPos","retVal","apply","appendIf","assignIf","setVal","parentVal","parentPos","alloc","arr","length1","length2","tempVal","total","SequenceDataSource","dataPos","ArrayStreamDataSource","filterFunc","parent","filteredNext","inputDataSource","FilteredStreamDatasource","mapFunc","MappedStreamDataSource","resolveCurrentNext","resolveNextNext","activeDataSource","FlatMapStreamDataSource","finalValue","ArrayAssocArrayCollector","Run","FormData","FormDataCollector","QueryFormDataCollector","formData","item1","item2","QueryFormStringCollector","ofDataSource","dataSource","toAppend","onElem","strmR","startVal","val1","last","anyMatch","noneMatch","comparator","newArr","collector","ofStreamDataSource","isOverLimits","nextFilter","max","t","stop","value1","value2","el1","el2","docType","xml","DOMParser","parser","ActiveXObject","async","parseFromString","contentType","loadXML","isXMLParserError","toString","serialized","XMLSerializer","constructor","serializeToString","parserErrorText","parseXML","txt","XMLQuery","parseHTML","fromString","parseType","XQ","jsf","ajax","specversion","implversion","separatorchar","Implementation","getSeparatorChar","getProjectStage","getViewState","formElement","getClientWindow","request","event","response","context","addOnError","errorFunc","addOnEvent","eventFunc","util","chain","funcs","init","socketClientId","uri","channel","onopen","onmessage","onclose","behaviorScripts","autoconnect","PushImpl","close","myfaces","ab","execute","render","ProjectStages","BlockFilter","getMessage","ExtLang","getGlobalConfig","assert","Assertions","eventQueue","errorQueue","resolveProjectStateFromURL","foundStage","ExtDomquery","searchJsfJsFor","sendError","errorData","localHandler","errorCallback","alert","displayError","remapDefaultConstants","targetConfig","targetKey","userValues","issuingForm","issuingElementId","iterValues","processed","IDENT_NONE","IDENT_ALL","IDENT_FORM","IDENT_THIS","resolveGlobalConfig","MYFACES","config","requestQueue","separator","projectStage","resolveAndExecute","sourceCode","opts","mappedOpts","resolveDefaults","resolvedEvent","elementId","requestCtx","internalCtx","windowId","isResetValues","assertRequestIntegrity","P_WINDOW_ID","CTX_PARAM_PASS_THR","P_EVT","SOURCE","ON_EVENT","onevent","ON_ERROR","requestOptions","targetContext","sourceElementId","form","resolveForm","P_PARTIAL_SOURCE","P_AJAX","P_RESET_VALUES","CTX_PARAM_SRC_FRM_ID","CTX_PARAM_SRC_CTL_ID","CTX_PARAM_TR_TYPE","REQ_TYPE_POST","clientWindow","P_CLIENT_WINDOW","assignClientWindowId","CTX_PARAM_EXECUTE","P_EXECUTE","RENDER","P_RENDER","assignRender","delay","resolveDelay","resolveTimeout","queueHandler","addRequestToQueue","Response","processResponse","errorListener","eventListener","sendEvent","stdErrorHandler","exception","clearRequestQueue","ErrorData","fromClient","cleanup","ALTERED","INIT","formWindowId","body","TAG_FORM","XhrFormData","reqCtx","respPassThr","AsynchronousQueue","enqueue","XhrRequest","URL_PROTOCOL","location","protocol","sockets","components","clientIdsByTokens","resolveFunction","WebSocket","channelToken","substr","Socket","url","base","hostname","port","getBaseURL","getSocket","reconnectAttempts","socket","readyState","bindCallbacks","clientIds","onmmessage","parse","getElementById","functions","j","splice","reason","REASON_EXPIRED","MAX_RECONNECT_ATTEMPTS","RECONNECT_INTERVAL","PARTIAL_ID","P_VIEWSTATE","P_VIEWROOT","P_VIEWHEAD","P_VIEWBODY","EMPTY_FUNC","freeze","EMPTY_STR","EMPTY_MAP","HTML_VIEWSTATE","WINDOW_ID","ERROR","EVENT","BEGIN","COMPLETE","SUCCESS","STATUS","ERROR_NAME","ERROR_MESSAGE","RESPONSE_TEXT","RESPONSE_XML","HTTPERROR","EMPTY_RESPONSE","MALFORMEDXML","SERVER_ERROR","CLIENT_ERROR","TIMEOUT_EVENT","CTX_PARAM_MF_INTERNAL","CTX_PARAM_DELAY","CTX_PARAM_TIMEOUT","CTX_PARAM_RST","STAGE_DEVELOPMENT","CONTENT_TYPE","HEAD_FACES_REQ","REQ_ACCEPT","VAL_AJAX","ENCODED_URL","REQ_TYPE_GET","STATE_EVT_BEGIN","STATE_EVT_TIMEOUT","STATE_EVT_COMPLETE","URL_ENCODED","MULTIPART","NO_TIMEOUT","STD_ACCEPT","TAG_HEAD","TAG_BODY","TAG_BEFORE","TAG_AFTER","TAG_ATTR","SEL_VIEWSTATE_ELEM","SEL_CLIENT_WINDOW_ELEM","SEL_RESPONSE_XML","PHASE_PROCESS_RESPONSE","ERR_NO_PARTIAL_RESPONSE","ATTR_URL","ATTR_NAME","ATTR_VALUE","ATTR_ID","RESP_PARTIAL","CMD_CHANGES","CMD_UPDATE","CMD_DELETE","CMD_INSERT","CMD_EVAL","CMD_ERROR","CMD_ATTRIBUTES","CMD_EXTENSION","CMD_REDIRECT","UPDATE_FORMS","UPDATE_ELEMS","SEL_SCRIPTS_STYLES","MF_NONE","APPLIED_VST","APPLIED_CLIENT_WINDOW","UNKNOWN","viewStatePos","nameSpace","StateHolder","Messages","MSG_TEST","MSG_DEV_MODE","MSG_AFFECTED_CLASS","MSG_AFFECTED_METHOD","MSG_ERROR_NAME","MSG_ERROR_MESSAGE","MSG_SERVER_ERROR_NAME","MSG_ERROR_DESC","MSG_ERROR_NO","MSG_ERROR_LINENO","ERR_FORM","ERR_VIEWSTATE","ERR_TRANSPORT","ERR_EVT_PASS","ERR_CONSTRUCT","ERR_MALFORMEDXML","ERR_SOURCE_FUNC","ERR_EV_OR_UNKNOWN","ERR_SOURCE_NOSTR","ERR_SOURCE_DEF_NULL","ERR_MUST_STRING","ERR_REF_OR_ID","ERR_PARAM_GENERIC","ERR_PARAM_STR","ERR_PARAM_STR_RE","ERR_PARAM_MIXMAPS","ERR_MUST_BE_PROVIDED","ERR_MUST_BE_PROVIDED1","ERR_REPLACE_EL","ERR_EMPTY_RESPONSE","ERR_ITEM_ID_NOTFOUND","ERR_PPR_IDREQ","ERR_PPR_INSERTBEFID","ERR_PPR_INSERTBEFID_1","ERR_PPR_INSERTBEFID_2","ERR_PPR_DELID","ERR_PPR_UNKNOWNCID","ERR_NO_VIEWROOTATTR","ERR_NO_HEADATTR","ERR_RED_URL","ERR_REQ_FAILED_UNKNOWN","ERR_REQU_FAILED","makeException","msg","caller","title","raiseError","assertFunction","assertUrlExists","assertValidXMLResponse","responseXML","finalTitle","finalName","finalMessage","runnableQueue","delayTimeout","appendElement","dequeue","shift","currentlyRunning","runEntry","isEmpty","catch","then","callForNextElementToProcess","cancel","IS_JSF_SOURCE","search","fetchWindowIdFromURL","href","results","RegExp","exec","curScript","currentScript","nonceScript","rexp","decodeURIComponent","ExtDQ","installedLocale","defaultMessage","templateParams","param","callerCls","callFunc","getLanguage","language","navigator","languages","failSaveResolve","failSaveExecute","keyValToStr","delimiter","configName","getForm","queryElem","eventTarget","getEventTarget","formId","foundForm","assertFormExists","getLocalOrGlobalConfig","localOptions","ErrorType","errorName","errorMessage","responseCode","status","typeDetails","serverErrorName","serverErrorMessage","stack","fromHttpConnection","HTTP_ERROR","fromGeneric","errorCode","errorType","getMsg","fromServerError","EventData","createFromRequest","eventData","sourceId","resolveTargetUrl","srcFormElement","elements","action","resolveWindowId","requestContext","responseContext","funcName","sourceForm","ajaxType","configId","getCfg","finalEvent","srcElement","deepCopy","resetValues","externalContext","internalContext","elemId","resolveSourceElementId","sourceFormId","forms","req","resolveContexts","resolveResponseXML","responseProcessor","ResponseProcessor","SEL_SUB_TAGS","redirect","ALLOWED_TAGS","processViewState","processClientWindow","storeState","cdataBlock","cDATAAsString","replaceViewRoot","replaceHead","replaceBody","update","handleElementUpdate","processUpdateTag","eval","insertWithSubtags","insert","processInsert","processChangesTag","processPartialTag","fixViewStates","fixClientWindow","shadowDocument","shadowHead","storeForEval","shadowBody","shadowInnerHTML","resultingBody","updateForms","storeForPostProcessing","mergedErrorData","hasResponseXML","triggerOnError","redirectUrl","before","after","insertNodes","insertId","isViewStateNode","state","isClientWindowNode","updateElems","affectedForms","affectedForms2","appendViewStateToForms","appendClientWindowToForms","eventHandler","viewState","assignState","newViewStateElement","newViewState","toBeEvaled","storeForUpdate","separatorChar","partialIdsArray","encode","fileInputs","assignEncodedString","handleFormSource","applyFileInputs","fetchInput","getFileInputs","inputExists","applyInput","resolveSubmitIdentifier","executes","rootElment","encodeSubmittableFields","applyViewState","encoded","keyValueEntries","assignString","line","toFormData","identifier","defaultStr","encodeURIComponent","targetBuf","parentItem","partialIds","toEncode","deepElements","xhrObject","stopProgress","catchFuncs","thenFunc","registerXhrCallbacks","reject","ignoreErr","isMultipartRequest","passThroughParams","resolveFinalUrl","sendRequest","handleError","abort","inputVal","catchFunc","finally","onabort","onAbort","ontimeout","onTimeout","onSuccess","onloadend","onDone","onError","handleMalFormedXML","evtType","resolveHandlerFunc","responseFormatError","isPost","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__"],"sourceRoot":""}