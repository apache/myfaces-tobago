{"version":3,"file":"tobago-tree-select.js","sourceRoot":"../ts/","sources":["tobago-tree-select.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Selectable} from \"./tobago-selectable\";\nimport {Tree} from \"./tobago-tree\";\nimport {TreeNode} from \"./tobago-tree-node\";\n\nexport class TreeSelect extends HTMLElement {\n\n  constructor() {\n    super();\n  }\n\n  connectedCallback(): void {\n    this.input.addEventListener(\"change\", this.select.bind(this));\n  }\n\n  select(event: Event): void {\n    switch (this.input.type) {\n      case \"radio\":\n        this.tree.clearSelectedNodes();\n        this.tree.addSelectedNode(this.treeNode.index);\n        break;\n      case \"checkbox\":\n        if (this.input.checked) {\n          this.tree.addSelectedNode(this.treeNode.index);\n        } else {\n          this.tree.deleteSelectedNode(this.treeNode.index);\n        }\n\n        if (this.tree.selectable === Selectable.multiCascade) {\n          const treeNodeIds = [];\n          this.selectChildren(this.treeSelectChildren, this.input.checked, treeNodeIds);\n\n          /*if (treeNodeIds.length > 0) {\n            for (const id of treeNodeIds) {\n              let ts: TreeSelect = document.getElementById(id).querySelector(\"tobago-tree-select\") as TreeSelect;\n              ts.input.dispatchEvent(new Event(\"change\", {bubbles: false}));\n            }\n          }*/\n        }\n        break;\n    }\n  }\n\n  selectChildren(treeSelectChildren: NodeListOf<TreeSelect>, checked: boolean, treeNodeIds: Array<string>): void {\n    for (const treeSelect of treeSelectChildren) {\n      if (treeSelect.input.checked !== checked) {\n        treeSelect.input.checked = checked;\n        treeNodeIds.push(treeSelect.treeNode.id);\n      }\n      if (checked) {\n        this.tree.addSelectedNode(treeSelect.treeNode.index);\n      } else {\n        this.tree.deleteSelectedNode(treeSelect.treeNode.index);\n      }\n\n      this.selectChildren(treeSelect.treeSelectChildren, checked, treeNodeIds);\n    }\n  }\n\n  private get tree(): Tree {\n    return this.treeNode.tree;\n  }\n\n  private get treeNode(): TreeNode {\n    return this.closest(\"tobago-tree-node\") as TreeNode;\n  }\n\n  private get treeSelectChildren(): NodeListOf<TreeSelect> {\n    const treeNode = this.closest(\"tobago-tree-node\");\n    return treeNode.parentElement\n        .querySelectorAll(\"tobago-tree-node[parent='\" + treeNode.id + \"'] tobago-tree-select\");\n  }\n\n  private get input(): HTMLInputElement {\n    return this.querySelector(\"input\");\n  }\n}\n\ndocument.addEventListener(\"tobago.init\", function (event: Event): void {\n  if (window.customElements.get(\"tobago-tree-select\") == null) {\n    window.customElements.define(\"tobago-tree-select\", TreeSelect);\n  }\n});\n"]}