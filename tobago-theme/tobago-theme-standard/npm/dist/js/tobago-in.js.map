{"version":3,"file":"tobago-in.js","sourceRoot":"../ts/","sources":["tobago-in.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Listener, Phase} from \"./tobago-listener\";\nimport {Focus} from \"./tobago-focus\";\nimport {Suggest} from \"./tobago-suggest\";\n\nexport class In extends HTMLElement {\n  constructor() {\n    super();\n  }\n\n  connectedCallback(): void {\n    this.input.addEventListener(\"focus\", Focus.setLastFocusId);\n    if (this.querySelector(\"tobago-suggest\")) {\n      const suggest = new Suggest(this);\n      suggest.init();\n    }\n  }\n\n  get input(): HTMLInputElement {\n    const rootNode = this.getRootNode() as ShadowRoot | Document;\n    return rootNode.getElementById(this.id + \"::field\") as HTMLInputElement;\n  }\n}\n\ndocument.addEventListener(\"tobago.init\", function (event: Event): void {\n  if (window.customElements.get(\"tobago-in\") == null) {\n    window.customElements.define(\"tobago-in\", In);\n  }\n});\n\n// XXX regexp example only - blueprint\nclass RegExpTest {\n\n  private readonly element: HTMLInputElement;\n  private readonly regexp: RegExp;\n\n  static init(element: HTMLElement): void {\n    for (const input of RegExpTest.selfOrElementsByClassName(element, \"tobago-in\")) { // todo only for data-regexp\n      new RegExpTest(input as HTMLInputElement);\n    }\n  }\n\n  /**\n   * Find all elements (and also self) which have the class \"className\".\n   * @param element Starting element in DOM to collect.\n   * @param className Class of elements to find.\n   */\n  static selfOrElementsByClassName(element: HTMLElement, className: string): Array<HTMLElement> {\n    const result: Array<HTMLElement> = new Array<HTMLElement>();\n    if (element.classList.contains(className)) {\n      result.push(element);\n    }\n    const list = element.getElementsByClassName(className);\n    for (let i = 0; i < list.length; i++) {\n      result.push(list.item(i) as HTMLElement);\n    }\n    return result;\n  }\n\n  constructor(element: HTMLInputElement) {\n\n    this.element = element;\n    this.regexp = new RegExp(this.element.dataset.regexp);\n\n    console.debug(\"constructor: '%s'\", element.id);\n\n    this.element.addEventListener(\"change\", this.checkValue.bind(this));\n  }\n\n  checkValue(event: TextEvent): void {\n    console.debug(\"changed: check if '%s' is okay!\", this.regexp.toString());\n    if (!this.regexp.test(this.element.value)) {\n      this.element.classList.add(\"border-danger\");\n    } else {\n      this.element.classList.remove(\"border-danger\");\n    }\n  }\n}\n\nListener.register(RegExpTest.init, Phase.DOCUMENT_READY);\nListener.register(RegExpTest.init, Phase.AFTER_UPDATE);\n"]}