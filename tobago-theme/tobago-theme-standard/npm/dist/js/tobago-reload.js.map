{"version":3,"file":"tobago-reload.js","sourceRoot":"../ts/","sources":["tobago-reload.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;GAeG;AAEH,OAAO,EAAC,QAAQ,EAAE,KAAK,EAAC,MAAM,mBAAmB,CAAC;AAClD,OAAO,EAAC,QAAQ,EAAC,MAAM,gBAAgB,CAAC;AAExC,kDAAkD;AAClD,MAAM,OAAO,aAAa;IAexB;QACE,IAAI,CAAC,QAAQ,GAAG,IAAI,GAAG,EAAkB,CAAC;IAC5C,CAAC;IAEM,QAAQ,CAAC,EAAU,EAAE,YAAoB;QAC9C,IAAI,YAAY,GAAG,CAAC,EAAE;YAEpB,0BAA0B;YAC1B,MAAM,UAAU,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;YACzC,IAAI,UAAU,EAAE;gBACd,OAAO,CAAC,KAAK,CAAC,wBAAwB,GAAG,UAAU,GAAG,UAAU,GAAG,EAAE,GAAG,GAAG,CAAC,CAAC;gBAC7E,MAAM,CAAC,YAAY,CAAC,UAAU,CAAC,CAAC;gBAChC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;aAC1B;YAED,mBAAmB;YACnB,MAAM,OAAO,GAAG,MAAM,CAAC,UAAU,CAAC;gBAChC,OAAO,CAAC,KAAK,CAAC,cAAc,GAAG,EAAE,GAAG,GAAG,CAAC,CAAC;gBACzC,GAAG,CAAC,IAAI,CAAC,OAAO,CACZ,EAAE,EACF,IAAI,EACJ;oBACE,4BAA4B,EAAE,QAAQ;oBACtC,OAAO,EAAE,EAAE;oBACX,MAAM,EAAE,EAAE;iBACX,CAAC,CAAC;YACT,CAAC,EAAE,YAAY,CAAC,CAAC;YACjB,OAAO,CAAC,KAAK,CAAC,yBAAyB,GAAG,OAAO,GAAG,UAAU,GAAG,EAAE,GAAG,GAAG,CAAC,CAAC;YAC3E,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE,EAAE,OAAO,CAAC,CAAC;SAChC;IACH,CAAC;;AA3CM,sBAAQ,GAAkB,IAAI,aAAa,EAAE,CAAC;AAO9C,kBAAI,GAAG,UAAU,OAAoB;IAC1C,KAAK,MAAM,MAAM,IAAI,QAAQ,CAAC,sBAAsB,CAAC,OAAO,EAAE,sBAAsB,CAAC,EAAE;QACrF,aAAa,CAAC,QAAQ,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,EAAE,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,CAAC;KACjF;AACH,CAAC,CAAC;AAoCJ,QAAQ,CAAC,QAAQ,CAAC,aAAa,CAAC,IAAI,EAAE,KAAK,CAAC,cAAc,CAAC,CAAC;AAC5D,QAAQ,CAAC,QAAQ,CAAC,aAAa,CAAC,IAAI,EAAE,KAAK,CAAC,YAAY,CAAC,CAAC","sourcesContent":["/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Listener, Phase} from \"./tobago-listener\";\nimport {DomUtils} from \"./tobago-utils\";\n\n// TODO: might be implemented with a web component\nexport class ReloadManager {\n\n  static instance: ReloadManager = new ReloadManager();\n\n  /**\n   * Map to store the scheduled timeouts by id, to prevent duplicate scheduling of the same elements.\n   */\n  private timeouts: Map<string, number>;\n\n  static init = function (element: HTMLElement): void {\n    for (const reload of DomUtils.selfOrQuerySelectorAll(element, \"[data-tobago-reload]\")) {\n      ReloadManager.instance.schedule(reload.id, Number(reload.dataset.tobagoReload));\n    }\n  };\n\n  private constructor() {\n    this.timeouts = new Map<string, number>();\n  }\n\n  public schedule(id: string, reloadMillis: number): void {\n    if (reloadMillis > 0) {\n\n      // may remove old schedule\n      const oldTimeout = this.timeouts.get(id);\n      if (oldTimeout) {\n        console.debug(\"clear reload timeout '\" + oldTimeout + \"' for #'\" + id + \"'\");\n        window.clearTimeout(oldTimeout);\n        this.timeouts.delete(id);\n      }\n\n      // add new schedule\n      const timeout = window.setTimeout(function (): void {\n        console.debug(\"reloading #'\" + id + \"'\");\n        jsf.ajax.request(\n            id,\n            null,\n            {\n              \"javax.faces.behavior.event\": \"reload\",\n              execute: id,\n              render: id\n            });\n      }, reloadMillis);\n      console.debug(\"adding reload timeout '\" + timeout + \"' for #'\" + id + \"'\");\n      this.timeouts.set(id, timeout);\n    }\n  }\n\n}\n\nListener.register(ReloadManager.init, Phase.DOCUMENT_READY);\nListener.register(ReloadManager.init, Phase.AFTER_UPDATE);\n"]}