{"version":3,"file":"tobago-tree-listbox.js","sourceRoot":"../ts/","sources":["tobago-tree-listbox.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {DomUtils} from \"./tobago-utils\";\n\nclass TreeListbox extends HTMLElement {\n\n  constructor() {\n    super();\n  }\n\n  connectedCallback(): void {\n    this.applySelected();\n\n    for (const listbox of this.listboxes) {\n      if (!listbox.disabled) {\n        listbox.addEventListener(\"change\", this.select.bind(this));\n      }\n    }\n  }\n\n  private select(event: Event): void {\n    const listbox = event.currentTarget as HTMLSelectElement;\n    this.unselectDescendants(listbox);\n    this.setSelected();\n    this.applySelected();\n  }\n\n  private unselectDescendants(select: HTMLSelectElement): void {\n    let unselect: boolean = false;\n    for (const listbox of this.listboxes) {\n      if (unselect) {\n        const checkedOption = listbox.querySelector<HTMLOptionElement>(\"option:checked\");\n        if (checkedOption) {\n          checkedOption.selected = false;\n        }\n      } else if (listbox.id === select.id) {\n        unselect = true;\n      }\n    }\n  }\n\n  private setSelected(): void {\n    const selected: number[] = [];\n    for (const level of this.levelElements) {\n      const checkedOption: HTMLOptionElement = level\n          .querySelector(\".tobago-treeListbox-select:not(.d-none) option:checked\");\n      if (checkedOption) {\n        selected.push(checkedOption.index);\n      }\n    }\n    this.hiddenInput.value = JSON.stringify(selected);\n  }\n\n  private applySelected(): void {\n    const selected: number[] = JSON.parse(this.hiddenInput.value);\n    let nextActiveSelect: HTMLSelectElement = this.querySelector(\".tobago-treeListbox-select\");\n\n    const levelElements = this.levelElements;\n    for (let i = 0; i < levelElements.length; i++) {\n      const level = levelElements[i];\n\n      for (const select of this.getSelectElements(level)) {\n        if ((nextActiveSelect !== null && select.id === nextActiveSelect.id)\n            || (nextActiveSelect === null && select.disabled)) {\n          const check: number = i < selected.length ? selected[i] : null;\n          this.show(select, check);\n          nextActiveSelect = this.getNextActiveSelect(select, check);\n        } else {\n          this.hide(select);\n        }\n      }\n    }\n  }\n\n  private getSelectElements(level: HTMLDivElement): NodeListOf<HTMLSelectElement> {\n    return level.querySelectorAll<HTMLSelectElement>(\".tobago-treeListbox-select\");\n  }\n\n  private getNextActiveSelect(select: HTMLSelectElement, check: number): HTMLSelectElement {\n    if (check !== null) {\n      const option = select.querySelectorAll(\"option\")[check];\n      const rootNode = this.getRootNode() as ShadowRoot | Document;\n      return rootNode.getElementById(option.id + \"::parent\") as HTMLSelectElement;\n    } else {\n      return null;\n    }\n  }\n\n  private show(select: HTMLSelectElement, check: number): void {\n    select.classList.remove(\"d-none\");\n    const checkedOption = select.querySelector<HTMLOptionElement>(\"option:checked\");\n    if (checkedOption && checkedOption.index !== check) {\n      checkedOption.selected = false;\n    }\n    if (check !== null && checkedOption.index !== check) {\n      select.querySelectorAll(\"option\")[check].selected = true;\n    }\n  }\n\n  private hide(select: HTMLSelectElement): void {\n    select.classList.add(\"d-none\");\n    const checkedOption = select.querySelector<HTMLOptionElement>(\"option:checked\");\n    if (checkedOption) {\n      checkedOption.selected = false;\n    }\n  }\n\n  private get listboxes(): NodeListOf<HTMLSelectElement> {\n    return this.querySelectorAll(\".tobago-treeListbox-select\");\n  }\n\n  private get levelElements(): NodeListOf<HTMLDivElement> {\n    return this.querySelectorAll(\".tobago-treeListbox-level\");\n  }\n\n  private get hiddenInput(): HTMLInputElement {\n    const rootNode = this.getRootNode() as ShadowRoot | Document;\n    return rootNode.getElementById(this.id + \"::selected\") as HTMLInputElement;\n  }\n}\n\ndocument.addEventListener(\"tobago.init\", function (event: Event): void {\n  if (window.customElements.get(\"tobago-tree-listbox\") == null) {\n    window.customElements.define(\"tobago-tree-listbox\", TreeListbox);\n  }\n});\n"]}