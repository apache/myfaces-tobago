{"version":3,"file":"tobago-tree.js","sourceRoot":"../ts/","sources":["tobago-tree.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Selectable} from \"./tobago-selectable\";\nimport {TreeNode} from \"./tobago-tree-node\";\n\nexport class Tree extends HTMLElement {\n\n  constructor() {\n    super();\n  }\n\n  connectedCallback(): void {\n  }\n\n  clearSelectedNodes(): void {\n    this.hiddenInputSelected.value = \"[]\"; //empty set\n  }\n\n  addSelectedNode(selectedNode: number): void {\n    const selectedNodes = new Set(JSON.parse(this.hiddenInputSelected.value));\n    selectedNodes.add(selectedNode);\n    this.hiddenInputSelected.value = JSON.stringify(Array.from(selectedNodes));\n  }\n\n  private getSelectedNodes(): NodeListOf<TreeNode> {\n    let queryString: string = \"\";\n    for (const selectedNodeIndex of JSON.parse(this.hiddenInputSelected.value)) {\n      if (queryString.length > 0) {\n        queryString += \", \";\n      }\n      queryString += \"tobago-tree-node[index='\" + selectedNodeIndex + \"']\";\n    }\n\n    if (queryString.length > 0) {\n      return this.querySelectorAll(queryString) as NodeListOf<TreeNode>;\n    } else {\n      return null;\n    }\n  }\n\n  deleteSelectedNode(selectedNode: number): void {\n    const selectedNodes = new Set(JSON.parse(this.hiddenInputSelected.value));\n    selectedNodes.delete(selectedNode);\n    this.hiddenInputSelected.value = JSON.stringify(Array.from(selectedNodes));\n  }\n\n  private get hiddenInputSelected(): HTMLInputElement {\n    return this.querySelector(\":scope > .tobago-tree-selected\");\n  }\n\n  private clearExpandedNodes(): void {\n    this.hiddenInputExpanded.value = \"[]\"; //empty set\n  }\n\n  private addExpandedNode(expandedNode: number): void {\n    const expandedNodes = new Set(JSON.parse(this.hiddenInputExpanded.value));\n    expandedNodes.add(expandedNode);\n    this.hiddenInputExpanded.value = JSON.stringify(Array.from(expandedNodes));\n  }\n\n  private deleteExpandedNode(expandedNode: number): void {\n    const expandedNodes = new Set(JSON.parse(this.hiddenInputExpanded.value));\n    expandedNodes.delete(expandedNode);\n    this.hiddenInputExpanded.value = JSON.stringify(Array.from(expandedNodes));\n  }\n\n  get hiddenInputExpanded(): HTMLInputElement {\n    return this.querySelector(\":scope > .tobago-tree-expanded\");\n  }\n\n  get selectable(): Selectable {\n    return Selectable[this.getAttribute(\"selectable\")];\n  }\n}\n\ndocument.addEventListener(\"tobago.init\", function (event: Event): void {\n  if (window.customElements.get(\"tobago-tree\") == null) {\n    window.customElements.define(\"tobago-tree\", Tree);\n  }\n});\n"]}